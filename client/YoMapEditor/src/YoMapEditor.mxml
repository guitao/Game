<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:flexlib="http://code.google.com/p/flexlib/"
						layout="absolute" title="{_versionNumber}" showStatusBar="false"
						initialize="initApp(event)" creationComplete="creationComplete(event)" verticalScrollPolicy="auto">
	<mx:Style source="css/flekristal.css" />
	<mx:Script>
		<![CDATA[
			import com.heptafish.mapeditor.events.MapEditorEvent;
			import com.heptafish.mapeditor.items.Building;
			import com.heptafish.mapeditor.layers.BuildingLayer;
			import com.heptafish.mapeditor.layers.GridLayer;
			import com.heptafish.mapeditor.layers.MapLayer;
			import com.heptafish.mapeditor.layers.RoadPointLayer;
			import com.heptafish.mapeditor.utils.Global;
			import com.heptafish.mapeditor.utils.HeptaFishXmlWriter;
			import com.heptafish.mapeditor.utils.MapEditorConstant;
			import com.heptafish.mapeditor.utils.MapEditorUtils;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			
			public var  _gridLayer:GridLayer;//网格层
			public var  _mapLayer:MapLayer;//地图层
			private var _buildingLayer:BuildingLayer;//建筑层
			private var _roadPointLayer:RoadPointLayer;//路点层
			
			public var  _mapArr:Array;//地图信息数组
			private var _mapXml:XML;//地图信息XML
			
			public var _mapWidth:Number = 0;//地图宽度
			public var _mapHeight:Number = 0;//地图高度
			public var _cellWidth:Number = 0;//单元格宽度
			public var _cellHeight:Number = 0;//单元格高度
			public var _col:int = 0;//地图横向节点数
			public var _row:int = 0;//地图纵向节点数
			private var _mapName:String = "";//地图名称
			private var _sliceHeight:Number = 0;//地图栅格高度
			private var _sliceWidth:Number = 0;//地图栅格宽度
			
			private var _menuShow:Boolean    = true;//菜单条是否显示
			private var _mouseDowned:Boolean = false;//鼠标是否按下
			
			private var _currentMode:int = 0;//当前选择的鼠标点击模式
			private var _selectMode:int = 0;//鼠标点击为选择模式
			private var _roadSignleMode:int = 1;//鼠标点击为单选路点
			private var _roadMultiMode:int = 2;//鼠标点击为选择障碍
			private var _roadCancelMode:int = 3;//鼠标点击为取消路点
			private var _buildMode:int = 4;//鼠标点击为放置建筑
			
			private var _imageLib:ImageLibPanel;//地图元件库panel
			private var _mapBaseInfoPanel:MapBaseInfoPanel;//地图信息panel
			private var _mapMouseInfoPanel:MapMouseInfoPanel;//鼠标信息panel
			
			public var  _buildBrush:Building;//建筑笔刷
			
			private var _mapDataFileFilter:FileFilter = new FileFilter("xml", "*.xml");//地图文件过滤
			private var _mapDataSelectFile:File;
			private var _loadType:String = "";//加载模式
			
			[Bindable]
			private var _versionNumber:String = "MapEditor V" + Global.versionNo;
			
			//初始化应用
			private function initApp(evet:Event):void{
				//最大化
				WindowedApplication(this).maximize();
				//设置Alert按钮
				Alert.okLabel = "确定";
				Alert.cancelLabel = "取消";
				//检查文件目录是否已经创建
				var rootDir:File = File.documentsDirectory.resolvePath("HFMapEdit");
				if (rootDir.exists == false)
				{
					rootDir.createDirectory();
				}
				
				//检查库图片目录是否已经创建
				var libDir:File = rootDir.resolvePath(MapEditorConstant.IMAGE_PATH);
				if (libDir.exists == false)
				{
					libDir.createDirectory();
				}
				
				//检查地图图片目录是否已经创建
				var mapDir:File = rootDir.resolvePath(MapEditorConstant.MAP_PATH);
				if (mapDir.exists == false)
				{
					mapDir.createDirectory();
				}
				
				//设置tooltip样式
				StyleManager.getStyleDeclaration("ToolTip").setStyle("fontSize",12);   
				ToolTipManager.showDelay = 0;
			}
			
			//初始化编辑器
			private function creationComplete(evet:Event):void{
				//初始化地图信息数组
				_mapArr = new Array();
				createEditPanel();
			}
			
			//菜单点击响应
			private function menuHandler(evet:MouseEvent):void{
				//声明按钮：字符串=事件。目标，ID名称
				var btnId:String = evet.target.id;
				//构造笔刷
				if(_buildBrush != null)
					//构造笔刷是否可见
					_buildBrush.visible = false;
				//如果是版权按钮
				if(btnId == "copyrightBtn"){
					//显示复制正确
					showCopyRight();
					//如果是新建按钮
				}else if(btnId == "newMapBtn"){
					//显示新的地图信息
					showNewMapInfo();
					//如果是打开地图
				}else if(btnId == "openMapBtn"){
					openMap();
				}
				
				//如果地图层！=null
				if(_mapLayer != null){
					
					//地图观察按钮
					if(btnId == "mapViewBtn"){
						showHidenMap();//如果是显示隐藏地图层
					}else if(btnId == "gridViewBtn"){
						showHidenGrid();//如果是显示隐藏网格层
					}else if(btnId == "buildViewBtn"){
						showHidenBuild();//如果是显示隐藏建筑层
					}else if(btnId == "signleRoadBtn"){
						this.cursorManager.removeAllCursors();
						_currentMode = 1;//如果是路点
						this.cursorManager.setCursor(Assets.CursorRoadPoint);
					}else if(btnId == "multiRoadBtn"){
						this.cursorManager.removeAllCursors();
						_currentMode = 2;//如果是障碍
						this.cursorManager.setCursor(Assets.CursorRoadHinder);
					}else if(btnId == "cancelRoadBtn"){
						this.cursorManager.removeAllCursors();
						_currentMode = 3;//如果是清除
						this.cursorManager.setCursor(Assets.CursorRoadCancel);
					}else if(btnId == "buildBtn"){//如果是放置建筑按钮
						if(_buildBrush.init){
							this.cursorManager.removeAllCursors();
							_currentMode = 4;//放置建筑物
						}else{
							Alert.show("请先从地图元件库中选择元件！");
						}
					}else if(btnId == "cancelSelect"){//如果是取消笔刷
						this.cursorManager.removeAllCursors();
						_buildBrush.visible = false;
						_currentMode = 0;
					}else if(btnId == "baseInfoBtn"){//如果是显示隐藏基本信息
						if(_mapBaseInfoPanel.visible){
							_mapBaseInfoPanel.visible = false;
						}else{
							_mapBaseInfoPanel.visible = true;
						}
					}else if(btnId == "mouseInfoBtn"){//如果是显示隐藏鼠标信息

					}else if(btnId == "saveMapBtn"){//如果是保存地图
						
						Alert.okLabel = "路点";
						Alert.cancelLabel = "障碍";
						Alert.show("请选择要将空白区域转换成的类型", "", Alert.OK | Alert.CANCEL, null, saveMapHandler, null, Alert.CANCEL);
						
					}else if(btnId == "imageLibBtn"){
						showImageLib();
					}
				}
				
				
			}
			//显示隐藏菜单栏
			private function hidenMennu(evet:Event):void{
				if(_menuShow){
					menuShow.play();
					_menuShow = false;
				}else{
					menuHide.play();
					_menuShow = true;
				}
			}
			
			//显示版权信息
			private function showCopyRight(evet:Event = null):void{
				var copyRightPanel:* = PopUpManager.createPopUp(this,CopyRightPanel,true);
				PopUpManager.centerPopUp(copyRightPanel);
			}
			//显示新地图信息编辑panel
			private function showNewMapInfo():void{
				var mapInfoPanel:* = PopUpManager.createPopUp(this,NewMapInfoPanel,true);
				PopUpManager.centerPopUp(mapInfoPanel);
				mapInfoPanel.addEventListener(MapEditorEvent.NEWMAPINFO_SUBMIT,createNewMap);
				
			}
			
			private function showHidenBuild():void{
				if(_buildingLayer.visible){
					_buildingLayer.visible = false;
				}else{
					_buildingLayer.visible = true;
				}
			}
			//显示元件库
			private function showImageLib():void{
				if(_imageLib == null){
					_imageLib = ImageLibPanel(PopUpManager.createPopUp(this,ImageLibPanel));
					PopUpManager.centerPopUp(_imageLib);
				}else{
					if(_imageLib.visible){
						_imageLib.visible = false;
					}else{
						_imageLib.visible = true;
					}
				}
			}
			//重设所有参数
			private function reset():void{
				_currentMode = 0;
				this.cursorManager.removeAllCursors();
				mapEditCanvas.removeAllChildren();
				//设置Alert按钮
				Alert.okLabel     = "确定";
				Alert.cancelLabel = "取消";
				_mapArr = new Array();
				_mapXml = null;
				_buildBrush = null;
				if(_imageLib != null)
					PopUpManager.removePopUp(_imageLib);
				if(_mapBaseInfoPanel != null)
					PopUpManager.removePopUp(_mapBaseInfoPanel);
//				HeptaFishGC.gc();
			}
			
			//创建新地图
			private function createNewMap(evet:MapEditorEvent):void{
				reset();
				removeEventListener(MapEditorEvent.NEWMAPINFO_SUBMIT,createNewMap);
				_mapXml     = MapEditorUtils.getNewMapXml(evet);
				_mapWidth   = evet.mapWidth;
				_mapHeight  = evet.mapHeight;
				_cellWidth  = evet.cellWidth;
				_cellHeight = evet.cellHeight;
				_mapName    = evet.mapName;
				_loadType   = evet.loadType;
				var row:int = Math.floor(evet.mapHeight / evet.cellHeight)*2;
				var col:int = Math.round(evet.mapWidth / evet.cellWidth);
				_row = row;
				_col = col;
				_sliceWidth  = evet.sliceWidth;
				_sliceHeight = evet.sliceHeight;
				_mapArr = MapEditorUtils.getNewArrByStr(_mapXml.floor,_col,_row);
				createMapLayer();
			}
			//打开地图
			private function openMap():void{
				_mapDataSelectFile = File.applicationDirectory;
				_mapDataSelectFile.browseForOpen("选择地图文件",[_mapDataFileFilter]);
				_mapDataSelectFile.addEventListener(Event.SELECT,selectMapData);
				_currentMode=0;
			}
			
			//选择了地图文件
			private function selectMapData(evet:Event):void{
				reset();
				_mapDataSelectFile.removeEventListener(Event.SELECT,selectMapData);
				var dataFile:File = File(evet.target);
				dataFile.addEventListener(Event.COMPLETE,mapDataLoaded);
				dataFile.load();
			}
			
			//成功加载了地图文件
			private function mapDataLoaded(evet:Event):void{
				var dataFile:File = File(evet.target);  //数据文件：文件类型=目标事件
				_mapXml     = XML(dataFile.data);       //地图信息=XML（数据文件）
				_mapWidth   = _mapXml.@mapwidth;        //地图的宽=地图信息XML.地图宽
				_mapHeight  = _mapXml.@mapheight;       //地图的高=地图信息XML.地图高
				_cellWidth  = _mapXml.floor.@tileWidth; //单元格的宽=地图信息XML.面板.单元格宽
				_cellHeight = _mapXml.floor.@tileHeight;//单元格的高=地图信息XML.面板.单元格高
				_mapName    = _mapXml.@name;            //地图名称=地图信息XML.名称
				_col        = _mapXml.floor.@col;       //地图横向节点数=XML.地图横向节点数
				_row        = _mapXml.floor.@row;       //地图纵向节点数=XML.地图纵向节点数
				_loadType   = _mapXml.@loadType;
				_mapArr     = MapEditorUtils.getArrByStr(_mapXml.floor,_col,_row);
				createMapLayer();
				removeEvents();
			}
			
			//创建地图层
			private function createMapLayer():void{
				//初始化地图层
				var fileName:String = File(MapEditorConstant.LIB_HOME.resolvePath(String( _mapXml.@filename))).nativePath;
				_mapLayer = new MapLayer();
				_mapLayer.load(fileName);
				_mapLayer.addEventListener(Event.COMPLETE,createGridLayer);
				mapEditCanvas.addChild(_mapLayer);
//             	HeptaFishGC.gc();
			}
			//创建网格层
			private function createGridLayer(evet:Event):void{
				//初始化网格层
				_gridLayer = new GridLayer();
				_gridLayer.drawGrid(_mapWidth,_mapHeight,_cellWidth,_cellHeight);
				mapEditCanvas.addChild(_gridLayer);
				addEvent();
//             	HeptaFishGC.gc();
				createRoadPointLayer();
			}
			//移除事件监听
			private function removeEvents():void{
				
				if(mapEditCanvas.hasEventListener(MouseEvent.MOUSE_DOWN))mapEditCanvas.removeEventListener(MouseEvent.MOUSE_DOWN,mapEditCanvasClick);
				if(mapEditCanvas.hasEventListener(MouseEvent.MOUSE_MOVE))mapEditCanvas.removeEventListener(MouseEvent.MOUSE_MOVE,mapEditCanvasMove);
				if(mapEditCanvas.hasEventListener(MouseEvent.MOUSE_UP))mapEditCanvas.removeEventListener(MouseEvent.MOUSE_UP,mapEditCanvasUp);
				if(mapEditCanvas.hasEventListener(KeyboardEvent.KEY_DOWN))mapEditCanvas.removeEventListener(KeyboardEvent.KEY_DOWN, moveEditKey);
			}
			//创建事件监听
			private function addEvent():void{
				//创建鼠标点击监听
				if(!mapEditCanvas.hasEventListener(MouseEvent.MOUSE_DOWN)) mapEditCanvas.addEventListener(MouseEvent.MOUSE_DOWN,mapEditCanvasClick);
				if(!mapEditCanvas.hasEventListener(MouseEvent.MOUSE_MOVE))mapEditCanvas.addEventListener(MouseEvent.MOUSE_MOVE,mapEditCanvasMove);
				if(!mapEditCanvas.hasEventListener(MouseEvent.MOUSE_UP))mapEditCanvas.addEventListener(MouseEvent.MOUSE_UP,mapEditCanvasUp);
				if(!mapEditCanvas.hasEventListener(KeyboardEvent.KEY_DOWN))mapEditCanvas.addEventListener(KeyboardEvent.KEY_DOWN, moveEditKey);
				//创建键盘监听
				addEventListener(KeyboardEvent.KEY_DOWN,moveEditKey);
			}
			
			//创建路点层
			private function createRoadPointLayer():void{
				//初始化路点层
				_roadPointLayer = new RoadPointLayer(_gridLayer);
				//定义路点层必要信息
				_roadPointLayer.cellWidth  = _cellWidth;
				_roadPointLayer.cellHeight = _cellHeight;
				mapEditCanvas.addChild(_roadPointLayer);
				createBuildLayer();
				
			}
			//创建建筑层
			private function createBuildLayer():void{
				//初始化建筑层
				_buildingLayer = new BuildingLayer(_roadPointLayer);
				mapEditCanvas.addChild(_buildingLayer);
				_buildingLayer.drawByXml(_mapXml.copy());
				_roadPointLayer.drawArr(_mapArr, _mapXml.@roadType);
				
				_buildBrush         = new Building();
				_buildBrush.visible = false;
				_buildingLayer.addChild(_buildBrush);
				createEditPanel();
			}
			
			private function clickToUrl(urlStr:String):void{
				var urlStr:String  = urlStr;
				var url:URLRequest = new URLRequest(urlStr);
				navigateToURL(url, "_blank");
			}		
			
			//定义编辑层的panel
			private function createEditPanel():void{
				//定义鼠标信息panel
				_mapMouseInfoPanel   = MapMouseInfoPanel(PopUpManager.createPopUp(mapEditOutCanvas,MapMouseInfoPanel));
				_mapMouseInfoPanel.y = this.height - _mapMouseInfoPanel.height - 20;
				_mapMouseInfoPanel.x = this.width - _mapMouseInfoPanel.width - 40;
				
				//定义地图信息panel
				_mapBaseInfoPanel = MapBaseInfoPanel(PopUpManager.createPopUp(mapEditOutCanvas,MapBaseInfoPanel));
				var parObj:Object = new Object();
				parObj.mapName    = _mapName;
				parObj.mapWidth   = _mapWidth;
				parObj.mapHeight  = _mapHeight;
				parObj.cellW      = _cellWidth;
				parObj.cellH      = _cellHeight;
				parObj.col        = _col;
				parObj.row        = _row;
				parObj.loadType   = _loadType;
				_mapBaseInfoPanel.createContent(parObj);
				_mapBaseInfoPanel.x = mapEditOutCanvas.width - _mapBaseInfoPanel.width - 20;
				_mapBaseInfoPanel.y = mapEditOutCanvas.y + 5;
				
				//定义元件库面板
				_imageLib = ImageLibPanel(PopUpManager.createPopUp(this,ImageLibPanel));
				_imageLib.x = this.width - _imageLib.width - 20;
				_imageLib.y = _mapBaseInfoPanel.y + _mapBaseInfoPanel.height + 5;
			}
			
			
			//显示隐藏网格层
			private function showHidenGrid():void{
				if(_gridLayer.visible){
					_gridLayer.visible = false;
				}else{
					_gridLayer.visible = true;
				}
			}
			//显示隐藏地图层
			private function showHidenMap():void{
				if(_mapLayer.visible){
					_mapLayer.visible = false;
				}else{
					_mapLayer.visible = true;
				}
			}
			//编辑窗口鼠标点击事件
			private function mapEditCanvasClick(evet:MouseEvent):void{
				_mouseDowned = true;
				var mouseClickX:Number = evet.stageX;
				var mouseClickY:Number = evet.stageY;
				var tg:* = evet.target;
				//得到对应点击位置的地图索引
				var cellPoint:Point = MapEditorUtils.getCellPoint(_cellWidth, _cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);		
				if(_currentMode == 1 || _currentMode == 2 || _currentMode == 3){
					if((this.mouseX>_mapWidth - 10)||(this.mouseY>_mapHeight - 10)) return;
					try{
						drawRoadPoint(cellPoint, tg);
					}catch(e:Error){
					}
				}else if(_currentMode == 4){//放置建筑
					if((_buildBrush.x > _mapWidth - _buildBrush.width) || (_buildBrush.y > _mapHeight - _buildBrush.height)){
						Alert.show("您放置的元件超出地图边界", "错误提示", 4);
						Alert.okLabel = "继续";
						return;
					}
					if (_buildBrush.configXml == null) return;
					if (_buildBrush.configXml.@type != "building"){
						Alert.show("图片还未编辑保存,请先双击地图元件编辑并保存！");
						return;
					}
					//放建筑的图片
					_buildingLayer.placeAndClone(_buildBrush, cellPoint);
					//刷新建筑物的索引
					_buildingLayer.setChildIndex(_buildBrush, _buildingLayer.numChildren - 1);
					
				}
			}
			
			//绘制地图路点的方法
			private function drawRoadPoint(cellPoint:Point, tg:*):void{
				switch(_currentMode){
					case _roadSignleMode://如果是单选路点模式
						if(_mapArr[cellPoint.y][cellPoint.x] != MapEditorConstant.CELL_TYPE_ROAD){
							_roadPointLayer.drawCell(cellPoint.x,cellPoint.y,MapEditorConstant.CELL_TYPE_ROAD);
							_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_ROAD;
						}
						break;
					case _roadMultiMode://如果是选择障碍模式
						if(_mapArr[cellPoint.y][cellPoint.x] != MapEditorConstant.CELL_TYPE_HINDER){
							_roadPointLayer.drawCell(cellPoint.x,cellPoint.y,MapEditorConstant.CELL_TYPE_HINDER);
							_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_HINDER;
						}
						break;
					case _roadCancelMode://如果是清除模式
						if(tg is Building){
							_buildingLayer.removeBuild(tg);
						}else{
							if(_mapArr[cellPoint.y][cellPoint.x] == MapEditorConstant.CELL_TYPE_ROAD
								|| _mapArr[cellPoint.y][cellPoint.x] == MapEditorConstant.CELL_TYPE_HINDER){
								_roadPointLayer.resetCell(cellPoint.x,cellPoint.y);
								_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_SPACE;
							}
						}
						break;
					default:
						break;
				}
			}
			
			//鼠标在mapEditCanvas区域移动的响应方法
			private function mapEditCanvasMove(evet:MouseEvent):void{
				if(_gridLayer == null){
					return;
				}else if((_gridLayer.mouseX<_mapWidth) && (_gridLayer.mouseY<_mapHeight)){
					var cellPoint:Point = MapEditorUtils.getCellPoint(_cellWidth, _cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);
					//显示鼠标信息panel
					var parObj:Object = new Object();
					parObj.px = _gridLayer.mouseX;
					parObj.py = _gridLayer.mouseY;
					parObj.ix = cellPoint.x;
					parObj.iy = cellPoint.y;
					_mapMouseInfoPanel.createContent(parObj);
					
					//如果是放置建筑
					if(_currentMode == 4){
						this._buildBrush.visible = true;
						this._buildBrush.alpha   = 0.5;
						var xpw:int, ypw:int;
						var walkableStr:String = _buildBrush.configXml.walkable;
						var xo:int = int(_buildBrush.configXml.@xoffset);
						var yo:int = int(_buildBrush.configXml.@yoffset);
						
						if (walkableStr == null || walkableStr.length < 3) //没有阻挡设置，取图片左上角的点作为基准
						{	
							var ptt:Point = MapEditorUtils.getCellPoint(_cellWidth, _cellHeight, xo, yo);
							var ptp:Point = MapEditorUtils.getPixelPoint(_cellWidth, _cellHeight, ptt.x, ptt.y);
							//图片左上角与基准点的差
							xpw = xo - ptp.x;
							ypw = yo - ptp.y;
						} 
						else //有阻挡设置，取阻挡信息的第一个点作为基准
						{
							var strArray:Array = walkableStr.split(",");
							if (strArray == null || strArray.length < 2) return; //xml文件有错误
							//图片左上角与基准点的差
							xpw = xo - int(strArray[0]);
							ypw = yo - int(strArray[1]);
						}
					}
					var pxt:int   = cellPoint.x * _cellWidth + (cellPoint.y & 1) * _cellWidth / 2;
					var pyt:int   = cellPoint.y * _cellHeight / 2;
					
					if(_buildBrush!=null){					
						_buildBrush.x = pxt + xpw;
						_buildBrush.y = pyt + ypw;
					}
					
				}
				
				//如果鼠标按下
				if(_mouseDowned){
					//如果是设置路点
					if(_currentMode == 1 || _currentMode == 2 || _currentMode == 3){
						if((_gridLayer.mouseX>=_mapWidth - 10)||(_gridLayer.mouseY>=_mapHeight - 10)) return;
						try{
							drawRoadPoint(cellPoint,evet.target);
						}
						catch(e:Error){
						}
					}
				}
			}
			
			//鼠标抬起在mapEditCanvas区域的响应方法
			private function mapEditCanvasUp(evet:MouseEvent):void{
				_mouseDowned = false;
			}
			//保存地图
			private function saveMapHandler(evet:CloseEvent):void{
				var type:int       = evet.detail==Alert.CANCEL?MapEditorConstant.TYPE_SAVE_MAP_HINDER:MapEditorConstant.TYPE_SAVE_MAP_ROAD;
				Alert.okLabel      = "确定";
				Alert.cancelLabel  = "取消";
				
				_mapXml.floor      = MapEditorUtils.getStrByArr(_mapArr,type);
				_mapXml.@roadType  = type;
				_mapXml.items      = "";
				var buildArr:Array = _buildingLayer.buildingArray;
				for each(var blSave:Building in buildArr){
					_mapXml.items.appendChild(blSave.configXml);
				}
				
				var writer:HeptaFishXmlWriter = new HeptaFishXmlWriter(_mapXml, "/data/maps/" + _mapName + ".xml");
				writer.writeFun();
				
				_mapArr = MapEditorUtils.getArrByStr(_mapXml.floor,_col,_row);
				_roadPointLayer.drawArr(_mapArr, _mapXml.@roadType);
			}
			
			//移动编辑区域
			private function moveEditKey(evet:KeyboardEvent):void{
				if(_gridLayer != null && _mapLayer != null){
					switch (evet.keyCode)
					{
						case 37:	//left
							if(mapEditCanvas.horizontalScrollBar != null){
								mapEditCanvas.horizontalScrollPosition -= 30;
							}
							break;
						case 38:	//up
							if(mapEditCanvas.verticalScrollBar != null){
								mapEditCanvas.verticalScrollPosition -= 30;
							}
							break;
						case 39:	//right
							if(mapEditCanvas.horizontalScrollBar != null){
								mapEditCanvas.horizontalScrollPosition += 30;
							}
							break;
						case 40:	//down
							if(mapEditCanvas.verticalScrollBar != null){
								mapEditCanvas.verticalScrollPosition += 30;
							}
							break;
					}
				}
			}
		]]>
	</mx:Script>
	
	<!-- 菜单显示隐藏效果 -->
	<mx:Sequence id="menuShow" >
		<mx:Move target="{menuPanel}" yFrom="0" yTo="-100" duration="400" />
		<mx:Move target="{mapEditOutCanvas}" yFrom="138" yTo="38" duration="200" />
	</mx:Sequence>
	<mx:Sequence id="menuHide" >
		<mx:Move target="{mapEditOutCanvas}" yFrom="38" yTo="138" duration="200" />
		<mx:Move target="{menuPanel}" yFrom="-100" yTo="0" duration="400" />
	</mx:Sequence>
	
	
	<!-- 界面布局 -->
	<mx:Canvas id="waitCanvas" width="100%" height="100%" visible="false" />
	<mx:Canvas id="menuPanel" width="100%" height="40" backgroundColor="0x333333" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:HBox width="100%" height="24" x="8" y="8">
			<mx:HBox width="88" height="24">
				<mx:Button id="newMapBtn" x="5" y="9" width="24" height="24"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/fileAdd.png')" toolTip="新建"/>
				<mx:Button id="openMapBtn" x="37" y="9" width="24" height="24"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/fileOpen.png')" toolTip="打开"/>
				<mx:Button id="saveMapBtn" x="66" y="9" width="24" height="24"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/fileSave.png')" toolTip="保存"/>
			</mx:HBox>
			<mx:VRule height="24"/>
			<mx:HBox width="152" height="24">
				<mx:Button id="signleRoadBtn" x="128" y="9" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/roadPointS.png')" toolTip="设置路点"/>
				<mx:Button id="multiRoadBtn" x="239" y="9" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/roadPointM.png')" toolTip="设置障碍"/>
				<mx:Button id="cancelRoadBtn" x="192" y="9" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/roadPointDelete.png')" toolTip="设置空白区域"/>
				<mx:Button id="cancelSelect" x="160" y="9" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/cancelSelect.png')" toolTip="取消鼠标笔刷"/>
				<mx:Button id="buildBtn" x="92" y="9" width="24" height="24"
						   click="menuHandler(event)" icon="@Embed(source='images/icons/build.png')" toolTip="点击放置建筑"/>
			</mx:HBox>
			<mx:VRule height="24"/>
			<mx:HBox width="92" height="24">
				<mx:Button id="mapViewBtn" x="54" y="6" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewMap.png')" toolTip="显示隐藏地图层"/>
				<mx:Button id="gridViewBtn" x="6" y="5" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewGrid.png')" toolTip="显示隐藏网格层"/>
				<mx:Button id="buildViewBtn" x="106" y="6" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewBuild.png')" toolTip="显示隐藏建筑层"/>
			</mx:HBox>
			<mx:VRule height="24"/>
			<mx:HBox width="90" height="24">
				<mx:Button id="imageLibBtn" x="10" y="10" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/imageLib.png')" toolTip="显示隐藏元件库"/>
				<mx:Button id="baseInfoBtn" x="58" y="10" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/baseInfo.png')" toolTip="显示隐藏基本信息"/>
				<mx:Button id="mouseInfoBtn" x="121" y="12" width="24" height="24"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/mouseInfo.png')" toolTip="显示隐藏鼠标信息"/>
			</mx:HBox>
			<mx:VRule height="24"/>
			<mx:HBox width="324" height="24">
				<mx:Button width="24" height="24" click="hidenMennu(event)" icon="@Embed(source='images/icons/hide.png')" toolTip="收起/隐藏菜单栏"/>
				<mx:Button width="24" height="24" click="showCopyRight(event)" icon="@Embed(source='images/icons/logo16.png')" toolTip="版权信息"/>
				<!-- <mx:LinkButton click="clickToUrl('http://www.google.com/')" label="教程" toolTip="搜索教程" color="#FFFFFF" fontSize="13"/> -->
			</mx:HBox>
		</mx:HBox>
	</mx:Canvas>
	<mx:Canvas id="mapEditOutCanvas" y="40"  x="0" width="100%" height="100%" verticalScrollPolicy="off" >
		<mx:Canvas id="mapEditCanvas" y="0" width="100%" height="100%" verticalScrollPolicy="auto"/>
	</mx:Canvas>
</mx:WindowedApplication>
