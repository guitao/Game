<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:flexlib="http://code.google.com/p/flexlib/"
						layout="absolute" title="{_versionNumber}" showStatusBar="false"
						initialize="initApp(event)" creationComplete="creationComplete(event)" verticalScrollPolicy="auto">
	<mx:Style source="css/flekristal.css" />
	<mx:Script>
		<![CDATA[
			import com.heptafish.mapeditor.events.MapEditorEvent;
			import com.heptafish.mapeditor.items.Building;
			import com.heptafish.mapeditor.layers.BuildingLayer;
			import com.heptafish.mapeditor.layers.GridLayer;
			import com.heptafish.mapeditor.layers.MapLayer;
			import com.heptafish.mapeditor.layers.RoadPointLayer;
			import com.heptafish.mapeditor.utils.Global;
			import com.heptafish.mapeditor.utils.HeptaFishXmlWriter;
			import com.heptafish.mapeditor.utils.MapEditorConstant;
			import com.heptafish.mapeditor.utils.MapEditorUtils;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			
			/**
			 * 网格层
			 */
			public var  _gridLayer:GridLayer;
			
			/**
			 * 地图层
			 */
			public var  _mapLayer:MapLayer;
			
			/**
			 * 建筑层
			 */
			private var _buildingLayer:BuildingLayer;
			
			/**
			 * 路点层
			 */
			private var _roadPointLayer:RoadPointLayer;
			
			/**
			 * 地图信息
			 */
			private var _mapModel:MapModel;
			
			/**
			 * 路点
			 */
			private var _mapArr:Array;
			
			/**
			 * 菜单条是否显示
			 */
			private var _menuShow:Boolean = true;
			
			/**
			 * 鼠标是否按下
			 */
			private var _mouseDowned:Boolean = false;
			
			/**
			 * 当前选择的鼠标点击模式
			 */
			private var _currentMode:int = 0;
			
			/**
			 * 地图元件库panel
			 */
			private var _imageLib:ImageLibPanel;
			
			/**
			 * 地图信息panel
			 */
			private var _mapInfoPanel:MapInfoPanel;
			
			/**
			 * 鼠标信息panel
			 */
			private var _mapMouseInfoPanel:MapMouseInfoPanel;
			
			/**
			 * 建筑笔刷
			 */
			public var  buildBrush:Building;
			
			/**
			 * 地图文件过滤
			 */
			private var _mapDataFileFilter:FileFilter = new FileFilter("xml", "*.xml");
			
			private var _mapDataSelectFile:File;
			
			[Bindable]
			private var _versionNumber:String = "MapEditor " + Global.version;
			
			//初始化应用
			private function initApp(evet:Event):void{
				//最大化
				WindowedApplication(this).maximize();
				
				Alert.okLabel = "确定";
				Alert.cancelLabel = "取消";
				
				//检查文件目录是否已经创建
				var rootDir:File = File.documentsDirectory.resolvePath("HFMapEdit");
				if (rootDir.exists == false)
				{
					rootDir.createDirectory();
				}
				
				//检查库图片目录是否已经创建
				var libDir:File = rootDir.resolvePath(MapEditorConstant.IMAGE_PATH);
				if (libDir.exists == false)
				{
					libDir.createDirectory();
				}
				
				//检查地图图片目录是否已经创建
				var mapDir:File = rootDir.resolvePath(MapEditorConstant.MAP_PATH);
				if (mapDir.exists == false)
				{
					mapDir.createDirectory();
				}
				
				//设置tooltip样式
				StyleManager.getStyleDeclaration("ToolTip").setStyle("fontSize",12);   
				ToolTipManager.showDelay = 0;
			}
			
			/**
			 * 初始化编辑器
			 */
			private function creationComplete(evet:Event):void
			{
				inteModel();
				
				createEditPanel();
				createMapLayer();
				createGridLayer();
				createRoadPointLayer();
				createBuildLayer();
				
				initEvent();
				
				update();
			}
			
			/**
			 * 菜单点击响应
			 */
			private function menuHandler(evet:MouseEvent):void{
				var btnId:String = evet.target.id;
				if(buildBrush != null)
				{
					buildBrush.visible = false;
				}
				if(btnId == "copyrightBtn")
				{
					showCopyRight();
				}
				else if(btnId == "newMapBtn")
				{
					showNewMapInfo();
				}
				else if(btnId == "openMapBtn")
				{
					openMap();
				}
				
				if(_mapLayer != null){
					//地图观察按钮
					if(btnId == "mapViewBtn")
					{
						_mapLayer.visible = !_mapLayer.visible;
					}
					else if(btnId == "gridViewBtn")
					{
						_gridLayer.visible = !_gridLayer.visible;
					}
					else if(btnId == "buildViewBtn")
					{
						_buildingLayer.visible = !_buildingLayer.visible;
					}
					else if(btnId == "signleRoadBtn")
					{
						this.cursorManager.removeAllCursors();
						_currentMode = MapEditorConstant.CELL_TYPE_ROAD;//如果是路点
						this.cursorManager.setCursor(Assets.CursorRoadPoint);
					}
					else if(btnId == "multiRoadBtn")
					{
						this.cursorManager.removeAllCursors();
						_currentMode = MapEditorConstant.CELL_TYPE_HINDER;//如果是障碍
						this.cursorManager.setCursor(Assets.CursorRoadHinder);
					}
					else if(btnId == "cancelRoadBtn")
					{
						this.cursorManager.removeAllCursors();
						_currentMode = MapEditorConstant.CELL_TYPE_SPACE;//如果是空白
						this.cursorManager.setCursor(Assets.CursorRoadCancel);
					}
					else if(btnId == "buildingRoad")
					{
						this.cursorManager.removeAllCursors();
						_currentMode = MapEditorConstant.CELL_TYPE_BUILDING_ROAD;//如果是空白
						this.cursorManager.setCursor(Assets.CursorRoadBuilding);
					}
					else if(btnId == "buildBtn")
					{
						if(buildBrush.init)
						{
							this.cursorManager.removeAllCursors();
							_currentMode = MapEditorConstant.CELL_TYPE_BUILDING;//放置建筑物
						}
						else
						{
							Alert.show("请先从地图元件库中选择元件！");
						}
					}
					else if(btnId == "cancelSelect")
					{
						
					}
					else if(btnId == "baseInfoBtn")
					{
						_mapInfoPanel.visible = !_mapInfoPanel.visible;
					}
					else if(btnId == "mouseInfoBtn")
					{

					}
					else if(btnId == "saveMapBtn")
					{
						saveMapHandler();
					}
					else if(btnId == "imageLibBtn")
					{
						showImageLib();
					}
				}
			}
			
			/**
			 * 显示隐藏菜单栏
			 */
			private function hidenMennu(evet:Event):void{
				if(_menuShow){
					menuShow.play();
					_menuShow = false;
				}else{
					menuHide.play();
					_menuShow = true;
				}
			}
			
			/**
			 * 显示版权信息
			 */
			private function showCopyRight(evet:Event = null):void{
				var copyRightPanel:* = PopUpManager.createPopUp(this, CopyRightPanel, true);
				PopUpManager.centerPopUp(copyRightPanel);
			}
			
			/**
			 * 显示新地图信息编辑panel
			 */
			private function showNewMapInfo():void{
				PopUpManager.centerPopUp(_mapInfoPanel);
			}
			
			/**
			 * 显示元件库
			 */
			private function showImageLib():void{
				if(_imageLib == null)
				{
					_imageLib = ImageLibPanel(PopUpManager.createPopUp(this, ImageLibPanel));
					PopUpManager.centerPopUp(_imageLib);
				}
				else
				{
					_imageLib.visible = !_imageLib.visible;
				}
			}
			
			/**
			 * 重设所有参数
			 */
			private function reset():void{
				_currentMode = -1;
				this.cursorManager.removeAllCursors();
				_mapArr = [];
				buildBrush = null;
				if(_imageLib != null)
				{
					PopUpManager.removePopUp(_imageLib);
				}
				if(_mapInfoPanel != null)
				{
					PopUpManager.removePopUp(_mapInfoPanel);
				}
			}
			
			private function __mapInfoChange(e:MapEditorEvent):void{
				update();
			}
			
			private function update():void
			{
				_mapArr = MapEditorUtils.getNewArrByStr(_mapModel.nodeList, _mapModel.col, _mapModel.row);
				_mapLayer.load(_mapModel.path);
				_gridLayer.drawGrid(_mapModel.mapWidth, _mapModel.mapHeight, _mapModel.cellWidth, _mapModel.cellHeight);
				_buildingLayer.update();
				
				_roadPointLayer.cellWidth = _mapModel.cellWidth;
				_roadPointLayer.cellHeight = _mapModel.cellHeight;
				_roadPointLayer.drawArr(_mapArr, _mapModel.roadType);
			}
			
			private function openMap():void{
				_mapDataSelectFile = File.applicationDirectory;
				_mapDataSelectFile.browseForOpen("选择地图文件",[_mapDataFileFilter]);
				_mapDataSelectFile.addEventListener(Event.SELECT, __selectMapData);
				_currentMode = -1;
			}
			
			/**
			 * 选择了地图文件
			 */
			private function __selectMapData(evet:Event):void{
				_mapDataSelectFile.removeEventListener(Event.SELECT,__selectMapData);
				var dataFile:File = File(evet.target);
				dataFile.addEventListener(Event.COMPLETE, __mapDataLoaded);
				dataFile.load();
			}
			
			/**
			 * 成功加载了地图文件
			 */
			private function __mapDataLoaded(e:Event):void{
				var dataFile:File = File(e.target);
			}
			
			/**
			 * 创建地图层
			 */
			private function createMapLayer():void
			{
				_mapLayer = new MapLayer();
				_mapLayer.model = _mapModel;
				mapEditCanvas.addChild(_mapLayer);
			}
			
			/**
			 * 创建网格层
			 */
			private function createGridLayer():void{
				_gridLayer = new GridLayer();
				mapEditCanvas.addChild(_gridLayer);
			}
			
			/**
			 * 创建事件监听
			 */
			private function initEvent():void{
				mapEditCanvas.addEventListener(MouseEvent.MOUSE_DOWN, __mapEditCanvasClick);
				mapEditCanvas.addEventListener(MouseEvent.MOUSE_MOVE, __mapEditCanvasMove);
				mapEditCanvas.addEventListener(MouseEvent.MOUSE_UP, __mapEditCanvasUp);
				mapEditCanvas.addEventListener(KeyboardEvent.KEY_DOWN, __moveEditKey);
				this.addEventListener(KeyboardEvent.KEY_DOWN, __moveEditKey);
				this.addEventListener(MouseEvent.RIGHT_CLICK, __rightClick);
			}
			
			private function createRoadPointLayer():void{
				_roadPointLayer = new RoadPointLayer(_gridLayer);
				mapEditCanvas.addChild(_roadPointLayer);
			}
			
			private function createBuildLayer():void{
				_buildingLayer = new BuildingLayer(_roadPointLayer);
				mapEditCanvas.addChild(_buildingLayer);
				
				_buildingLayer.drawBuilding(_mapModel);
				mapEditCanvas.addChild(_buildingLayer);
				
				buildBrush = new Building();
				buildBrush.visible = false;
				_buildingLayer.addChild(buildBrush);
			}
			
			private function clickToUrl(urlStr:String):void{
				var urlStr:String  = urlStr;
				var url:URLRequest = new URLRequest(urlStr);
				navigateToURL(url, "_blank");
			}		
			
			/**
			 * 定义编辑层的panel
			 */
			private function createEditPanel():void{
				//定义鼠标信息panel
				_mapMouseInfoPanel = MapMouseInfoPanel(PopUpManager.createPopUp(mapEditOutCanvas,MapMouseInfoPanel));
				_mapMouseInfoPanel.y = this.height - _mapMouseInfoPanel.height - 20;
				_mapMouseInfoPanel.x = this.width - _mapMouseInfoPanel.width - 40;
				
				//定义地图信息panel
				_mapInfoPanel = new MapInfoPanel();
				_mapInfoPanel.model = _mapModel;
				_mapInfoPanel.x = mapEditOutCanvas.width - _mapInfoPanel.width - 20;
				_mapInfoPanel.y = mapEditOutCanvas.y + 5;
				_mapInfoPanel.addEventListener(MapEditorEvent.MAP_INFO_CHNAGE, __mapInfoChange);
				PopUpManager.addPopUp(_mapInfoPanel, this);
				
				//定义元件库面板
				_imageLib = ImageLibPanel(PopUpManager.createPopUp(this,ImageLibPanel));
				_imageLib.x = this.width - _imageLib.width - 20;
				_imageLib.y = _mapInfoPanel.y + _mapInfoPanel.height + 5;
			}
			
			/**
			 * 编辑窗口鼠标点击事件
			 */
			private function __mapEditCanvasClick(evet:MouseEvent):void{
				_mouseDowned = true;
				var mouseClickX:Number = evet.stageX;
				var mouseClickY:Number = evet.stageY;
				var tg:* = evet.target;
				//得到对应点击位置的地图索引
				var cellPoint:Point = MapEditorUtils.getCellPoint(_mapModel.cellWidth, _mapModel.cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);		
				if(isSetRoadPoint()){
					if((this.mouseX > _mapModel.mapWidth - 10) || (this.mouseY > _mapModel.mapHeight - 10))
					{
						return;
					}
					drawRoadPoint(cellPoint, tg);
				}
				else if(_currentMode == MapEditorConstant.CELL_TYPE_BUILDING)
				{
					//放置建筑
					if((buildBrush.x > _mapModel.mapWidth - buildBrush.width) || (buildBrush.y > _mapModel.mapHeight - buildBrush.height))
					{
						Alert.show("您放置的元件超出地图边界", "错误提示", 4);
						Alert.okLabel = "继续";
						return;
					}
					if(buildBrush.info == null)
					{
						return;
					}
					if(buildBrush.info.type != "building")
					{
						Alert.show("图片还未编辑保存,请先双击地图元件编辑并保存！");
						return;
					}
					//放建筑的图片
					_buildingLayer.placeAndClone(buildBrush, cellPoint);
					//刷新建筑物的索引
					_buildingLayer.setChildIndex(buildBrush, _buildingLayer.numChildren - 1);
				}
			}
			
			/**
			 * 绘制地图路点的方法
			 */
			private function drawRoadPoint(cellPoint:Point, tg:*):void{
				switch(_currentMode)
				{
					case MapEditorConstant.CELL_TYPE_ROAD://如果是单选路点模式
						if(_mapArr[cellPoint.y][cellPoint.x] != MapEditorConstant.CELL_TYPE_ROAD)
						{
							_roadPointLayer.drawCell(cellPoint.x, cellPoint.y, MapEditorConstant.CELL_TYPE_ROAD);
							_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_ROAD;
						}
						break;
					case MapEditorConstant.CELL_TYPE_HINDER://如果是选择障碍模式
						if(_mapArr[cellPoint.y][cellPoint.x] != MapEditorConstant.CELL_TYPE_HINDER)
						{
							_roadPointLayer.drawCell(cellPoint.x, cellPoint.y, MapEditorConstant.CELL_TYPE_HINDER);
							_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_HINDER;
						}
						break;
					case MapEditorConstant.CELL_TYPE_BUILDING_ROAD://如果是选择障碍模式
						if(_mapArr[cellPoint.y][cellPoint.x] != MapEditorConstant.CELL_TYPE_BUILDING_ROAD)
						{
							_roadPointLayer.drawCell(cellPoint.x, cellPoint.y, MapEditorConstant.CELL_TYPE_BUILDING_ROAD);
							_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_BUILDING_ROAD;
						}
						break;
					case MapEditorConstant.CELL_TYPE_SPACE://如果是清除模式
						if(tg is Building)
						{
							_buildingLayer.removeBuild(tg);
						}
						else
						{
							if(_mapArr[cellPoint.y][cellPoint.x] == MapEditorConstant.CELL_TYPE_BUILDING_ROAD || _mapArr[cellPoint.y][cellPoint.x] == MapEditorConstant.CELL_TYPE_ROAD || _mapArr[cellPoint.y][cellPoint.x] == MapEditorConstant.CELL_TYPE_HINDER)
							{
								_roadPointLayer.resetCell(cellPoint.x, cellPoint.y);
								_mapArr[cellPoint.y][cellPoint.x] = MapEditorConstant.CELL_TYPE_SPACE;
							}
						}
						break;
					default:
						break;
				}
			}
			
			/**
			 * 鼠标在mapEditCanvas区域移动的响应方法
			 */
			private function __mapEditCanvasMove(evet:MouseEvent):void{
				if(_gridLayer == null){
					return;
				}else if((_gridLayer.mouseX < _mapModel.mapWidth) && (_gridLayer.mouseY < _mapModel.mapHeight)){
					var cellPoint:Point = MapEditorUtils.getCellPoint(_mapModel.cellWidth, _mapModel.cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);
					//显示鼠标信息panel
					var parObj:Object = new Object();
					parObj.px = _gridLayer.mouseX;
					parObj.py = _gridLayer.mouseY;
					parObj.ix = cellPoint.x;
					parObj.iy = cellPoint.y;
					_mapMouseInfoPanel.createContent(parObj);
					
					//如果是放置建筑
					if(_currentMode == 4)
					{
						this.buildBrush.visible = true;
						this.buildBrush.alpha   = 0.5;
						var xpw:int, ypw:int;
						var walkableStr:String = buildBrush.info.walkable;
						var xo:int = int(buildBrush.info.xoffset);
						var yo:int = int(buildBrush.info.yoffset);
						
						if (walkableStr == null || walkableStr.length < 3) //没有阻挡设置，取图片左上角的点作为基准
						{	
							var ptt:Point = MapEditorUtils.getCellPoint(_mapModel.cellWidth, _mapModel.cellHeight, xo, yo);
							var ptp:Point = MapEditorUtils.getPixelPoint(_mapModel.cellWidth, _mapModel.cellHeight, ptt.x, ptt.y);
							//图片左上角与基准点的差
							xpw = xo - ptp.x;
							ypw = yo - ptp.y;
						} 
						else //有阻挡设置，取阻挡信息的第一个点作为基准
						{
							var strArray:Array = walkableStr.split(",");
							if (strArray == null || strArray.length < 2) return; //xml文件有错误
							//图片左上角与基准点的差
							xpw = xo - int(strArray[0]);
							ypw = yo - int(strArray[1]);
						}
					}
					var pxt:int   = cellPoint.x * _mapModel.cellWidth + (cellPoint.y & 1) * _mapModel.cellWidth / 2;
					var pyt:int   = cellPoint.y * _mapModel.cellHeight / 2;
					
					if(buildBrush!=null)
					{					
						buildBrush.x = pxt + xpw;
						buildBrush.y = pyt + ypw;
					}
					
				}
				
				//如果鼠标按下
				if(_mouseDowned){
					//如果是设置路点
					if(isSetRoadPoint())
					{
						if((_gridLayer.mouseX >= _mapModel.mapWidth - 10) || (_gridLayer.mouseY >= _mapModel.mapHeight - 10))
						{
							return;
						}
						drawRoadPoint(cellPoint, evet.target);
					}
				}
			}
			
			private function isSetRoadPoint():Boolean
			{
				return _currentMode == MapEditorConstant.CELL_TYPE_SPACE || _currentMode == MapEditorConstant.CELL_TYPE_ROAD || _currentMode == MapEditorConstant.CELL_TYPE_HINDER || _currentMode == MapEditorConstant.CELL_TYPE_BUILDING_ROAD;
			}
			
			//鼠标抬起在mapEditCanvas区域的响应方法
			private function __mapEditCanvasUp(evet:MouseEvent):void{
				_mouseDowned = false;
			}
			
			/**
			 * 保存地图
			 */
			private function saveMapHandler():void{
				_mapModel.nodeList = MapEditorUtils.getStrByArr(_mapArr, _mapModel.roadType);
				_mapModel.items = "";
				var buildArr:Array = _buildingLayer.buildingArray;
				for each(var building:Building in buildArr){
//					_mapModel.items.appendChild(building.configXml);
				}
				
				var writer:HeptaFishXmlWriter = new HeptaFishXmlWriter(_mapModel, "/data/maps/" + _mapModel.mapName + ".xml");
				
				_mapArr = MapEditorUtils.getArrByStr(_mapModel.nodeList, _mapModel.col, _mapModel.row);
				_roadPointLayer.drawArr(_mapArr, _mapModel.roadType);
			}
			
			/**
			 * 移动编辑区域
			 */
			private function __moveEditKey(evet:KeyboardEvent):void{
				if(_gridLayer != null && _mapLayer != null)
				{
					switch (evet.keyCode)
					{
						case 37:	//left
							if(mapEditCanvas.horizontalScrollBar != null)
							{
								mapEditCanvas.horizontalScrollPosition -= 30;
							}
							break;
						case 38:	//up
							if(mapEditCanvas.verticalScrollBar != null)
							{
								mapEditCanvas.verticalScrollPosition -= 30;
							}
							break;
						case 39:	//right
							if(mapEditCanvas.horizontalScrollBar != null)
							{
								mapEditCanvas.horizontalScrollPosition += 30;
							}
							break;
						case 40:	//down
							if(mapEditCanvas.verticalScrollBar != null)
							{
								mapEditCanvas.verticalScrollPosition += 30;
							}
							break;
					}
				}
			}
			
			private function inteModel():void
			{
				_mapModel = new MapModel();
			}
			
			/**
			 * 取消笔刷
			 */
			protected function __rightClick(e:MouseEvent):void
			{
				this.cursorManager.removeAllCursors();
				buildBrush.visible = false;
				_currentMode = -1;
			}
			
		]]>
	</mx:Script>
	
	<!-- 菜单显示隐藏效果 -->
	<mx:Sequence id="menuShow" >
		<mx:Move target="{menuPanel}" yFrom="0" yTo="-100" duration="400" />
		<mx:Move target="{mapEditOutCanvas}" yFrom="138" yTo="38" duration="200" />
	</mx:Sequence>
	<mx:Sequence id="menuHide" >
		<mx:Move target="{mapEditOutCanvas}" yFrom="38" yTo="138" duration="200" />
		<mx:Move target="{menuPanel}" yFrom="-100" yTo="0" duration="400" />
	</mx:Sequence>
	
	<!-- 界面布局 -->
	<mx:Canvas id="waitCanvas" width="100%" height="100%" visible="false" />
	<mx:Canvas id="menuPanel" width="100%" height="40" backgroundColor="0x333333" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:HBox width="100%" height="32" x="8" y="4">
			<mx:HBox width="113" height="32">
				<mx:Button id="newMapBtn" x="5" y="9" width="32" height="32"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/plus.png')" toolTip="新建"/>
				<mx:Button id="openMapBtn" x="37" y="9" width="32" height="32"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/folder.png')" toolTip="打开"/>
				<mx:Button id="saveMapBtn" x="66" y="9" width="32" height="32"
						   click="{menuHandler(event)}"
						   icon="@Embed(source='images/icons/fileSave.png')" toolTip="保存"/>
			</mx:HBox>
			<mx:VRule height="32"/>
			<mx:HBox width="194" height="32">
				<mx:Button id="signleRoadBtn" x="128" y="9" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/roadPointS.png')" toolTip="设置路点"/>
				<mx:Button id="multiRoadBtn" x="239" y="9" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/roadPointM.png')" toolTip="设置障碍"/>
				<mx:Button id="buildingRoad" x="160" y="9" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/buildingRoad.png')" toolTip="设置建筑点"/>
				<mx:Button id="buildBtn" x="92" y="9" width="32" height="32"
						   click="menuHandler(event)" icon="@Embed(source='images/icons/build.png')" toolTip="放置建筑"/>
				<mx:Button id="cancelRoadBtn" x="192" y="9" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/broom.png')" toolTip="设置空白区域"/>
			</mx:HBox>
			<mx:VRule height="32"/>
			<mx:HBox width="113" height="32">
				<mx:Button id="mapViewBtn" x="54" y="6" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewMap.png')" toolTip="显示隐藏地图层"/>
				<mx:Button id="gridViewBtn" x="6" y="5" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewGrid.png')" toolTip="显示隐藏网格层"/>
				<mx:Button id="buildViewBtn" x="106" y="6" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/viewBuild.png')" toolTip="显示隐藏建筑层"/>
			</mx:HBox>
			<mx:VRule height="32"/>
			<mx:HBox width="113" height="32">
				<mx:Button id="imageLibBtn" x="10" y="10" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/imageLib.png')" toolTip="显示隐藏元件库"/>
				<mx:Button id="baseInfoBtn" x="58" y="10" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/baseInfo.png')" toolTip="显示隐藏基本信息"/>	
				<mx:Button id="mouseInfoBtn" x="121" y="12" width="32" height="32"
						   click="menuHandler(event)"
						   icon="@Embed(source='images/icons/mouseInfo.png')" toolTip="显示隐藏鼠标信息"/>
			</mx:HBox>
			<mx:VRule height="32"/>
			<mx:HBox width="73" height="32">
				<mx:Button width="32" height="32" click="hidenMennu(event)" icon="@Embed(source='images/icons/hide.png')" toolTip="收起/隐藏菜单栏"/>
				<mx:Button width="32" height="32" click="showCopyRight(event)" icon="@Embed(source='images/icons/copyright.png')" toolTip="版权信息"/>
				<!-- <mx:LinkButton click="clickToUrl('http://www.google.com/')" label="教程" toolTip="搜索教程" color="#FFFFFF" fontSize="13"/> -->
			</mx:HBox>
		</mx:HBox>
	</mx:Canvas>
	<mx:Canvas id="mapEditOutCanvas" y="40"  x="0" width="100%" height="100%" verticalScrollPolicy="off" >
		<mx:Canvas id="mapEditCanvas" y="0" width="100%" height="100%" verticalScrollPolicy="auto"/>
	</mx:Canvas>
</mx:WindowedApplication>
