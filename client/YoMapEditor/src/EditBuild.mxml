<?xml version="1.0" encoding="utf-8"?>
<InfoPanel xmlns="*" xmlns:mx="http://www.adobe.com/2006/mxml" width="638" height="570" creationComplete="creationComplete()" titleStyleName="panelTitle" title="地图信息">
	<mx:Script>
		<![CDATA[
			import com.heptafish.mapeditor.events.MapEditorEvent;
			import com.heptafish.mapeditor.events.MapEditorEventDispather;
			import com.heptafish.mapeditor.layers.GridLayer;
			import com.heptafish.mapeditor.layers.RoadPointLayer;
			import com.heptafish.mapeditor.manager.InputManager;
			import com.heptafish.mapeditor.utils.ImageLoader;
			import com.heptafish.mapeditor.utils.MapEditorConstant;
			import com.heptafish.mapeditor.utils.MapEditorUtils;
			
			import mx.controls.Button;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import spark.components.Image;
			
			private var _info:BuildingInfo;
			
			//网格层大小
			private var _mapWidth:int;
			private var _mapHeight:int;
			private var _gridLayer:GridLayer;	//网格层 
			private var _roadPointLayer:RoadPointLayer; //路点层
			
			private var _hinderArr:Array;	//boolean
			private var _walkableImgArray:Array = [];	//bitmap
			
			private var _brushBitmap:Bitmap;	//跟随光标用的
			private var _brushData:BitmapData;	
						
			private var _container:UIComponent;//基本UIComponent，为了后面可以直接add as3对象
				
			private var _imgLoader:ImageLoader;	//显示图片的
			private var _img:Bitmap;
			private var _imgContainer:UIComponent;
			
			private var _gridWidth:Number;
			private var _gridHeight:Number;
			
			private var _line:UIComponent;//对齐基准线
			
			private var _zeroPoint:Point = new Point();
			
			private function creationComplete():void
			{
				init();
				update();
			}
			
			private function init():void
			{   
				_container = new UIComponent();
				this.workCanvas.addChild(_container);
				
				_gridLayer = new GridLayer();
				_container.addChild(_gridLayer);
				
				_roadPointLayer = new RoadPointLayer();
				_container.addChild(_roadPointLayer);
				
				//笔刷
				_brushBitmap = new Bitmap();
				_container.addChild(_brushBitmap);
				
				//载入图片
				_imgLoader = new ImageLoader();
				_imgLoader.addEventListener(Event.COMPLETE, __imgLoadComplete);
				
				_line = new UIComponent();
				_container.addChild(_line);
				
				_imgContainer = new UIComponent();
				_img = new Bitmap();
				_imgContainer.addChild(_img);
				_container.addChild(_imgContainer);
				
				this.setWalkableBtn.setFocus();
				
				initEvent();
			}
			
			/**
			 * 图像载入并刷新显示后调用
			 */
			private function __imgLoadComplete(event:Event):void
			{    
				_img.bitmapData = event.target.data;
				
				_imgContainer.width = _img.width;
				_imgContainer.height = _img.height;
				
				//网格层大小
				_mapWidth = _imgContainer.width + _info.cellWidth * 2.75;
				_mapHeight = _imgContainer.height + _info.cellHeight * 2.5;
				
				_container.width = _mapWidth;
				_container.height = _mapHeight;
				
				_gridWidth = (_imgContainer.width <= workCanvas.width) ? workCanvas.width : _mapWidth;
				_gridHeight = (_imgContainer.height <= workCanvas.height) ? workCanvas.height : _mapHeight;
				
				_gridLayer.drawGrid(_gridWidth, _gridHeight, _info.cellWidth, _info.cellHeight);
				
				_roadPointLayer.clear();
				_roadPointLayer.cellWidth = _info.cellWidth;
				_roadPointLayer.cellHeight = _info.cellHeight;
				_roadPointLayer.cellMark = RoadPointLayer.MARK_LINE_DIAMOND;
				
				var col:int = _gridWidth / _info.cellWidth;
				var row:int = _gridHeight / _info.cellHeight;
				_zeroPoint.x = col * _info.cellWidth / 2;
				_zeroPoint.y = row * _info.cellHeight / 2;
				
				//绘制元件预览基准线
				_line.graphics.clear();
				_line.graphics.lineStyle(0, 0xFF0000);
				_line.graphics.moveTo(0, _zeroPoint.y);
				_line.graphics.lineTo(_zeroPoint.x * 2 + _info.cellWidth / 2, _zeroPoint.y);
				_line.graphics.moveTo(_zeroPoint.x, 0);
				_line.graphics.lineTo(_zeroPoint.x, _zeroPoint.y * 2 + _info.cellHeight / 2);
				_line.mouseEnabled = false;
				
				//默认将图片放在原点
				_imgContainer.x = _zeroPoint.x - _imgContainer.width / 2;
				_imgContainer.y = _zeroPoint.y - _imgContainer.height;
				
				//初始化数组
				var len:int = _mapWidth * _mapHeight;
				_hinderArr = [];
				for (var i:int = 0; i < len; i++)
				{
					_hinderArr[i] = false;
				}
				
				restoreSaveData();
			}
			
			/**
			 * 取出并设置以前保存的设置
			 */
			protected function restoreSaveData():void
			{ 
				//取出以前编辑的数据 
				var hinder:Array = _info.hinder.split(",");
				var walkableBrushData:BitmapData = MapEditorUtils.getWalkableSignMap(_info.cellWidth, _info.cellHeight);

				var ipos:int = 0;
				var pt:Point;
				//阻挡信息
				for (var m:int = 0; m < hinder.length && hinder.length > 1; m += 2)
				{
					//根据网格中心的像素坐标取出网格坐标
					pt = MapEditorUtils.getCellPoint(_info.cellWidth, _info.cellHeight, int(hinder[m]), int(hinder[m + 1]));
					ipos = pt.y * _mapWidth + pt.x;
					_hinderArr[ipos] = true;
					
					_roadPointLayer.drawCell(pt.x, pt.y, MapEditorConstant.CELL_TYPE_HINDER);
					
				}
			}

			/**
			 * w,a,s,d移动图片
			 */
			private function __keyDown(event:KeyboardEvent):void
			{
				switch (event.keyCode)
				{
					case Keyboard.A:
						if(_imgContainer.x > (_info.cellWidth / 2))
						{
							_imgContainer.x -= 1;
						}
						break;
					case Keyboard.W:
						if(_imgContainer.y > (_info.cellHeight / 2))
						{
							_imgContainer.y -= 1;
						}
						break;
					case Keyboard.D:
						if(_imgContainer.x < (_gridWidth - _imgContainer.width - _info.cellWidth / 2))
						{
							_imgContainer.x += 1;
						}
						break;
					case Keyboard.S:
						if(_imgContainer.y < (_gridHeight -_imgContainer.height - _info.cellHeight / 2))
						{
							_imgContainer.y += 1;
						}
						break;
				}
			}

			/**
			 * 设置阻挡和阴影
			 */
			private function __setWalkableBtnClick(event:Event):void
			{
				var btn:Button = Button(event.target);
				if(btn.selected == true)
				{
					_img.alpha = 0.5;
					if(btn.id == "setWalkableBtn")
					{
	             		//this.cursorManager.setCursor(cursorRoadHinder);
	             		_brushData = MapEditorUtils.getWalkableSignMap(_info.cellWidth, _info.cellHeight);
						_brushBitmap.bitmapData = _brushData;
					}
					this.workCanvas.addEventListener(MouseEvent.MOUSE_MOVE, __mouseMove);
					this.workCanvas.addEventListener(MouseEvent.CLICK, __mouseClick);
					this.workCanvas.addEventListener(MouseEvent.RIGHT_CLICK, __rightClick);
				}else{
					_img.alpha = 1;
					_brushBitmap.bitmapData = null;
					this.workCanvas.removeEventListener(MouseEvent.MOUSE_MOVE, __mouseMove);
					this.workCanvas.removeEventListener(MouseEvent.CLICK, __mouseClick);
					this.workCanvas.removeEventListener(MouseEvent.RIGHT_CLICK, __rightClick);
				}
			}
			
			/**
			 * 鼠标移动
			 */
			private function __mouseMove(event:MouseEvent):void
			{
				var pt:Point = MapEditorUtils.getCellPoint(_info.cellWidth, _info.cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);
				var px:int = pt.x * _info.cellWidth + (pt.y & 1) * _info.cellWidth / 2;
				var py:int = pt.y * _info.cellHeight / 2;
				_brushBitmap.x = px;
				_brushBitmap.y = py;
			}
			
			/**
			 * 鼠标点击
			 */
			private function __mouseClick(event:MouseEvent):void
			{
				var pt:Point = MapEditorUtils.getCellPoint(_info.cellWidth, _info.cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);
				
				var iposition:int = pt.y * _mapWidth + pt.x;
				var bm:Bitmap;
				if (this.setWalkableBtn.selected == true)
				{
					if (_hinderArr[iposition] == false)
					{
						_roadPointLayer.drawCell(pt.x, pt.y, MapEditorConstant.CELL_TYPE_HINDER);
				
						_hinderArr[iposition] = true;
						_walkableImgArray[iposition] = bm;
					}
				} 
			}

			/**
			 * 鼠标右键点击
			 */
			private function __rightClick(event:MouseEvent):void
			{
				var pt:Point = MapEditorUtils.getCellPoint(_info.cellWidth, _info.cellHeight, _gridLayer.mouseX, _gridLayer.mouseY);
				var px:int = pt.x * _info.cellWidth + (pt.y & 1) * _info.cellWidth / 2;
				var py:int = pt.y * _info.cellHeight / 2;
				
				var iposition:int = pt.y * _mapWidth + pt.x;
				
				if (this.setWalkableBtn.selected == true)
				{
					if (_hinderArr[iposition] == true)
					{
						_hinderArr[iposition] = false;
						_roadPointLayer.resetCell(pt.x, pt.y);
					}
				} 
			}
			
			/**
			 * 显示/隐藏 网格
			 */
			private function __showGridBtnClick():void
			{
				_gridLayer.visible = !_gridLayer.visible;
			}
			
			/**
			 * 保存
			 */
			private function saveBtnClick():void
			{
				//阻挡和阴影信息字符串, 偶数索引为x, 奇数索引为y
				var pt:Point;
				var hinderArr:Array = [];
				for (var i:int = 0; i < _mapHeight; i++)
				{
					for (var j:int = 0; j < _mapWidth; j++)
					{
						//网格中心的像素坐标 
						pt = MapEditorUtils.getPixelPoint(_info.cellWidth, _info.cellHeight, j, i);
						
						if (_hinderArr[i * _mapWidth + j] == true)
						{
							hinderArr.push(pt.x + "," + pt.y);
						}
					}
				}
				
				_info.hinder = hinderArr.toString();
				_info.type = "building";
				_info.originX = _zeroPoint.x - _imgContainer.x;
				_info.originY = _zeroPoint.y - _imgContainer.y;

				MapEditorEventDispather.dispatchEvent(MapEditorEvent.EDIT_BUILD_SUBMIT, _info);
				
				this.cursorManager.removeAllCursors();
				this.closeWindow();
			}

			
			/**
			 * 得到阻挡和阴影笔刷图片
			 */
			private function getSignData(tx:int, ty:int, bd:BitmapData):Bitmap
			{
				var px:int = tx * _info.cellWidth + (ty & 1) * _info.cellWidth / 2;
				var py:int = ty * _info.cellHeight / 2;
				
				var bm:Bitmap = new Bitmap(bd);
				bm.x = px;
				bm.y = py;
				return bm;
			}
			
			/**
			 * 关闭 窗口
			 */
			private function closeWindow():void
			{
				this.cursorManager.removeAllCursors();
				this.visible = false;
			}

			public function get info():BuildingInfo
			{
				return _info;
			}

			public function set info(value:BuildingInfo):void
			{
				_info = value;
				update();
			}
			
			public function update():void
			{
				if(_info)
				{
					_imgLoader.load(_info.path);
					this.title = "编辑建筑 -- " + _info.name;
				}
				else
				{
				}
			}
			
			private function initEvent():void
			{
				stage.addEventListener(KeyboardEvent.KEY_DOWN, __keyDown);
				stage.addEventListener(MouseEvent.MOUSE_UP, __mouseUp);
				
				_imgContainer.addEventListener(MouseEvent.MOUSE_DOWN, __mouseDown);
			}
			
			protected function __mouseDown(e:MouseEvent):void
			{
				if(!setWalkableBtn.selected)
				{
					_img.alpha = 0.5;
					_imgContainer.startDrag();
				}
			}
			
			protected function __mouseUp(e:MouseEvent):void
			{
				_imgContainer.stopDrag();
				if(_info)
				{
					_img.alpha = 1;
					_info.originX = _zeroPoint.x - _imgContainer.x;
					_info.originY = _zeroPoint.y - _imgContainer.y;
				}
			}
		]]>
	</mx:Script>
	<mx:Label x="10" y="20" text="w,a,s,d控制图片微调  设置障碍时，单击鼠标左键，设置障碍点，单击鼠标右键，取消障碍点" width="550" color="#EC0627"/>
	<mx:Canvas id="workCanvas" backgroundColor="#ffffff" backgroundAlpha="0.1" left="10" top="52" right="100" bottom="14" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" width="550" height="500" enabled="true"/>
	<mx:Button x="534" y="393" label="取 消" click="closeWindow();" fontWeight="normal" fontSize="12" width="75"/>
	<mx:Button click="{saveBtnClick();}" x="534" y="345" label="保 存" fontSize="12" fontWeight="normal" width="75"/>
	<mx:Button id="setWalkableBtn" click="__setWalkableBtnClick(event)" x="534" y="93" label="设置障碍" fontSize="12" fontWeight="normal" toggle="true" toolTip="左键设置，右键清除"/>
	<mx:Button id="showGridBtn" click="__showGridBtnClick();" x="534" y="139" label="显示网格" fontWeight="normal" fontSize="12" toolTip="显示隐藏网格层"/>
</InfoPanel>
