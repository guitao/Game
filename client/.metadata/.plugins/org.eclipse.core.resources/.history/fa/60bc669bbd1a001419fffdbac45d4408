package stock.com.ui.elements.xpainting
{
    import assets.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import stock.com.ui.elements.config.*;
    import stock.com.ui.elements.xpainting.canvas.*;
    import stock.com.ui.elements.xpainting.panel.*;

    public class Xpainting extends Sprite
    {
        private var panel:XPaintingPanel;
        private var _switchBtn:BtnMcDrawTool;
        private var _paintingArea:Rectangle = null;
        private const _PANEL_Y_OFFSET:uint = 99;
        private var _sensor:Sprite = null;
        private var _config:XpaintingConfig;
        private var _mainCfg:Config;
        private var _canvas:XPaintingCanvas;
        private var _stage:Stage = null;
        public static const CNASTOCK:String = "CNAStock";
        public static const HKSTOCK:String = "HKStock";
        public static const USSTOCK:String = "USSTOCK";
        public static var area:String = "";

        public function Xpainting(param1:Sprite, param2:Rectangle, param3:IConfig, param4:String)
        {
            this._switchBtn = new BtnMcDrawTool();
            this._mainCfg = Config.getInstance();
            this._sensor = param1;
            this._paintingArea = param2;
            area = param4;
            this._config = param3.generate(XpaintingConfig) as XpaintingConfig;
            if (this._sensor.stage)
            {
                this.init();
            }
            else
            {
                this._sensor.addEventListener(Event.ADDED_TO_STAGE, this.init);
            }
            return;
        }// end function

        private function init(event:Event = null) : void
        {
            this._sensor.removeEventListener(Event.ADDED_TO_STAGE, this.init);
            this._stage = this._sensor.stage;
            this._switchBtn.x = this._config.XpaintingSwitchButtonXPos;
            this._switchBtn.y = this._config.XpaintingSwitchButtonYPos;
            this.panel = new XPaintingPanel(this);
            this.panel.x = this._switchBtn.x - this.panel.width - 9;
            this.panel.y = this._switchBtn.y - this._PANEL_Y_OFFSET;
            this._canvas = new XPaintingCanvas(this._sensor, this._stage, this._paintingArea, this.panel);
            this._canvas.x = this._paintingArea.x;
            this._canvas.y = this._paintingArea.y;
            addChild(this._canvas);
            addChild(this._switchBtn);
            this._switchBtn.addEventListener(MouseEvent.CLICK, this.onSwitchBtnClick);
            this.panel.addEventListener(MouseEvent.CLICK, this.onPanelClick);
            this.panel.closeBtn.addEventListener(MouseEvent.CLICK, this.onPanelCloseButtonClick);
            this._stage.addEventListener(MouseEvent.CLICK, this.onStageClick, false, 0, true);
            this.panel.window.buttonMode = true;
            this.panel.window.addEventListener(MouseEvent.MOUSE_DOWN, this.onPanelWindowDown);
            return;
        }// end function

        private function onSwitchBtnClick(event:MouseEvent) : void
        {
            if (this.panel)
            {
                if (this.panel.parent)
                {
                    this.panel.removeFromStage();
                    this._mainCfg.isDrawing = false;
                }
                else
                {
                    this.panel.addToStage();
                    this._mainCfg.isDrawing = true;
                    this._mainCfg.sendStatistic("draw.html");
                }
            }
            event.stopPropagation();
            return;
        }// end function

        private function onPanelCloseButtonClick(event:MouseEvent) : void
        {
            this.panel.removeFromStage();
            event.stopPropagation();
            this._mainCfg.isDrawing = false;
            return;
        }// end function

        private function onStageClick(event:MouseEvent) : void
        {
            this._canvas.hideAllSmallSquare();
            return;
        }// end function

        private function onPanelClick(event:MouseEvent) : void
        {
            event.stopPropagation();
            return;
        }// end function

        private function onPanelWindowUp(event:MouseEvent) : void
        {
            this.panel.stopDrag();
            this.panel.window.removeEventListener(MouseEvent.MOUSE_UP, this.onPanelWindowUp);
            return;
        }// end function

        public function resize(param1:Rectangle, param2:IConfig) : void
        {
            this._paintingArea = param1;
            this._config = param2.generate(XpaintingConfig) as XpaintingConfig;
            this._switchBtn.x = this._config.XpaintingSwitchButtonXPos;
            this._switchBtn.y = this._config.XpaintingSwitchButtonYPos;
            this.panel.x = this._switchBtn.x - this.panel.width - 9;
            this.panel.y = this._switchBtn.y - this._PANEL_Y_OFFSET;
            if (this._canvas && contains(this._canvas))
            {
                removeChild(this._canvas);
            }
            this._canvas = new XPaintingCanvas(this._sensor, this._stage, this._paintingArea, this.panel);
            this._canvas.x = this._paintingArea.x;
            this._canvas.y = this._paintingArea.y;
            addChild(this._canvas);
            return;
        }// end function

        private function onPanelWindowDown(event:MouseEvent) : void
        {
            this.panel.startDrag();
            this.panel.window.addEventListener(MouseEvent.MOUSE_UP, this.onPanelWindowUp);
            return;
        }// end function

    }
}
