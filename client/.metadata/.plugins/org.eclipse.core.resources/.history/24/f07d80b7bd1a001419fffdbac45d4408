package com.sina.finance.data
{
    import com.evts.*;
    import flash.events.*;
    import flash.external.*;
    import flash.net.*;
    import flash.utils.*;
    import hsuan.*;
    import mx.utils.*;

    public class DataMgr extends EventDispatcher
    {
        private var _reinited:Boolean = false;
        private const _TIMEOUT:uint = 30000;
        private var _isNoHq:Boolean = false;
        public var newStockHandler:Function;
        private var _retryTime:uint = 0;
        private var _tSpeedId:uint;
        public var tdata:TData;
        private var _isHqLoading:Boolean = false;
        public var iHQ:IHQ;
        public var initCompleted:Boolean = false;
        public var overTArr:Array;
        private var _rsRetryCount:uint = 0;
        private var _callBackFun:Function;
        private var _kSpeedId:uint;
        private var _reCallBack:Function;
        private var _overTReCount:int = 3;
        public var cdataPercents:Array;
        private var _minKRetryCount:uint = 0;
        private var _isOverTLoading:Boolean = false;
        public var cdatas:Array;
        private var _requesting:Boolean;
        public var isShowingFloatT:Boolean = false;
        public var kdata:KData;
        private var _cfg:Config;
        private var _onTReady:Boolean = false;
        private var _ytSpeedId:uint;
        private var _symbol:String = "sh000001";
        private var _id:uint;
        private var _restoreMark:int = 1;
        private var _isCompareLoading:Boolean = false;
        private var _dataTool:DataTool;
        private var _isLoadingRe:Boolean = false;
        private var _selfHqLoader:URLLoader;
        private var _timeCount:int;
        private var _inited:Boolean = false;
        private var _index:uint = 0;
        private var _overHqSymbol:String;
        private var _kReRetryCount:uint = 0;
        private const _NOTICE_SEC:uint = 10;
        private var _everyTErrFunc:Function;

        public function DataMgr() : void
        {
            this._cfg = Config.getInstance();
            this._dataTool = DataTool.getInstance();
            this.overTArr = [];
            this.tdata = new TData();
            this.cdatas = [this.tdata];
            this._selfHqLoader = new URLLoader();
            this._selfHqLoader.addEventListener(Event.COMPLETE, this.onHqStrLoaded);
            this._selfHqLoader.addEventListener(IOErrorEvent.IO_ERROR, function (event:IOErrorEvent) : void
            {
                _isHqLoading = false;
                return;
            }
            );
            return;
        }

        public function addExternalInterface() : void
        {
            try
            {
                ExternalInterface.addCallback("addCompareData", this.addCompareData);
                ExternalInterface.addCallback("callIndicator", this.callIndicator);
                ExternalInterface.addCallback("newStock", this.newStock);
            }
            catch (err:Error)
            {
            }
            return;
        }

        private function dispatchInitEvent() : void
        {
            if (this._onTReady)
            {
                this._getSpeedLv("yt");
                this.initCompleted = true;
                dispatchEvent(new Event(Event.INIT));
                this._resetSpeedTimer("k");
                this.loadDayK();
            }
            else
            {
                this._getSpeedLv("t");
                this._resetSpeedTimer("yt");
                this._onTReady = true;
                dispatchEvent(new Event(Event.INIT));
            }
            return;
        }

        private function createBlackKData() : void
        {
            this._cfg.stockType = "n";
            if (!this.kdata)
            {
                this.kdata = new KData(this.tdata.hq);
            }
            this.kdata.initKData([], this.tdata.hq.prevclose);
            if (this._cfg.stockType != "i")
            {
                this.kdata.gotRs(this.iHQ.capital, []);
            }
            var _loc_1:* = this.kdata.datas_day.length;
            if (_loc_1 > 747)
            {
                _loc_1 = _loc_1 - 747;
            }
            else
            {
                _loc_1 = 0;
            }
            this.tdata.addCloseLineVolumeData(this.kdata.datas_day.slice(_loc_1));
            this.initCompleted = true;
            dispatchEvent(new Event(Event.INIT));
            dispatchEvent(new DataMgrEvent(DataMgrEvent.DAYKED));
            return;
        }

        private function updateData(param1:Array) : void
        {
            var _loc_2:uint = 0;
            var _loc_3:uint = 0;
            var _loc_4:uint = 0;
            var _loc_5:Array = null;
            var _loc_6:TDataBase = null;
            var _loc_7:uint = 0;
            if (!param1 || !this.tdata || !this.tdata.hq || !this.tdata.inited)
            {
                return;
            }
            _loc_2 = 0;
            _loc_3 = param1.length;
            while (_loc_2 < _loc_3)
            {
                
                if (param1[_loc_2][0] == this._symbol)
                {
                    this.tdata.hq.update(param1[_loc_2][1]);
                    param1.splice(_loc_2, 1);
                    break;
                }
                _loc_2 = _loc_2 + 1;
            }
            if (this.tdata.hq.isDateChange)
            {
                _loc_4 = this.cdatas.length;
                _loc_2 = 1;
                while (_loc_2 < _loc_4)
                {
                    
                    this.deleteCompare(TDataBase(this.cdatas[_loc_2]).hq.symbol);
                    _loc_2 = _loc_2 + 1;
                }
                this._deleteOverTs();
                this.tdata.killNine();
                if (this.kdata)
                {
                    this.kdata.killNine();
                }
                dispatchEvent(new DataMgrEvent(DataMgrEvent.NEWDATE));
                return;
            }
            else
            {
                if (this.tdata.hq.time == "09:30" && !this._reinited && this.tdata.inited)
                {
                    this.tdata.hq.inited = false;
                    setTimeout(this.tdata.reloadOneData, uint(20000 + Math.random() * 60000));
                    this._reinited = true;
                    this._index = this.tdata.hq.index;
                    return;
                }
                if (this._index != 0 && this.tdata.hq.index - this._index > 3)
                {
                    this.tdata.hq.inited = false;
                    this.tdata.reloadOneData();
                    this._index = this.tdata.hq.index;
                    return;
                }
                this._index = this.tdata.hq.index;
            }
            if (this.tdata.hq.needUpdate)
            {
                this.tdata.update();
                _loc_5 = this.cdatas.concat(this.overTArr);
                _loc_7 = 0;
                while (_loc_7 < param1.length)
                {
                    
                    _loc_2 = 1;
                    _loc_3 = _loc_5.length;
                    while (_loc_2 < _loc_3)
                    {
                        
                        _loc_6 = TDataBase(_loc_5[_loc_2]);
                        if (param1[_loc_7][0] == _loc_6.hq.symbol)
                        {
                            _loc_5.splice(_loc_2, 1);
                            if (!_loc_6.inited)
                            {
                                break;
                            }
                            _loc_6.hq.update(param1[_loc_7][1]);
                            _loc_6.update();
                            break;
                        }
                        _loc_2 = _loc_2 + 1;
                    }
                    _loc_7 = _loc_7 + 1;
                }
                dispatchEvent(new DataMgrEvent(DataMgrEvent.UPDATE));
            }
            return;
        }

        private function _onFloatHqLoaded(event:Event) : void
        {
            event.target.removeEventListener(Event.COMPLETE, this._onFloatHqLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onHqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onHqErr);
            var _loc_2:* = new ByteArray();
            _loc_2.writeBytes(event.target.data);
            _loc_2.position = 0;
            var _loc_3:* = _loc_2.readMultiByte(_loc_2.length, "gbk");
            var _loc_4:* = _loc_3.split(";");
            var _loc_5:* = new IHQ(_loc_4[0].split("\"")[1]);
            var _loc_6:* = _loc_4[1].split("\"")[1];
            var _loc_7:* = new OverTData();
            new OverTData().dates = this.tdata.dates;
            _loc_7.initCallBackFun = this._dispatchOverTEvt;
            _loc_7.initData(this._overHqSymbol, _loc_6, _loc_5.lastfive);
            this.overTArr[this.overTArr.length] = _loc_7;
            this._isOverTLoading = false;
            return;
        }

        private function failToAddCompare(param1:Boolean = false) : void
        {
            this._isCompareLoading = false;
            var _loc_2:* = new DataMgrEvent(DataMgrEvent.ERR_LOADING);
            _loc_2.errTxt = param1 ? (DataMgrEvent.COMPARE_NOT_EXIST) : (DataMgrEvent.COMPARE_ERR);
            dispatchEvent(_loc_2);
            return;
        }

        private function loadHqStr() : void
        {
            setTimeout(arguments.callee, this._cfg.refreshRate);
            if (this._isHqLoading)
            {
                return;
            }
            this._isHqLoading = true;
            arguments = this._symbol;
            var _loc_3:* = arguments;
            var _loc_4:* = this.cdatas.concat(this.overTArr);
            var _loc_5:uint = 1;
            var _loc_6:* = _loc_4.length;
            while (_loc_5 < _loc_6)
            {
                
                _loc_3 = _loc_3 + ("," + _loc_4[_loc_5].hq.symbol);
                _loc_5 = _loc_5 + 1;
            }
            var _loc_7:* = this._cfg.HQ_URL_PREFIX + "&list=" + _loc_3;
            this._selfHqLoader.load(new URLRequest(_loc_7));
            return;
        }

        private function _finalWarning(param1:String) : void
        {
            this._cfg.sendStatistic("flasherr.html?type=" + param1 + "&time=out");
            return;
        }

        private function onHqStrLoaded(event:Event) : void
        {
            var _loc_5:String = null;
            var _loc_6:Array = null;
            var _loc_9:String = null;
            var _loc_10:String = null;
            var _loc_11:uint = 0;
            var _loc_12:String = null;
            this._isHqLoading = false;
            var _loc_2:* = event.target.data;
            var _loc_3:* = _loc_2.split("\";");
            if (!_loc_3 || _loc_3.length < 2)
            {
                return;
            }
            var _loc_4:Array = [];
            var _loc_7:uint = 0;
            var _loc_8:* = _loc_3.length;
            while (_loc_7 < _loc_8)
            {
                
                _loc_5 = _loc_3[_loc_7];
                _loc_6 = _loc_5.split("\"");
                if (!_loc_6 || _loc_6.length < 2 || _loc_6[1].length < 9)
                {
                }
                else
                {
                    _loc_9 = _loc_6[0];
                    _loc_10 = _loc_6[1];
                    _loc_11 = _loc_9.indexOf("hq_str_");
                    var _loc_13:* = _loc_9.substring(_loc_11 + 7, (_loc_9.length - 1));
                    _loc_12 = _loc_9.substring(_loc_11 + 7, (_loc_9.length - 1));
                    var _loc_13:* = [_loc_12, _loc_10];
                    _loc_4[_loc_4.length] = [_loc_12, _loc_10];
                }
                _loc_7 = _loc_7 + 1;
            }
            if (_loc_4.length == 0)
            {
                return;
            }
            this.updateData(_loc_4);
            return;
        }

        private function _minKErr(event:ErrorEvent) : void
        {
            var _loc_2:* = URLLoaderWithReq(event.target);
            _loc_2.removeEventListener(Event.COMPLETE, this._onMinKLoaded);
            _loc_2.removeEventListener(IOErrorEvent.IO_ERROR, this._minKErr);
            _loc_2.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._minKErr);
            this._requesting = false;
            var _loc_3:String = this;
            _loc_3._minKRetryCount = this._minKRetryCount + 1;
            if (++this._minKRetryCount > 3)
            {
                this._minKRetryCount = 0;
            }
            else
            {
                this._dataTool.loadDataFromUrl(_loc_2.urlRequest.url + ("&r=" + Math.random()), this._onMinKLoaded, null, this._minKErr, this._minKErr, true);
            }
            this._cfg.sendStatistic("flasherr.html?type=errmink");
            return;
        }

        private function loadDayK(param1:Boolean = false) : void
        {
            var _loc_2:* = this._cfg.FINANCE_URL + this._symbol + "/hisdata/klc_kl.js";
            if (this._isNoHq)
            {
                this._dataTool.loadDataFromUrl(_loc_2 + (param1 ? ("?r=" + Math.random()) : ("")), this.onDayKDataLoaded, null, this.onKErr, this.onKErr);
            }
            else
            {
                this._dataTool.loadDataFromUrl(_loc_2 + "?day=" + this.tdata.hq.today + (param1 ? ("&r=" + Math.random()) : ("")), this.onDayKDataLoaded, null, this.onKErr, this.onKErr);
            }
            return;
        }

        public function newFloatT(param1:String) : void
        {
            this.isShowingFloatT = true;
            var _loc_2:uint = 0;
            var _loc_3:* = this.overTArr.length;
            while (_loc_2 < _loc_3)
            {
                
                if (param1 == OverTData(this.overTArr[_loc_2]).hq.symbol)
                {
                    this._dispatchOverTEvt();
                    return;
                }
                _loc_2 = _loc_2 + 1;
            }
            if (this._isOverTLoading)
            {
                return;
            }
            this._isOverTLoading = true;
            this._overHqSymbol = param1;
            this._loadFloatHqs();
            return;
        }

        private function _onRsLoaded(event:Event) : void
        {
            var dataArr:Array;
            var str:String;
            var e:* = event;
            e.target.removeEventListener(Event.COMPLETE, this._onRsLoaded);
            e.target.removeEventListener(IOErrorEvent.IO_ERROR, this._onRsErr);
            e.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._onRsErr);
            var ba:* = new ByteArray();
            ba.writeBytes(e.target.data);
            ba.position = 0;
            var ds:* = ba.readMultiByte(ba.length, "gbk");
            var jsonStr:* = this._dataTool.fixJsonStr(ds);
            try
            {
                dataArr = Json.decode(jsonStr);
            }
            catch (err:Error)
            {
                str;
                if (++_rsRetryCount < 3)
                {
                    _loadRs(true);
                    str;
                }
                return;
            }
            this.kdata.gotRs(this.iHQ.capital, dataArr);
            return;
        }

        public function loadRestoreKDatas(param1:uint, param2:int = 1, param3:Function = null) : void
        {
            if (this._isLoadingRe)
            {
                return;
            }
            this._isLoadingRe = true;
            this._restoreMark = param2;
            this._id = param1;
            this._reCallBack = param3;
            var _loc_4:* = param2 == 1 ? ("qian") : ("hou");
            var _loc_5:* = this._cfg.FINANCE_URL + this._symbol + "/" + _loc_4 + "fuquan.js";
            _loc_5 = this._cfg.FINANCE_URL + this._symbol + "/" + _loc_4 + "fuquan.js" + ("?d=" + this._dataTool.dateObj2dateStr(new Date()));
            this._dataTool.loadDataFromUrl(_loc_5, this.onKDataFactorLoaded, null, this.factorIoErr);
            return;
        }

        private function factorIoErr(event:IOErrorEvent) : void
        {
            var _loc_2:* = URLLoaderWithReq(event.target);
            _loc_2.removeEventListener(Event.COMPLETE, this.onKDataFactorLoaded);
            _loc_2.removeEventListener(IOErrorEvent.IO_ERROR, this.factorIoErr);
            this._isLoadingRe = false;
            var _loc_3:String = this;
            _loc_3._kReRetryCount = this._kReRetryCount + 1;
            if (++this._kReRetryCount > 3)
            {
                this._kReRetryCount = 0;
            }
            else
            {
                this._dataTool.loadDataFromUrl(_loc_2.urlRequest.url + ("&r=" + Math.random()), this.onKDataFactorLoaded, null, this.factorIoErr);
            }
            this._cfg.sendStatistic("flasherr.html?type=errkfactorio");
            return;
        }

        private function callIndicator(param1:String) : void
        {
            if (!this.initCompleted || param1 == null || param1 == "")
            {
                return;
            }
            var _loc_2:* = new DataMgrEvent(DataMgrEvent.INDICATOR);
            _loc_2.indicatorType = StringUtil.trim(param1);
            dispatchEvent(_loc_2);
            return;
        }

        private function newStock(param1:String) : void
        {
            if (param1)
            {
                this.newStockHandler(param1);
            }
            return;
        }

        private function addedComplete() : void
        {
            dispatchEvent(new Event(Event.ADDED));
            return;
        }

        public function get comparing() : Boolean
        {
            return this.cdatas.length > 1;
        }

        private function everyTioErr(event:IOErrorEvent) : void
        {
            event.target.removeEventListener(event.type, this.everyTioErr);
            this._everyTErrFunc("无此时间的历史数据");
            return;
        }

        public function loadEveryTData(param1:Date, param2:Function, param3:Function) : void
        {
            var tag:String;
            var last5Arr:Array;
            var date:* = param1;
            var cb:* = param2;
            var errFunc:* = param3;
            var hqDate:* = this.tdata.hq.date;
            if (date > hqDate)
            {
                this.errFunc("输入的日期超过最新交易日");
                return;
            }
            this._reCallBack = cb;
            this._everyTErrFunc = errFunc;
            var yStr:* = String(date.fullYear);
            var m:* = (date.month + 1);
            tag = "t" + yStr + "-" + m;
            var mStr:* = m < 10 ? ("0" + m) : (String(m));
            last5Arr = this._calcLast5(date);
            var url:* = this._cfg.FINANCE_URL + this._symbol + "/hisdata/" + yStr + "/" + mStr + ".js";
            if (date.fullYear == hqDate.fullYear && date.month >= hqDate.month)
            {
                url = url + ("?d=" + this.tdata.hq.today);
            }
            var urlLoader:* = new URLLoader();
            urlLoader.addEventListener(IOErrorEvent.IO_ERROR, this.everyTioErr);
            urlLoader.addEventListener(Event.COMPLETE, function (event:Event) : void
            {
                var _loc_7:Object = null;
                var _loc_8:Number = NaN;
                var _loc_9:Number = NaN;
                var _loc_13:uint = 0;
                var _loc_14:Date = null;
                var _loc_15:uint = 0;
                var _loc_16:uint = 0;
                var _loc_17:Number = NaN;
                var _loc_18:Date = null;
                event.target.removeEventListener(event.type, arguments.callee);
                event.target.removeEventListener(IOErrorEvent.IO_ERROR, everyTioErr);
                arguments = String(event.target.data);
                if (!arguments)
                {
                    return;
                }
                var _loc_4:* = arguments.split("\"");
                if (arguments.split("\"").length < 3)
                {
                    return;
                }
                var _loc_5:* = String(_loc_4[1]).split(",");
                var _loc_6:Array = [];
                var _loc_10:* = _loc_5.length;
                var _loc_11:* = _cfg.isBond ? (10) : (100);
                var _loc_12:uint = 0;
                while (_loc_12 < _loc_10)
                {
                    
                    _loc_6[_loc_12] = _dataTool.S_KLC_D(_loc_5[_loc_12]);
                    _loc_7 = _loc_6[_loc_12].shift();
                    _loc_6[_loc_12][0].prevclose = _loc_7.prevclose;
                    _loc_6[_loc_12][0].date = _loc_7.date;
                    _loc_6[_loc_12][0].lastfive = last5Arr[_loc_12];
                    _loc_8 = 0;
                    _loc_13 = 0;
                    while (_loc_13 < 242)
                    {
                        
                        var _loc_19:* = _loc_6[_loc_12][_loc_13].volume / _loc_11;
                        _loc_6[_loc_12][_loc_13].volume = _loc_6[_loc_12][_loc_13].volume / _loc_11;
                        _loc_9 = _loc_19;
                        _loc_8 = _loc_8 + _loc_9;
                        _loc_13 = _loc_13 + 1;
                    }
                    _loc_6[_loc_12][0].totalVolume = _loc_8;
                    _dataTool.setTimeLableForOneDay(_loc_6[_loc_12]);
                    _loc_12 = _loc_12 + 1;
                }
                if (_loc_6.length < 5)
                {
                    _loc_14 = _loc_6[(_loc_6.length - 1)][0].date;
                    _loc_10 = tdata.latest5.length;
                    _loc_15 = 0;
                    while (_loc_15 < _loc_10)
                    {
                        
                        if (_dataTool.isSameDay_date(_loc_14, tdata.latest5[_loc_15][0].date))
                        {
                            _loc_16 = _loc_15 + 1;
                            while (_loc_16 < _loc_10)
                            {
                                
                                _loc_6[_loc_6.length] = tdata.latest5[_loc_16];
                                _loc_16 = _loc_16 + 1;
                            }
                            break;
                        }
                        _loc_15 = _loc_15 + 1;
                    }
                }
                if (_loc_6.length < 5)
                {
                    _loc_17 = _loc_6[0][0].prevclose;
                    _loc_18 = _dataTool.cloneDate(_loc_6[0][0].date);
                    while (_loc_6.length < 5)
                    {
                        
                        _loc_6.unshift(_dataTool.getSpaceTDataByDay(1, _loc_17));
                        (_loc_18.date - 1);
                        _loc_6[0][0].date = _dataTool.cloneDate(_loc_18);
                        _loc_6[0][0].lastfive = 0;
                    }
                }
                tdata.everyT[tag] = _loc_6;
                makeNewT5Arr(date, _loc_6);
                _reCallBack();
                return;
            }
            );
            urlLoader.load(new URLRequest(url));
            return;
        }

        private function onKDataFactorLoaded(event:Event) : void
        {
            var reqLoader:URLLoaderWithReq;
            var dataArr:Array;
            var e:* = event;
            reqLoader = URLLoaderWithReq(e.target);
            reqLoader.removeEventListener(Event.COMPLETE, this.onKDataFactorLoaded);
            reqLoader.removeEventListener(IOErrorEvent.IO_ERROR, this.factorIoErr);
            this._isLoadingRe = false;
            var str:* = this._dataTool.fixJsonStr(String(e.target.data));
            try
            {
                dataArr = Json.decode(str);
            }
            catch (err:Error)
            {
                if (++_kReRetryCount > 3)
                {
                    _kReRetryCount = 0;
                }
                else
                {
                    _dataTool.loadDataFromUrl(reqLoader.urlRequest.url + ("&r=" + Math.random()), onKDataFactorLoaded, null, factorIoErr);
                }
                _cfg.sendStatistic("flasherr.html?type=errkfactorp");
                return;
            }
            this._kReRetryCount = 0;
            if (!dataArr || dataArr[0].total == 0)
            {
                this._cfg.stockType = "n";
                return;
            }
            var factorDate:* = this._dataTool.cloneDate(this.tdata.hq.date);
            var hqDay:* = "_" + this._dataTool.dateObj2dateStr(factorDate, "_");
            var isToday:Boolean;
            while (!dataArr[0].data[hqDay])
            {
                
                isToday;
                var _loc_3:* = factorDate;
                var _loc_4:* = factorDate.date - 1;
                _loc_3.date = _loc_4;
                hqDay = "_" + this._dataTool.dateObj2dateStr(factorDate, "_");
            }
            var factor:* = dataArr[0].data[hqDay];
            if (factor <= 0)
            {
                return;
            }
            if (this.kdata)
            {
                this.kdata.gotKFactor(factor, isToday, dataArr[0].data, this._restoreMark);
            }
            this._reCallBack();
            return;
        }

        private function _loadFloatHqs() : void
        {
            this._dataTool.loadDataFromUrl(this._cfg.HQ_URL_PREFIX + "&list=" + this._overHqSymbol + "_i," + this._overHqSymbol, this._onFloatHqLoaded, null, this.onHqErr, this.onHqErr, true);
            return;
        }

        private function onKErr(event:Event) : void
        {
            var _loc_2:String = null;
            event.target.removeEventListener(Event.COMPLETE, this.onDayKDataLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onKErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onKErr);
            if (this._cfg.stockType == "n")
            {
                this.createBlackKData();
            }
            else
            {
                if (this._isNoHq)
                {
                    dispatchEvent(new DataMgrEvent(DataMgrEvent.FATAL_ERR));
                    return;
                }
                var _loc_3:String = this;
                _loc_3._retryTime = this._retryTime + 1;
                if (this._retryTime++ < 3)
                {
                    this.loadDayK(true);
                    _loc_2 = "errdk";
                }
                else
                {
                    this.createBlackKData();
                    _loc_2 = "stopdk";
                }
                this._cfg.sendStatistic("flasherr.html?type=" + _loc_2);
            }
            return;
        }

        private function onCompareHqStrIoErr(event:IOErrorEvent) : void
        {
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onCompareHqStrIoErr);
            this.failToAddCompare();
            return;
        }

        private function loadCompareHq(param1:String) : void
        {
            var symbol:* = param1;
            this._isCompareLoading = true;
            var loader:* = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, this.onCompareHqStrIoErr);
            loader.addEventListener(Event.COMPLETE, function (event:Event) : void
            {
                event.target.removeEventListener(event.type, arguments.callee);
                event.target.removeEventListener(IOErrorEvent.IO_ERROR, onCompareHqStrIoErr);
                _isCompareLoading = false;
                arguments = event.target.data;
                var _loc_4:* = arguments.split("\"");
                if (!arguments.split("\"") || _loc_4[1].length < 1)
                {
                    failToAddCompare(true);
                    return;
                }
                var _loc_5:* = _loc_4[1];
                var _loc_6:* = new TDataBase();
                new TDataBase().dates = tdata.dates;
                _loc_6.dates_str = tdata.dates_str;
                _loc_6.initCallBackFun = addedComplete;
                _loc_6.initData(symbol, _loc_5, 0);
                cdatas.push(_loc_6);
                return;
            }
            );
            loader.load(new URLRequest(this._cfg.HQ_URL_PREFIX + "&list=" + symbol));
            return;
        }

        private function _calcLast5(param1:Date) : Array
        {
            var _loc_2:* = new Date(param1.fullYear, param1.month);
            var _loc_3:* = this._dataTool.cloneDate(_loc_2);
            (_loc_3.month + 1);
            var _loc_4:int = -1;
            var _loc_5:int = -1;
            var _loc_6:* = this.kdata.datas_day;
            var _loc_7:* = this.kdata.datas_day.length;
            var _loc_8:uint = 0;
            while (_loc_8 < _loc_7)
            {
                
                if (_loc_4 < 0 && _loc_6[_loc_8].date > _loc_2)
                {
                    _loc_4 = _loc_8;
                }
                else if (_loc_5 < 0 && _loc_6[_loc_8].date > _loc_3)
                {
                    _loc_5 = _loc_8;
                    break;
                }
                _loc_8 = _loc_8 + 1;
            }
            if (_loc_5 < 0)
            {
                _loc_5 = _loc_7;
            }
            var _loc_9:* = _loc_5 - _loc_4;
            _loc_4 = _loc_4 - 5 > 0 ? (_loc_4 - 5) : (0);
            var _loc_10:Array = [];
            var _loc_11:* = _loc_5 - _loc_4;
            var _loc_12:Number = 0;
            _loc_8 = 0;
            while (_loc_8 < _loc_11)
            {
                
                _loc_12 = _loc_12 + _loc_6[_loc_4].volume;
                if (_loc_8 >= 4)
                {
                    _loc_10[uint(_loc_8 - 4)] = _loc_12 / 1200;
                    _loc_12 = _loc_12 - _loc_6[uint(_loc_4 - 4)].volume;
                }
                _loc_4++;
                _loc_8 = _loc_8 + 1;
            }
            while (_loc_10.length < (_loc_9 + 1))
            {
                
                _loc_10.unshift(0);
            }
            return _loc_10;
        }

        private function _onRsErr(event:Event) : void
        {
            event.target.removeEventListener(Event.COMPLETE, this._onRsLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this._onRsErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._onRsErr);
            var _loc_2:String = "stoprs";
            var _loc_3:String = this;
            _loc_3._rsRetryCount = this._rsRetryCount + 1;
            if (this._rsRetryCount++ < 3)
            {
                this._loadRs(true);
                _loc_2 = "errrs";
            }
            this._cfg.sendStatistic("flasherr.html?type=" + _loc_2);
            return;
        }

        public function get symbol() : String
        {
            return this._symbol;
        }

        private function _getSpeedLv(param1:String) : void
        {
            clearTimeout(this["_" + param1 + "SpeedId"]);
            var _loc_2:* = getTimer() - this._timeCount;
            var _loc_3:* = Math.round(_loc_2 / 1000);
            if (_loc_3 > this._NOTICE_SEC)
            {
                this._cfg.sendStatistic("flasherr.html?type=" + param1 + "&time=" + _loc_3);
            }
            return;
        }

        private function tFaked() : void
        {
            dispatchEvent(new Event(Event.INIT));
            return;
        }

        private function onDayKDataLoaded(event:Event) : void
        {
            var _loc_6:Object = null;
            var _loc_7:String = null;
            var _loc_8:uint = 0;
            event.target.removeEventListener(Event.COMPLETE, this.onDayKDataLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onKErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onKErr);
            var _loc_2:* = String(event.target.data).split("\"");
            var _loc_3:* = this._dataTool.S_KLC_D(_loc_2[1]);
            if (this._isNoHq)
            {
                _loc_6 = _loc_3[(_loc_3.length - 1)];
                _loc_7 = ",0," + _loc_6.close + ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0," + this._dataTool.dateObj2dateStr(_loc_6.date) + ",15:00:00,03";
                this.tdata.initCallBackFun = this.tFaked;
                this.tdata.initData(this._symbol, _loc_7, this.iHQ.lastfive, true);
            }
            if (!this.kdata)
            {
                this.kdata = new KData(this.tdata.hq);
            }
            var _loc_4:* = _loc_3.length == 0 ? (this._isNoHq ? (this.iHQ.issuePrice) : (this.tdata.hq.prevclose)) : (_loc_3[0].open);
            this.kdata.initKData(_loc_3, _loc_4, this._isNoHq);
            var _loc_5:* = new DataMgrEvent(DataMgrEvent.DAYKED);
            if (this._isNoHq)
            {
                this.initCompleted = true;
                _loc_5.kParam = DataMgrEvent.NO_HQ;
            }
            else
            {
                _loc_8 = this.kdata.datas_day.length;
                if (_loc_8 > 747)
                {
                    _loc_8 = _loc_8 - 747;
                }
                else
                {
                    _loc_8 = 0;
                }
                this.tdata.addCloseLineVolumeData(this.kdata.datas_day.slice(_loc_8));
            }
            dispatchEvent(_loc_5);
            this._getSpeedLv("k");
            if (this._cfg.calcLastfive)
            {
                dispatchEvent(new Event(Event.INIT));
            }
            if (!isNaN(this.iHQ.issuePrice) && this.iHQ.issuePrice > 0)
            {
                this.kdata.prevclose = this.iHQ.issuePrice;
            }
            if (this._cfg.stockType != "i")
            {
                this._loadRs();
            }
            return;
        }

        public function makeNewT5Arr(param1:Date, param2:Array, param3:Boolean = true) : void
        {
            var _loc_6:int = 0;
            var _loc_7:uint = 0;
            var _loc_4:* = param2.length;
            var _loc_5:uint = 0;
            while (_loc_5 < _loc_4)
            {
                
                if (param2[_loc_5][0].date >= param1)
                {
                    break;
                }
                _loc_5 = _loc_5 + 1;
            }
            if (param3)
            {
                _loc_6 = _loc_5 - 2;
                this.tdata.tDataState["t5l"] = 2;
                this.tdata.tDataState["t5r"] = 3;
                if (_loc_6 < 0)
                {
                    _loc_6 = 0;
                    this.tdata.tDataState["t5l"] = _loc_5;
                    this.tdata.tDataState["t5r"] = _loc_5 + 1;
                }
            }
            else
            {
                _loc_6 = _loc_5;
                this.tdata.tDataState["t5l"] = 0;
                this.tdata.tDataState["t5r"] = 1;
            }
            _loc_7 = _loc_6 + 5;
            if (_loc_7 > _loc_4)
            {
                _loc_7 = _loc_4;
                _loc_6 = _loc_7 - 5;
                if (param3 && _loc_5 < (_loc_4 - 1))
                {
                    this.tdata.tDataState["t5l"] = _loc_4 - _loc_5 + 1;
                    this.tdata.tDataState["t5r"] = _loc_4 - _loc_5 + 2;
                }
                else
                {
                    this.tdata.tDataState["t5l"] = 4;
                    this.tdata.tDataState["t5r"] = 5;
                }
            }
            this.tdata.datas_5 = [];
            while (_loc_6 < _loc_7)
            {
                
                this.tdata.datas_5[this.tdata.datas_5.length] = param2[_loc_6];
                _loc_6++;
            }
            return;
        }

        private function _resetSpeedTimer(param1:String) : void
        {
            this._timeCount = getTimer();
            this["_" + param1 + "SpeedId"] = setTimeout(this._finalWarning, this._TIMEOUT, param1);
            return;
        }

        public function callMinK(param1:uint, param2:Function) : void
        {
            if (this._requesting)
            {
                return;
            }
            this._requesting = true;
            this._id = param1;
            this._callBackFun = param2;
            var _loc_3:* = this._cfg.JSON_URL_PREFIX + "CN_MarketData.getKLineData?symbol=" + this._symbol + "&scale=" + param1 + "&ma=no&datalen=1023";
            this._dataTool.loadDataFromUrl(_loc_3, this._onMinKLoaded, null, this._minKErr, this._minKErr, true);
            return;
        }

        private function _dispatchOverTEvt(param1:String = null) : void
        {
            var _loc_2:* = new DataMgrEvent(DataMgrEvent.FLOAT_T_LOADED);
            if (param1)
            {
                _loc_2.overprintBtnState = param1;
            }
            dispatchEvent(_loc_2);
            return;
        }

        public function deleteCompare(param1:String) : void
        {
            var symbol:* = param1;
            try
            {
                ExternalInterface.call("Conn.delSymbol", symbol);
            }
            catch (err:Error)
            {
            }
            return;
        }

        private function _onMinKLoaded(event:Event) : void
        {
            var reqLoader:URLLoaderWithReq;
            var datas:Array;
            var e:* = event;
            reqLoader = URLLoaderWithReq(e.target);
            reqLoader.removeEventListener(Event.COMPLETE, this._onMinKLoaded);
            reqLoader.removeEventListener(IOErrorEvent.IO_ERROR, this._minKErr);
            reqLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._minKErr);
            this._requesting = false;
            var ba:* = new ByteArray();
            ba.writeBytes(e.target.data);
            ba.position = 0;
            var str:* = ba.readMultiByte(ba.length, "gb2312");
            var jsonStr:* = this._dataTool.fixJsonStr(str);
            try
            {
                datas = Json.decode(jsonStr);
            }
            catch (err:Error)
            {
                if (++_minKRetryCount > 3)
                {
                    _minKRetryCount = 0;
                }
                else
                {
                    _dataTool.loadDataFromUrl(reqLoader.urlRequest.url + ("&r=" + Math.random()), _onMinKLoaded, null, _minKErr, _minKErr, true);
                }
                _cfg.sendStatistic("flasherr.html?type=errminkp");
                return;
            }
            this._minKRetryCount = 0;
            if (!this.kdata)
            {
                this.kdata = new KData(this.tdata.hq);
            }
            this.kdata.setMinKDataById(this._id, datas);
            this._callBackFun();
            return;
        }

        private function addCompareData(param1:String) : void
        {
            var _loc_4:DataMgrEvent = null;
            var _loc_5:DataMgrEvent = null;
            if (this._isNoHq)
            {
                return;
            }
            if (this._isCompareLoading)
            {
                return;
            }
            var _loc_2:* = this.cdatas.length;
            if (_loc_2 >= 5)
            {
                _loc_4 = new DataMgrEvent(DataMgrEvent.ERR_LOADING);
                _loc_4.errTxt = DataMgrEvent.COMPARE_NO_MORE_THAN_5;
                dispatchEvent(_loc_4);
                return;
            }
            param1 = StringUtil.trim(param1);
            var _loc_3:uint = 0;
            while (_loc_3 < _loc_2)
            {
                
                if (TDataBase(this.cdatas[_loc_3]).hq.symbol == param1)
                {
                    _loc_5 = new DataMgrEvent(DataMgrEvent.ERR_LOADING);
                    _loc_5.errTxt = DataMgrEvent.COMPARE_EXIST;
                    dispatchEvent(_loc_5);
                    return;
                }
                _loc_3 = _loc_3 + 1;
            }
            dispatchEvent(new DataMgrEvent(DataMgrEvent.LOADING));
            this.loadCompareHq(param1);
            this._cfg.sendStatistic("fenshi.html?type=compare");
            return;
        }

        public function initData(param1:String, param2:String, param3:String, param4:String) : void
        {
            this._symbol = param1;
            if (this._inited)
            {
                return;
            }
            this._inited = true;
            this.iHQ = new IHQ(param4);
            if (!param2 || param2.length < 31)
            {
                this._isNoHq = true;
                this._cfg.directToId = UrlHashDecoder.DAY_K_ID;
                this._resetSpeedTimer("k");
                this.loadDayK();
            }
            else
            {
                this._resetSpeedTimer("t");
                this.tdata.initCallBackFun = this.dispatchInitEvent;
                this.tdata.initData(param1, param2, this.iHQ.lastfive);
                this.tdata.dates = this._dataTool.getDatesFromHx(param3, this.tdata.hq.date);
            }
            return;
        }

        private function _deleteOverTs() : void
        {
            while (this.overTArr.length)
            {
                
                delete this[this.overTArr.pop()];
            }
            this.isShowingFloatT = false;
            this._dispatchOverTEvt("off");
            return;
        }

        private function _loadRs(param1:Boolean = false) : void
        {
            var _loc_2:* = this._cfg.RS_URL.replace("$r", param1 ? (Math.random()) : (this.tdata.hq.today)).replace("$symbol", this._symbol);
            this._dataTool.loadDataFromUrl(_loc_2, this._onRsLoaded, null, this._onRsErr, this._onRsErr, true);
            return;
        }

        public function selfRefresh() : void
        {
            if (this._isNoHq)
            {
                return;
            }
            this.loadHqStr();
            return;
        }

        private function onHqErr(event:Event) : void
        {
            event.target.removeEventListener(Event.COMPLETE, this._onFloatHqLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onHqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onHqErr);
            var _loc_2:String = this;
            _loc_2._overTReCount = this._overTReCount - 1;
            if (this._overTReCount-- > 0)
            {
                this._loadFloatHqs();
            }
            else
            {
                this._overTReCount = 3;
                this._isOverTLoading = false;
            }
            return;
        }

    }
}
