package com.sina.finance.ui
{

    public class IndicatorWVAD extends Indicator
    {
        private const CWVAD:uint = 255;
        private const EWVAD:uint = 24;
        private var _wvadmaLine:LineCurve;
        private var _min:Number;
        private const CWVADMA:uint = 16711935;
        private const EWVADMA:uint = 6;
        private var _wvadmas:Array;
        private var _max:Number;
        private var _wvads:Array;
        private var _wvadLine:LineCurve;

        public function IndicatorWVAD()
        {
            _color2 = this.CWVAD;
            _color3 = this.CWVADMA;
            this._wvadLine = new LineCurve(1, this.CWVAD, 1, false);
            this._wvadmaLine = new LineCurve(1, this.CWVADMA, 1, false);
            addChild(this._wvadLine);
            addChild(this._wvadmaLine);
            return;
        }// end function

        override public function draw(param1:uint = 24) : void
        {
            this._wvadLine.clear(true);
            this._wvadmaLine.clear(true);
            var _loc_2:* = _objs.length;
            var _loc_3:* = _cfg.KW / _loc_2;
            if (_loc_2 < _cfg.NK)
            {
                _loc_3 = _cfg.KW / _cfg.NK;
            }
            var _loc_4:* = _loc_3 / 2;
            var _loc_5:* = _cfg.hindicator * this._max / (this._max - this._min);
            var _loc_6:uint = 0;
            while (_loc_6 < _loc_2)
            {
                
                if (_loc_6 == 0)
                {
                    this._wvadLine.moveTo(_loc_4, _objs[_loc_6].wvady);
                    this._wvadmaLine.moveTo(_loc_4, _objs[_loc_6].wvadmay);
                }
                else
                {
                    this._wvadLine.lineTo(_loc_4, _objs[_loc_6].wvady);
                    this._wvadmaLine.lineTo(_loc_4, _objs[_loc_6].wvadmay);
                }
                _loc_4 = _loc_4 + _loc_3;
                _loc_6 = _loc_6 + 1;
            }
            return;
        }// end function

        override public function initDatasBySource(param1:Array) : void
        {
            destroyArray(this._wvads);
            destroyArray(this._wvadmas);
            destroyArray(_objs);
            this._wvads = [];
            this._wvadmas = [];
            _objs = [];
            var _loc_2:* = param1.length;
            var _loc_3:Number = 0;
            var _loc_4:Number = 0;
            var _loc_5:Number = 0;
            var _loc_6:Number = 0;
            var _loc_7:* = param1[0];
            if (param1[0].high == _loc_7.low)
            {
                _loc_3 = 0;
            }
            else
            {
                _loc_3 = (_loc_7.close - _loc_7.open) / (_loc_7.high - _loc_7.low) * _loc_7.volume;
            }
            var _loc_8:Array = [_loc_3];
            _loc_4 = _loc_4 + _loc_3;
            _loc_5 = _loc_3 / 10000;
            _loc_6 = _loc_6 + _loc_5;
            this._wvads.push(_loc_5);
            this._wvadmas.push(_loc_5);
            if (_loc_2 == 1)
            {
                return;
            }
            var _loc_9:uint = 1;
            while (_loc_9 < _loc_2)
            {
                
                _loc_7 = param1[_loc_9];
                if (_loc_7.high == _loc_7.low)
                {
                    _loc_3 = 0;
                }
                else
                {
                    _loc_3 = (_loc_7.close - _loc_7.open) / (_loc_7.high - _loc_7.low) * _loc_7.volume;
                }
                _loc_8.push(_loc_3);
                _loc_4 = _loc_4 + _loc_3;
                if (_loc_9 >= this.EWVAD)
                {
                    _loc_4 = _loc_4 - _loc_8[_loc_9 - this.EWVAD];
                    _loc_5 = _loc_4 / 10000;
                }
                else
                {
                    _loc_5 = _loc_4 / (_loc_9 + 1) / 10000;
                }
                this._wvads.push(_loc_5);
                _loc_6 = _loc_6 + _loc_5;
                if (_loc_9 >= this.EWVADMA)
                {
                    _loc_6 = _loc_6 - this._wvads[_loc_9 - this.EWVADMA];
                    this._wvadmas.push(_loc_6 / this.EWVADMA);
                }
                else
                {
                    this._wvadmas.push(_loc_6 / (_loc_9 + 1));
                }
                _loc_9 = _loc_9 + 1;
            }
            return;
        }// end function

        override public function setDefaultText() : void
        {
            var _loc_1:* = _objs.length - 1;
            setTitleText("", "WVAD: " + Number(_objs[_loc_1].wvad).toFixed(2), "WVADMA6: " + Number(_objs[_loc_1].wvadma).toFixed(2));
            return;
        }// end function

        override public function calcObjs(param1:uint, param2:uint) : void
        {
            var _loc_4:Number = NaN;
            var _loc_5:Number = NaN;
            var _loc_9:Object = null;
            var _loc_3:* = param2 - param1;
            while (_objs.length > _loc_3)
            {
                
                _objs.pop();
            }
            while (_objs.length < _loc_3)
            {
                
                _objs.push({});
            }
            this._max = -100000000;
            this._min = 100000000;
            var _loc_6:* = param1;
            while (_loc_6 < param2)
            {
                
                _loc_9 = _objs[_loc_6 - param1];
                _loc_9.wvad = this._wvads[_loc_6];
                _loc_9.wvadma = this._wvadmas[_loc_6];
                _loc_4 = Math.min(_loc_9.wvad, _loc_9.wvadma);
                _loc_5 = Math.max(_loc_9.wvad, _loc_9.wvadma);
                if (this._min > _loc_4)
                {
                    this._min = _loc_4;
                }
                if (this._max < _loc_5)
                {
                    this._max = _loc_5;
                }
                _loc_6 = _loc_6 + 1;
            }
            var _loc_7:* = this._max - this._min;
            var _loc_8:* = _cfg.hindicator - 10;
            _loc_6 = 0;
            while (_loc_6 < _loc_3)
            {
                
                _objs[_loc_6].wvady = _loc_8 * (this._max - _objs[_loc_6].wvad) / _loc_7;
                _objs[_loc_6].wvadmay = _loc_8 * (this._max - _objs[_loc_6].wvadma) / _loc_7;
                _loc_6 = _loc_6 + 1;
            }
            setLeftText(this._min, this._max, 3, 2);
            return;
        }// end function

        override public function interactiveEnd() : void
        {
            this._wvadLine.interactiveEnd();
            this._wvadmaLine.interactiveEnd();
            return;
        }// end function

        override public function interactiveTo(param1:uint) : void
        {
            this._wvadLine.interactiveTo(param1);
            this._wvadmaLine.interactiveTo(param1);
            if (param1 >= _objs.length)
            {
                param1 = _objs.length - 1;
            }
            setTitleText("", "WVAD: " + Number(_objs[param1].wvad).toFixed(2), "WVADMA6: " + Number(_objs[param1].wvadma).toFixed(2));
            return;
        }// end function

    }
}
