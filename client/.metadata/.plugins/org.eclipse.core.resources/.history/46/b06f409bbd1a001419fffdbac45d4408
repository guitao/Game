package com.sina.finance.ui
{
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;

    public class IndicatorSelection extends Sprite
    {
        private const _H:Number = 18;
        private var _clickedShape:Shape;
        private var _type:String;
        private var _cfg:Config;
        private var _clickingShape:Shape;
        private var _btnTf:TextFormat;
        private const _OVER_COLOR:uint = 13950191;
        private var _types:Array;
        private const _SEL_COLOR:uint = 11978723;

        public function IndicatorSelection()
        {
            this._cfg = Config.getInstance();
            this._btnTf = new TextFormat("arial", 12, this._cfg.LB_COLOR);
            this._types = [];
            this.init();
            this.refreshTable();
            return;
        }// end function

        public function get type() : String
        {
            return this._type;
        }// end function

        private function refreshTable() : void
        {
            var _loc_1:* = this._types.length;
            var _loc_2:* = _loc_1 * this._cfg.TECH_BTN_W;
            this.graphics.clear();
            this.graphics.lineStyle(1, this._cfg.clineDayEdge);
            this.graphics.beginFill(15725564);
            this.graphics.drawRect(-1, -1, (_loc_2 + 1), this._H + 2);
            this.graphics.endFill();
            this.graphics.lineStyle(1, 11320541);
            var _loc_3:uint = 1;
            while (_loc_3 < _loc_1)
            {
                
                this.graphics.moveTo(this._cfg.TECH_BTN_W * _loc_3, 0);
                this.graphics.lineTo(this._cfg.TECH_BTN_W * _loc_3, this._H);
                _loc_3 = _loc_3 + 1;
            }
            return;
        }// end function

        private function setState(param1:Shape, param2:Boolean = false) : void
        {
            param1.graphics.clear();
            param1.graphics.moveTo(0, 0);
            param1.graphics.beginFill(this._OVER_COLOR);
            param1.graphics.drawRect(0, 0, this._cfg.TECH_BTN_W, this._H);
            param1.graphics.endFill();
            return;
        }// end function

        private function addNewButton(param1:String, param2:Boolean = false) : void
        {
            var _loc_3:* = this._types.length;
            var _loc_4:* = this.getTextBytype(param1, param2);
            this.getTextBytype(param1, param2).x = (_loc_3 + 0.17) * this._cfg.TECH_BTN_W;
            this.addChild(_loc_4);
            this._types.push(param1);
            return;
        }// end function

        private function getTextBytype(param1:String, param2:Boolean = false) : TextField
        {
            var _loc_3:* = new TextField();
            _loc_3.autoSize = "left";
            _loc_3.defaultTextFormat = this._btnTf;
            _loc_3.text = param1;
            _loc_3.mouseEnabled = false;
            return _loc_3;
        }// end function

        private function getInteractiveShape(param1:uint) : Shape
        {
            var _loc_2:* = new Shape();
            this.drawInteractiveShap(_loc_2.graphics, param1);
            return _loc_2;
        }// end function

        private function onMsMove(event:MouseEvent) : void
        {
            if (!this.contains(this._clickingShape))
            {
                this.addChildAt(this._clickingShape, 0);
            }
            var _loc_2:* = Math.floor(this.mouseX / this._cfg.TECH_BTN_W);
            if (_loc_2 >= this._types.length)
            {
                _loc_2 = this._types.length - 1;
            }
            var _loc_3:* = _loc_2 * this._cfg.TECH_BTN_W;
            if (Math.abs(this._clickingShape.x - _loc_3) > 1)
            {
                this._clickingShape.x = _loc_3;
            }
            return;
        }// end function

        public function init() : void
        {
            this.addNewButton(TechChartMgr.MACD);
            this.addNewButton(TechChartMgr.KDJ);
            this.addNewButton(TechChartMgr.BOLL);
            this.addNewButton(TechChartMgr.PSY);
            this.addNewButton(TechChartMgr.OBV);
            this.addNewButton(TechChartMgr.RSI);
            this.addNewButton(TechChartMgr.WVAD);
            this.addNewButton(TechChartMgr.CCI);
            this._clickedShape = this.getInteractiveShape(this._SEL_COLOR);
            this._clickingShape = this.getInteractiveShape(this._OVER_COLOR);
            addChildAt(this._clickedShape, 0);
            addChildAt(this._clickingShape, 0);
            this.buttonMode = true;
            this.mouseChildren = false;
            this.addEventListener(MouseEvent.MOUSE_UP, this.onMsClick);
            this.addEventListener(MouseEvent.MOUSE_MOVE, this.onMsMove);
            this.addEventListener(MouseEvent.MOUSE_OUT, this.onMsOut);
            return;
        }// end function

        private function drawInteractiveShap(param1:Graphics, param2:uint) : void
        {
            param1.moveTo(0, 0);
            param1.beginFill(param2);
            param1.drawRect(0, 0, this._cfg.TECH_BTN_W, this._H);
            param1.endFill();
            return;
        }// end function

        private function onMsClick(event:MouseEvent) : void
        {
            this.setState(this._clickingShape, false);
            var _loc_2:* = Math.floor(this.mouseX / this._cfg.TECH_BTN_W);
            if (_loc_2 >= this._types.length)
            {
                return;
            }
            var _loc_3:* = _loc_2 * this._cfg.TECH_BTN_W;
            if (this._clickedShape.x != _loc_3)
            {
                this._clickedShape.x = _loc_3;
            }
            else
            {
                return;
            }
            this._type = this._types[_loc_2];
            dispatchEvent(new Event(Event.SELECT));
            return;
        }// end function

        private function onMsOut(event:MouseEvent) : void
        {
            if (this.contains(this._clickingShape))
            {
                this.removeChild(this._clickingShape);
            }
            this.setState(this._clickingShape, false);
            return;
        }// end function

        public function set type(param1:String) : void
        {
            var _loc_2:* = this._types.length;
            var _loc_3:uint = 0;
            while (_loc_3 < _loc_2)
            {
                
                if (param1 == this._types[_loc_3])
                {
                    break;
                }
                _loc_3 = _loc_3 + 1;
            }
            if (_loc_3 >= _loc_2)
            {
                _loc_3 = 0;
            }
            this._type = param1;
            var _loc_4:* = _loc_3 * this._cfg.TECH_BTN_W;
            if (this._clickedShape.x != _loc_4)
            {
                this._clickedShape.x = _loc_4;
            }
            else
            {
                return;
            }
            this._clickingShape.x = this._clickedShape.x;
            this.setState(this._clickingShape, false);
            return;
        }// end function

    }
}
