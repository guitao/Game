package com.sina.finance.ui
{

    public class IndicatorKDJ extends Indicator
    {
        private const ED:uint = 3;
        private var _ks:Array;
        private var _min:Number;
        private var _jline:LineCurve;
        private var _dline:LineCurve;
        private var _kline:LineCurve;
        private const CD:uint = 16711935;
        private var _max:Number;
        private const EK:uint = 3;
        private const CJ:uint = 65535;
        private var _js:Array;
        private var _maxp:Number = 0.01;
        private var _ds:Array;
        private const CK:uint = 255;
        private const EM:uint = 9;
        private var _minp:Number = 1000000;

        public function IndicatorKDJ()
        {
            _color1 = this.CK;
            _color2 = this.CD;
            _color3 = this.CJ;
            this._kline = new LineCurve(1, this.CK, 1, false);
            this._dline = new LineCurve(1, this.CD, 1, false);
            this._jline = new LineCurve(1, this.CJ, 1, false);
            addChild(this._kline);
            addChild(this._dline);
            addChild(this._jline);
            return;
        }// end function

        override public function draw(param1:uint = 24) : void
        {
            this._kline.clear(true);
            this._dline.clear(true);
            this._jline.clear(true);
            var _loc_2:* = _objs.length;
            var _loc_3:* = _cfg.KW / _loc_2;
            if (_loc_2 < _cfg.NK)
            {
                _loc_3 = _cfg.KW / _cfg.NK;
            }
            var _loc_4:* = _loc_3 / 2;
            var _loc_5:uint = 0;
            while (_loc_5 < _loc_2)
            {
                
                if (_loc_5 == 0)
                {
                    this._kline.moveTo(_loc_4, _objs[_loc_5].ky);
                    this._dline.moveTo(_loc_4, _objs[_loc_5].dy);
                    this._jline.moveTo(_loc_4, _objs[_loc_5].jy);
                }
                else
                {
                    this._kline.lineTo(_loc_4, _objs[_loc_5].ky);
                    this._dline.lineTo(_loc_4, _objs[_loc_5].dy);
                    this._jline.lineTo(_loc_4, _objs[_loc_5].jy);
                }
                _loc_4 = _loc_4 + _loc_3;
                _loc_5 = _loc_5 + 1;
            }
            return;
        }// end function

        override public function initDatasBySource(param1:Array) : void
        {
            var _loc_3:Number = NaN;
            var _loc_4:Number = NaN;
            var _loc_5:Number = NaN;
            if (param1 == null)
            {
                return;
            }
            destroyArray(this._ks);
            destroyArray(this._ds);
            destroyArray(this._js);
            destroyArray(_objs);
            this._ks = [];
            this._ds = [];
            this._js = [];
            _objs = [];
            var _loc_2:* = param1.length;
            var _loc_6:* = param1[0];
            if (param1[0].high == _loc_6.low)
            {
                _loc_3 = 17;
            }
            else
            {
                _loc_3 = (_loc_6.close - _loc_6.low) * 100 / (_loc_6.high - _loc_6.low) / this.EK;
            }
            _loc_4 = _loc_3 / this.ED;
            _loc_5 = 3 * _loc_3 - 2 * _loc_4;
            this._ks.push(_loc_3);
            this._ds.push(_loc_4);
            this._js.push(_loc_5);
            if (_loc_2 == 1)
            {
                return;
            }
            var _loc_7:uint = 1;
            while (_loc_7 < _loc_2)
            {
                
                _loc_6 = param1[_loc_7];
                this.setMinMaxPrice(_loc_7, param1);
                if (this._maxp == this._minp)
                {
                    _loc_3 = 17;
                }
                else
                {
                    _loc_3 = (_loc_6.close - this._minp) * 100 / (this._maxp - this._minp) / this.EK + (this.EK - 1) * this._ks[(_loc_7 - 1)] / this.EK;
                }
                _loc_4 = _loc_3 / this.ED + (this.ED - 1) * this._ds[(_loc_7 - 1)] / this.ED;
                _loc_5 = 3 * _loc_3 - 2 * _loc_4;
                this._ks.push(_loc_3);
                this._ds.push(_loc_4);
                this._js.push(_loc_5);
                _loc_7 = _loc_7 + 1;
            }
            return;
        }// end function

        override public function calcObjs(param1:uint, param2:uint) : void
        {
            var _loc_4:Number = NaN;
            var _loc_5:Number = NaN;
            var _loc_9:Object = null;
            var _loc_3:* = param2 - param1;
            while (_objs.length > _loc_3)
            {
                
                _objs.pop();
            }
            while (_objs.length < _loc_3)
            {
                
                _objs.push({});
            }
            this._max = -10000000;
            this._min = 10000000;
            var _loc_6:* = param1;
            while (_loc_6 < param2)
            {
                
                _loc_9 = _objs[_loc_6 - param1];
                _loc_9.k = this._ks[_loc_6];
                _loc_9.d = this._ds[_loc_6];
                _loc_9.j = this._js[_loc_6];
                _loc_4 = Math.min(_loc_9.k, _loc_9.d, _loc_9.j);
                _loc_5 = Math.max(_loc_9.k, _loc_9.d, _loc_9.j);
                if (this._min > _loc_4)
                {
                    this._min = _loc_4;
                }
                if (this._max < _loc_5)
                {
                    this._max = _loc_5;
                }
                _loc_6 = _loc_6 + 1;
            }
            var _loc_7:* = this._max - this._min;
            var _loc_8:* = _cfg.hindicator - 10;
            _loc_6 = 0;
            while (_loc_6 < _loc_3)
            {
                
                _objs[_loc_6].ky = _loc_8 * (this._max - _objs[_loc_6].k) / _loc_7;
                _objs[_loc_6].dy = _loc_8 * (this._max - _objs[_loc_6].d) / _loc_7;
                _objs[_loc_6].jy = _loc_8 * (this._max - _objs[_loc_6].j) / _loc_7;
                _loc_6 = _loc_6 + 1;
            }
            setLeftText(this._min, this._max, 3, 2);
            return;
        }// end function

        override public function setDefaultText() : void
        {
            var _loc_1:* = _objs.length - 1;
            setTitleText("K: " + Number(_objs[_loc_1].k).toFixed(2), "D: " + Number(_objs[_loc_1].d).toFixed(2), "J: " + Number(_objs[_loc_1].j).toFixed(2));
            return;
        }// end function

        override public function interactiveTo(param1:uint) : void
        {
            this._kline.interactiveTo(param1);
            this._dline.interactiveTo(param1);
            this._jline.interactiveTo(param1);
            if (param1 >= _objs.length)
            {
                param1 = _objs.length - 1;
            }
            setTitleText("K: " + Number(_objs[param1].k).toFixed(2), "D: " + Number(_objs[param1].d).toFixed(2), "J: " + Number(_objs[param1].j).toFixed(2));
            return;
        }// end function

        override public function interactiveEnd() : void
        {
            this._kline.interactiveEnd();
            this._dline.interactiveEnd();
            this._jline.interactiveEnd();
            return;
        }// end function

        private function setMinMaxPrice(param1:uint, param2:Array) : void
        {
            var _loc_4:Object = null;
            this._minp = Number.MAX_VALUE;
            this._maxp = 0.01;
            var _loc_3:uint = 0;
            if (param1 >= this.EM)
            {
                _loc_3 = param1 - this.EM + 1;
            }
            while (_loc_3 <= param1)
            {
                
                _loc_4 = param2[_loc_3];
                if (_loc_4.low < this._minp)
                {
                    this._minp = _loc_4.low;
                }
                if (_loc_4.high > this._maxp)
                {
                    this._maxp = _loc_4.high;
                }
                _loc_3 = _loc_3 + 1;
            }
            return;
        }// end function

    }
}
