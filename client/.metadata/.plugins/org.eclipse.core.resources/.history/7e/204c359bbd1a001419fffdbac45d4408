package com.sina.finance.data
{
    import __AS3__.vec.*;
    import flash.events.*;
    import flash.utils.*;
    import hsuan.*;

    public class KData extends Object
    {
        private var _last:Object;
        public var hq:HQ;
        public var datas_30min:Array;
        public var datas_60min:Array;
        private var _cfg:Config;
        private var _prevclose:Number;
        public var bgLinePoses:Array;
        public var weekFArr:Array;
        public var kdataObj:KDataObj;
        public var weekBArr:Array;
        public var monthFArr:Array;
        public var monthBArr:Array;
        private var _dataTool:DataTool;
        public var datas_month:Array;
        private const _NEWS_RANGE:uint = 30;
        public var dayFArr:Array;
        public var dayBArr:Array;
        private var _rsArr:Vector.<Number>;
        public var datas_week:Array;
        public var datas_day:Array;
        public var datas_5min:Array;
        public var kdataState:KDataState;
        public var datas_15min:Array;

        public function KData(param1:HQ)
        {
            this._cfg = Config.getInstance();
            this.bgLinePoses = [];
            this._dataTool = DataTool.getInstance();
            this.hq = param1;
            return;
        }// end function

        private function _updateDatas(param1:Array, param2:Boolean = false) : void
        {
            if (!param1 || param1.length == 0)
            {
                return;
            }
            this._last = param1[(param1.length - 1)];
            if (isNaN(this._last.volume))
            {
                this._last.volume = this.hq.volume;
            }
            else
            {
                this._last.volume = this._last.volume + this.hq.volume;
            }
            this._last.close = Number(this.hq.price);
            if (param1 == this.datas_day || param1 == this.dayFArr)
            {
                this._last.open = this.hq.open;
                this._last.high = this.hq.high;
                this._last.low = this.hq.low;
                this._last.volume = this.hq.totalVolume;
            }
            if (param1.length == 1)
            {
                if (param1 == this.datas_day || param1 == this.dayFArr)
                {
                    this._last.percent = (this.hq.price - this.hq.prevclose) / this.hq.prevclose;
                }
                else
                {
                    this._last.percent = (this.hq.price - this._last.open) / this._last.open;
                }
            }
            else
            {
                this._last.percent = (this.hq.price - param1[param1.length - 2].close) / param1[param1.length - 2].close;
            }
            if (this.hq.price > this._last.high)
            {
                this._last.high = this.hq.price;
            }
            if (this.hq.price < this._last.low)
            {
                this._last.low = this.hq.price;
            }
            if (param2)
            {
                this._last.time = this.hq.time;
            }
            this.setMADataLast(param1);
            return;
        }// end function

        private function _isSameMin(param1:String, param2:String, param3:String, param4:uint) : Boolean
        {
            if (param1 == param2)
            {
                return true;
            }
            var _loc_5:* = uint(param1.substr(0, 2));
            var _loc_6:* = uint(param2.substr(0, 2));
            var _loc_7:* = uint(param1.substr(3, 2));
            var _loc_8:* = uint(param2.substr(3, 2));
            var _loc_9:* = uint(param3.substr(0, 2));
            var _loc_10:* = uint(param3.substr(3, 2));
            var _loc_11:* = this._getMinSegment(_loc_5, _loc_7, _loc_9, _loc_10, param4);
            var _loc_12:* = this._getMinSegment(_loc_6, _loc_8, _loc_9, _loc_10, param4);
            if (_loc_5 > _loc_6 || _loc_5 == _loc_6 && _loc_7 >= _loc_8)
            {
                return true;
            }
            if (param4 == 60)
            {
                if ((_loc_5 == 10 && _loc_7 == 30 || _loc_5 == 11 && _loc_7 == 30 || _loc_5 == 14 && _loc_7 == 0 || _loc_5 == 15 && _loc_7 == 0) && _loc_8 != _loc_7)
                {
                    return false;
                }
                return true;
            }
            else
            {
                return _loc_11 == _loc_12;
            }
        }// end function

        public function initKData(param1:Array, param2:Number, param3:Boolean = false) : void
        {
            var _loc_4:Number = NaN;
            var _loc_5:Date = null;
            this._prevclose = param2;
            if (!param3 && (param1.length == 0 || !this._dataTool.isSameDay_date(param1[(param1.length - 1)].date, this.hq.date)))
            {
                _loc_4 = Number(this.hq.totalVolume * (this._cfg.isBond ? (10) : (100)));
                _loc_5 = this._dataTool.cloneDate(this.hq.date);
                _loc_5.hours = 8;
                param1.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:_loc_4, date:_loc_5});
            }
            this.datas_day = param1;
            this.datas_day[0].prevclose = this._prevclose;
            this._setWeekMonthData(this.datas_day);
            this.calcMAAll();
            this._setPercentData(this.datas_day);
            this._setPercentData(this.datas_week);
            this._setPercentData(this.datas_month);
            if (!this._cfg.isBond && this._cfg.enableDayNews)
            {
                this._loadSpecNews();
            }
            this.kdataState = new KDataState(this);
            return;
        }// end function

        private function _getMinSegment(param1:uint, param2:uint, param3:uint, param4:uint, param5:uint) : int
        {
            return Math.max(1, Math.ceil(((param1 - param3) * 60 + param2 - param4) / param5));
        }// end function

        private function _isBeforeOpening(param1:String) : Boolean
        {
            var _loc_2:* = uint(param1.substr(0, 2));
            var _loc_3:* = uint(param1.substr(3, 2));
            if (_loc_2 < 9 || _loc_2 == 9 && _loc_3 < 30)
            {
                return true;
            }
            return false;
        }// end function

        private function _loadSpecNews() : void
        {
            this._dataTool.loadDataFromUrl(this._cfg.SPEC_NEWS_URL.replace("$symbol", this.hq.symbol), this._onSpecNewsLoaded, null, this._onSpecNewsLoaded, this._onSpecNewsLoaded);
            return;
        }// end function

        private function _calcMAData(param1:Array) : void
        {
            var _loc_6:String = null;
            var _loc_7:String = null;
            var _loc_8:Object = null;
            var _loc_9:Object = null;
            var _loc_10:uint = 0;
            var _loc_13:uint = 0;
            var _loc_2:* = this._cfg.getWorkingMAArr()[0];
            var _loc_3:* = _loc_2.length;
            var _loc_4:* = new Vector.<Number>;
            var _loc_5:* = new Vector.<Number>;
            var _loc_11:* = param1.length;
            var _loc_12:uint = 0;
            while (_loc_12 < _loc_3)
            {
                
                _loc_4[_loc_12] = 0;
                _loc_5[_loc_12] = 0;
                _loc_6 = "ma_price" + _loc_12;
                _loc_7 = "ma_volume" + _loc_12;
                _loc_10 = _loc_2[_loc_12];
                _loc_13 = 0;
                while (_loc_13 < _loc_11)
                {
                    
                    _loc_8 = param1[_loc_13];
                    _loc_4[_loc_12] = _loc_4[_loc_12] + Number(_loc_8.close);
                    _loc_5[_loc_12] = _loc_5[_loc_12] + Number(_loc_8.volume);
                    if (_loc_13 >= (_loc_10 - 1))
                    {
                        _loc_8[_loc_6] = _loc_4[_loc_12] / _loc_10;
                        _loc_8[_loc_7] = _loc_5[_loc_12] / _loc_10;
                        _loc_9 = param1[_loc_13 - _loc_10 + 1];
                        _loc_4[_loc_12] = _loc_4[_loc_12] - _loc_9.close;
                        _loc_5[_loc_12] = _loc_5[_loc_12] - _loc_9.volume;
                    }
                    else
                    {
                        _loc_8[_loc_6] = _loc_4[_loc_12] / (_loc_13 + 1);
                        _loc_8[_loc_7] = _loc_5[_loc_12] / (_loc_13 + 1);
                    }
                    _loc_13 = _loc_13 + 1;
                }
                _loc_12 = _loc_12 + 1;
            }
            return;
        }// end function

        private function _handleMinKVol(param1:Array) : void
        {
            if (!param1)
            {
                return;
            }
            var _loc_2:* = this._cfg.isBond ? (10) : (100);
            var _loc_3:uint = 0;
            var _loc_4:* = param1.length;
            while (_loc_3 < _loc_4)
            {
                
                param1[_loc_3].volume = param1[_loc_3].volume / _loc_2;
                _loc_3 = _loc_3 + 1;
            }
            return;
        }// end function

        public function killNine() : void
        {
            var _loc_1:Object = null;
            _loc_1 = this.datas_day[(this.datas_day.length - 1)];
            if (isNaN(_loc_1.volume) || _loc_1.volume <= 1)
            {
                this.datas_day.pop();
                if (this.dayFArr)
                {
                    this.dayFArr.pop();
                }
            }
            _loc_1 = this.datas_week[(this.datas_week.length - 1)];
            if (isNaN(_loc_1.volume) || _loc_1.volume <= 1)
            {
                this.datas_week.pop();
                if (this.weekFArr)
                {
                    this.weekFArr.pop();
                }
            }
            _loc_1 = this.datas_month[(this.datas_month.length - 1)];
            if (isNaN(_loc_1.volume) || _loc_1.volume <= 1)
            {
                this.datas_month.pop();
                if (this.monthFArr)
                {
                    this.monthFArr.pop();
                }
            }
            if (this.datas_day)
            {
                this.datas_day.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            if (this.datas_week && !this._dataTool.isSameWeek(this.datas_week[(this.datas_week.length - 1)].date, this.hq.date))
            {
                this.datas_week.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            if (this.datas_month && !this._dataTool.isSameMonth(this.datas_month[(this.datas_month.length - 1)].date, this.hq.date))
            {
                this.datas_month.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            this._updateDatas(this.datas_day);
            this._updateDatas(this.datas_week);
            this._updateDatas(this.datas_month);
            if (this.dayFArr)
            {
                this.dayFArr.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            if (this.weekFArr && !this._dataTool.isSameWeek(this.weekFArr[(this.weekFArr.length - 1)].date, this.hq.date))
            {
                this.weekFArr.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            if (this.monthFArr && !this._dataTool.isSameMonth(this.monthFArr[(this.monthFArr.length - 1)].date, this.hq.date))
            {
                this.monthFArr.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date), day:this.hq.today});
            }
            this._updateDatas(this.dayFArr);
            this._updateDatas(this.weekFArr);
            this._updateDatas(this.monthFArr);
            return;
        }// end function

        public function calcMAAll() : void
        {
            if (this.datas_day)
            {
                this._calcMAData(this.datas_day);
            }
            if (this.datas_month)
            {
                this._calcMAData(this.datas_month);
            }
            if (this.datas_week)
            {
                this._calcMAData(this.datas_week);
            }
            if (this.datas_5min)
            {
                this._calcMAData(this.datas_5min);
            }
            if (this.datas_15min)
            {
                this._calcMAData(this.datas_15min);
            }
            if (this.datas_30min)
            {
                this._calcMAData(this.datas_30min);
            }
            if (this.datas_60min)
            {
                this._calcMAData(this.datas_60min);
            }
            if (this.dayFArr)
            {
                this._calcMAData(this.dayFArr);
            }
            if (this.dayBArr)
            {
                this._calcMAData(this.dayBArr);
            }
            if (this.weekBArr)
            {
                this._calcMAData(this.weekBArr);
            }
            if (this.weekFArr)
            {
                this._calcMAData(this.weekFArr);
            }
            if (this.monthBArr)
            {
                this._calcMAData(this.monthBArr);
            }
            if (this.monthFArr)
            {
                this._calcMAData(this.monthFArr);
            }
            return;
        }// end function

        public function calcDataBGPoses(param1:Array) : void
        {
            var _loc_4:Number = NaN;
            if (!param1)
            {
                return;
            }
            var _loc_2:* = Number.MAX_VALUE;
            var _loc_3:Number = 0;
            var _loc_5:* = param1.length;
            var _loc_6:int = 0;
            while (_loc_6 < _loc_5)
            {
                
                _loc_4 = param1[_loc_6].close;
                if (_loc_4 < _loc_2)
                {
                    _loc_2 = _loc_4;
                }
                if (_loc_4 > _loc_3)
                {
                    _loc_3 = _loc_4;
                }
                _loc_6++;
            }
            _loc_6 = 0;
            while (_loc_6 < _loc_5)
            {
                
                this.bgLinePoses[_loc_6] = {y:this._dataTool.calcPricePosy(param1[_loc_6].close, _loc_2, _loc_3, this._cfg.hbar), d:param1[_loc_6].date};
                _loc_6++;
            }
            while (this.bgLinePoses.length > _loc_5)
            {
                
                this.bgLinePoses.pop();
            }
            return;
        }// end function

        public function update() : void
        {
            if (this.hq.totalVolume <= 0)
            {
                return;
            }
            this._updateDatas(this.datas_day);
            this._updateDatas(this.datas_week);
            this._updateDatas(this.datas_month);
            this._updateMinDatas(this.datas_5min, 5);
            this._updateMinDatas(this.datas_15min, 15);
            this._updateMinDatas(this.datas_30min, 30);
            this._updateMinDatas(this.datas_60min, 60);
            this._updateDatas(this.dayFArr);
            this._updateDatas(this.weekFArr);
            this._updateDatas(this.monthFArr);
            return;
        }// end function

        public function calcDataObj(param1:String, param2:uint, param3:uint) : void
        {
            var _loc_4:* = this.kdataState[param1];
            if (!this.kdataState[param1])
            {
                return;
            }
            var _loc_5:* = _loc_4[0].prevclose;
            if (param2 > 0)
            {
                _loc_5 = _loc_4[(param2 - 1)].close;
            }
            if (!this.kdataObj)
            {
                this.kdataObj = new KDataObj(this.hq);
            }
            this.kdataObj.setData(_loc_4.slice(param2, param3), _loc_5);
            return;
        }// end function

        public function set prevclose(param1:Number) : void
        {
            var _loc_2:Object = null;
            if (!this.datas_day || !this.datas_week || !this.datas_month)
            {
                return;
            }
            if (param1 < 0.1)
            {
                this._prevclose = Number(this.datas_day[0].open) || Number(this.datas_day[0].close);
            }
            else
            {
                this._prevclose = param1;
            }
            _loc_2 = this.datas_day[0];
            _loc_2.prevclose = this._prevclose;
            _loc_2.percent = (_loc_2.close - this._prevclose) / this._prevclose;
            _loc_2 = this.datas_week[0];
            _loc_2.prevclose = this._prevclose;
            _loc_2.percent = (_loc_2.close - this._prevclose) / this._prevclose;
            _loc_2 = this.datas_month[0];
            _loc_2.prevclose = this._prevclose;
            _loc_2.percent = (_loc_2.close - this._prevclose) / this._prevclose;
            if (this.datas_5min && this._dataTool.isSameDay_date(this.datas_5min[0].date, this.datas_day[0].date) && this.datas_5min[0].time == "09:35")
            {
                this.datas_5min[0].prevclose = this._prevclose;
            }
            if (this.datas_15min && this._dataTool.isSameDay_date(this.datas_15min[0].date, this.datas_day[0].date) && this.datas_15min[0].time == "09:45")
            {
                this.datas_15min[0].prevclose = this._prevclose;
            }
            if (this.datas_30min && this._dataTool.isSameDay_date(this.datas_30min[0].date, this.datas_day[0].date) && this.datas_30min[0].time == "10:00")
            {
                this.datas_30min[0].prevclose = this._prevclose;
            }
            if (this.datas_60min && this._dataTool.isSameDay_date(this.datas_60min[0].date, this.datas_day[0].date) && this.datas_60min[0].time == "10:30")
            {
                this.datas_60min[0].prevclose = this._prevclose;
            }
            return;
        }// end function

        private function _setWeekMonthData(param1:Array, param2:Boolean = false, param3:uint = 1) : void
        {
            var _loc_19:Array = null;
            var _loc_20:Array = null;
            var _loc_4:* = param1.length;
            var _loc_5:* = this._cfg.isBond ? (10) : (100);
            var _loc_6:* = param1[0];
            if (!param2)
            {
                _loc_6.volume = _loc_6.volume / _loc_5;
            }
            var _loc_7:* = _loc_6.open;
            var _loc_8:* = _loc_6.high;
            var _loc_9:* = _loc_6.low;
            var _loc_10:* = _loc_6.close;
            var _loc_11:* = _loc_6.volume;
            var _loc_12:* = _loc_6.date;
            var _loc_13:* = _loc_6.open;
            var _loc_14:* = _loc_6.high;
            var _loc_15:* = _loc_6.low;
            var _loc_16:* = _loc_6.close;
            var _loc_17:* = _loc_6.volume;
            var _loc_18:* = _loc_6.date;
            if (param2)
            {
                if (param3 == 1)
                {
                    this.weekFArr = [];
                    this.monthFArr = [];
                    _loc_19 = this.weekFArr;
                    _loc_20 = this.monthFArr;
                }
                else
                {
                    this.weekBArr = [];
                    this.monthBArr = [];
                    _loc_19 = this.weekBArr;
                    _loc_20 = this.monthBArr;
                }
            }
            else
            {
                this.datas_week = [];
                this.datas_month = [];
                _loc_19 = this.datas_week;
                _loc_20 = this.datas_month;
            }
            if (_loc_4 == 1)
            {
                _loc_19.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date)});
                _loc_20.push({open:this.hq.open, high:this.hq.high, low:this.hq.low, close:this.hq.price, volume:this.hq.totalVolume, date:this._dataTool.cloneDate(this.hq.date)});
                _loc_19[0].prevclose = this._prevclose;
                _loc_20[0].prevclose = this._prevclose;
                return;
            }
            var _loc_21:uint = 1;
            while (_loc_21 < _loc_4)
            {
                
                _loc_6 = param1[_loc_21];
                if (!param2)
                {
                    _loc_6.volume = _loc_6.volume / _loc_5;
                }
                if (this._dataTool.isSameWeek(param1[(_loc_21 - 1)].date, _loc_6.date))
                {
                    if (_loc_6.high > _loc_8)
                    {
                        _loc_8 = _loc_6.high;
                    }
                    if (_loc_6.low < _loc_9)
                    {
                        _loc_9 = _loc_6.low;
                    }
                    _loc_10 = _loc_6.close;
                    _loc_11 = _loc_11 + _loc_6.volume;
                    _loc_12 = _loc_6.date;
                }
                else
                {
                    _loc_19.push({open:_loc_7, high:_loc_8, low:_loc_9, close:_loc_10, volume:_loc_11, date:_loc_12});
                    _loc_7 = _loc_6.open;
                    _loc_8 = _loc_6.high;
                    _loc_9 = _loc_6.low;
                    _loc_10 = _loc_6.close;
                    _loc_11 = _loc_6.volume;
                    _loc_12 = _loc_6.date;
                }
                if (this._dataTool.isSameMonth(param1[(_loc_21 - 1)].date, _loc_6.date))
                {
                    if (_loc_6.high > _loc_14)
                    {
                        _loc_14 = _loc_6.high;
                    }
                    if (_loc_6.low < _loc_15)
                    {
                        _loc_15 = _loc_6.low;
                    }
                    _loc_16 = _loc_6.close;
                    _loc_17 = _loc_17 + _loc_6.volume;
                    _loc_18 = _loc_6.date;
                }
                else
                {
                    _loc_20.push({open:_loc_13, high:_loc_14, low:_loc_15, close:_loc_16, volume:_loc_17, date:_loc_18});
                    _loc_13 = _loc_6.open;
                    _loc_14 = _loc_6.high;
                    _loc_15 = _loc_6.low;
                    _loc_16 = _loc_6.close;
                    _loc_17 = _loc_6.volume;
                    _loc_18 = _loc_6.date;
                }
                if (_loc_21 == (_loc_4 - 1))
                {
                    _loc_19.push({open:_loc_7, high:_loc_8, low:_loc_9, close:_loc_10, volume:_loc_11, date:_loc_12});
                    _loc_20.push({open:_loc_13, high:_loc_14, low:_loc_15, close:_loc_16, volume:_loc_17, date:_loc_18});
                }
                _loc_21 = _loc_21 + 1;
            }
            _loc_19[0].prevclose = this._prevclose;
            _loc_20[0].prevclose = this._prevclose;
            return;
        }// end function

        private function _updateMinDatas(param1:Array, param2:uint) : void
        {
            var _loc_3:Number = NaN;
            if (param1)
            {
                if (this._isBeforeOpening(this.hq.time))
                {
                    return;
                }
                if (this._dataTool.isSameDay_date(param1[(param1.length - 1)].date, this.hq.date) && this._isSameMin(param1[(param1.length - 1)].time, this.hq.time, "09:30", param2))
                {
                    this._updateDatas(param1, true);
                }
                else
                {
                    if (this.hq.totalVolume < 1)
                    {
                        return;
                    }
                    _loc_3 = (this.hq.price - param1[(param1.length - 1)].close) / param1[(param1.length - 1)].close;
                    param1.push({open:this.hq.price, high:this.hq.price, low:this.hq.price, close:this.hq.price, volume:this.hq.volume, percent:_loc_3, day:this.hq.today, date:this.hq.date, time:this.hq.time});
                    if (this._isSameMin("09:35", this.hq.time, "09:30", param2))
                    {
                        param1[(param1.length - 1)].open = this.hq.open;
                    }
                    this.setMADataLast(param1);
                }
            }
            return;
        }// end function

        public function get rsArr() : Vector.<Number>
        {
            return this._rsArr;
        }// end function

        private function _setPercentData(param1:Array, param2:Boolean = false) : void
        {
            var _loc_7:Date = null;
            var _loc_8:String = null;
            var _loc_9:String = null;
            var _loc_10:String = null;
            var _loc_3:* = param1.length;
            var _loc_4:* = param1[0];
            var _loc_5:* = param1[0].prevclose;
            if (isNaN(_loc_5) || _loc_5 <= 0)
            {
                _loc_5 = _loc_4.open;
            }
            var _loc_6:uint = 0;
            while (_loc_6 < _loc_3)
            {
                
                _loc_4 = param1[_loc_6];
                param1[_loc_6].percent = (_loc_4.close - _loc_5) / _loc_5;
                _loc_5 = _loc_4.close;
                if (param2)
                {
                }
                else if (!_loc_4.day)
                {
                    _loc_7 = _loc_4.date;
                    if (_loc_7.month >= 9)
                    {
                        _loc_8 = String((_loc_7.month + 1));
                    }
                    else
                    {
                        _loc_8 = "0" + (_loc_7.month + 1);
                    }
                    if (_loc_7.date >= 10)
                    {
                        _loc_9 = String(_loc_7.date);
                    }
                    else
                    {
                        _loc_9 = "0" + _loc_7.date;
                    }
                    _loc_4.day = [_loc_7.fullYear, _loc_8, _loc_9].join("/");
                }
                else
                {
                    _loc_4.time = String(_loc_4.day).substr(11, 5);
                    _loc_4.day = String(_loc_4.day).substr(0, 10);
                    _loc_4.date = this._dataTool.dateStr2dateObj(_loc_4.day);
                    _loc_10 = _loc_4.day;
                    _loc_4.day = _loc_10.split("-").join("/");
                }
                _loc_6 = _loc_6 + 1;
            }
            return;
        }// end function

        public function gotKFactor(param1:Number, param2:Boolean, param3:Object, param4:uint = 1) : void
        {
            var _loc_6:Array = null;
            var _loc_7:int = 0;
            var _loc_8:Object = null;
            var _loc_9:String = null;
            var _loc_10:Number = NaN;
            var _loc_11:Number = NaN;
            var _loc_12:Number = NaN;
            var _loc_13:Number = NaN;
            var _loc_14:Object = null;
            if (!this.datas_day)
            {
                return;
            }
            var _loc_5:* = new ByteArray();
            new ByteArray().writeObject(this.datas_day);
            _loc_5.position = 0;
            if (param4 == 1)
            {
                this.dayFArr = _loc_5.readObject();
                _loc_6 = this.dayFArr;
                _loc_13 = (param2 ? (this.hq.price) : (this.hq.prevclose)) / param1;
                _loc_7 = 0;
                while (_loc_7 < this.dayFArr.length)
                {
                    
                    _loc_8 = this.dayFArr[_loc_7];
                    _loc_9 = "_" + this._dataTool.dateObj2dateStrUTC(_loc_8.date, "_");
                    _loc_10 = Number(param3[_loc_9]);
                    if (isNaN(_loc_10))
                    {
                        _loc_10 = this.hq.price / _loc_13;
                    }
                    _loc_11 = _loc_8.close;
                    _loc_8.close = _loc_13 * _loc_10;
                    _loc_12 = _loc_8.close / _loc_11;
                    _loc_8.high = _loc_8.high * _loc_12;
                    _loc_8.low = _loc_8.low * _loc_12;
                    _loc_8.open = _loc_8.open * _loc_12;
                    _loc_7++;
                }
            }
            else
            {
                this.dayBArr = _loc_5.readObject();
                _loc_6 = this.dayBArr;
                _loc_7 = 0;
                while (_loc_7 < this.dayBArr.length)
                {
                    
                    _loc_8 = this.dayBArr[_loc_7];
                    _loc_9 = "_" + this._dataTool.dateObj2dateStrUTC(_loc_8.date, "_");
                    _loc_10 = Number(param3[_loc_9]);
                    if (isNaN(_loc_10))
                    {
                        if (_loc_7 <= 0)
                        {
                        }
                        _loc_14 = this.dayBArr[(_loc_7 - 1)];
                        _loc_10 = _loc_8.percent * _loc_14.close + _loc_14.close;
                    }
                    _loc_12 = _loc_10 / _loc_8.close;
                    _loc_8.close = _loc_10;
                    _loc_8.high = _loc_8.high * _loc_12;
                    _loc_8.low = _loc_8.low * _loc_12;
                    _loc_8.open = _loc_8.open * _loc_12;
                    _loc_7++;
                }
            }
            this._setWeekMonthData(_loc_6, true, param4);
            switch(param4)
            {
                case 1:
                {
                    this._calcMAData(this.dayFArr);
                    this._calcMAData(this.weekFArr);
                    this._calcMAData(this.monthFArr);
                    break;
                }
                case 2:
                {
                    this._calcMAData(this.dayBArr);
                    this._calcMAData(this.weekBArr);
                    this._calcMAData(this.monthBArr);
                    break;
                }
                default:
                {
                    break;
                }
            }
            this._setPercentData(_loc_6, true);
            if (param4 == 1)
            {
                this._setPercentData(this.weekFArr);
                this._setPercentData(this.monthFArr);
            }
            else
            {
                this._setPercentData(this.weekBArr);
                this._setPercentData(this.monthBArr);
            }
            if (!this.kdataState)
            {
                this.kdataState = new KDataState(this);
            }
            this.kdataState.updateKDataState(this);
            return;
        }// end function

        private function _onSpecNewsLoaded(event:Event) : void
        {
            var arr:Array;
            var o:Object;
            var e:* = event;
            e.target.removeEventListener(Event.COMPLETE, this._onSpecNewsLoaded);
            e.target.removeEventListener(IOErrorEvent.IO_ERROR, this._onSpecNewsErr);
            e.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._onSpecNewsErr);
            var str:* = this._dataTool.fixJsonStr(String(e.target.data));
            try
            {
                arr = Json.decode(str);
            }
            catch (e:Error)
            {
                _createNewsMark();
                return;
            }
            if (!arr)
            {
                this._createNewsMark();
                return;
            }
            var i:uint;
            var l:* = arr.length;
            while (i < l)
            {
                
                o = arr[i];
                this._cfg.dayKNewsArr.push({d:this._dataTool.dateStr2dateObj(o.date), t:o.type});
                i = (i + 1);
            }
            this._createNewsMark();
            return;
        }// end function

        public function gotRs(param1:Number, param2:Array) : void
        {
            var _loc_3:Object = null;
            this._rsArr = new Vector.<Number>;
            var _loc_4:uint = 0;
            var _loc_5:* = param2.length;
            while (_loc_4 < _loc_5)
            {
                
                _loc_3 = param2[_loc_4];
                this._rsArr[this._rsArr.length] = _loc_3.amount;
                this._rsArr[this._rsArr.length] = this._dataTool.dateStr2dateObj(_loc_3.date).time;
                _loc_4 = _loc_4 + 1;
            }
            if (this._rsArr.length == 0 && !isNaN(param1))
            {
                this._rsArr.push(param1, this.hq.date.time);
            }
            this._rsArr.reverse();
            return;
        }// end function

        public function setMinKDataById(param1:uint, param2:Array) : void
        {
            this._handleMinKVol(param2);
            this._setPercentData(param2);
            if (!this.kdataState)
            {
                this.kdataState = new KDataState(this);
            }
            this.kdataState.initKDataStateById(param2, param1);
            this._calcMAData(param2);
            return;
        }// end function

        private function _onSpecNewsErr(event:Event) : void
        {
            event.target.removeEventListener(Event.COMPLETE, this._onSpecNewsLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this._onSpecNewsErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this._onSpecNewsErr);
            this._createNewsMark();
            return;
        }// end function

        private function _createNewsMark() : void
        {
            var _loc_2:Object = null;
            var _loc_4:Date = null;
            var _loc_6:Date = null;
            var _loc_8:Date = null;
            var _loc_10:Date = null;
            var _loc_12:Date = null;
            var _loc_18:Number = NaN;
            var _loc_19:Number = NaN;
            var _loc_20:Boolean = false;
            var _loc_21:uint = 0;
            var _loc_22:uint = 0;
            var _loc_1:* = this.datas_day;
            var _loc_3:Number = 0;
            var _loc_5:Number = 0;
            var _loc_7:Number = 1;
            var _loc_9:Number = 0;
            var _loc_11:* = Number.MAX_VALUE;
            var _loc_13:* = _loc_1.length - this._NEWS_RANGE;
            var _loc_23:int = 0;
            _loc_13 = 0;
            var _loc_14:Array = [];
            var _loc_15:* = _loc_1.length - 1;
            while (_loc_15 >= _loc_13)
            {
                
                _loc_2 = _loc_1[_loc_15];
                if (_loc_2.close <= 0)
                {
                }
                else
                {
                    _loc_18 = (_loc_15 > 0 ? (_loc_1[(_loc_15 - 1)].close) : (_loc_1[_loc_15].open)) || 1;
                    _loc_19 = (_loc_2.high - _loc_2.low) / _loc_18;
                    if (_loc_19 > _loc_3)
                    {
                        _loc_3 = _loc_19;
                        _loc_4 = _loc_2.date;
                    }
                    if (_loc_2.percent > _loc_5)
                    {
                        _loc_5 = _loc_2.percent;
                        _loc_6 = _loc_2.date;
                    }
                    if (_loc_2.percent < _loc_7)
                    {
                        _loc_7 = _loc_2.percent;
                        _loc_8 = _loc_2.date;
                    }
                    if (_loc_2.volume > _loc_9)
                    {
                        _loc_9 = _loc_2.volume;
                        _loc_10 = _loc_2.date;
                    }
                    if (_loc_2.volume < _loc_11)
                    {
                        _loc_11 = _loc_2.volume;
                        _loc_12 = _loc_2.date;
                    }
                }
                _loc_15 = _loc_15 - 1;
            }
            var _loc_16:uint = 0;
            var _loc_17:* = _loc_14.length;
            while (_loc_16 < _loc_17)
            {
                
                _loc_20 = false;
                _loc_21 = 0;
                _loc_22 = this._cfg.dayKNewsArr.length;
                while (_loc_21 < _loc_22)
                {
                    
                    if (this._dataTool.isSameDay_date(this._cfg.dayKNewsArr[_loc_21].d, _loc_14[_loc_16].d))
                    {
                        _loc_20 = true;
                        break;
                    }
                    _loc_21 = _loc_21 + 1;
                }
                if (!_loc_20)
                {
                    this._cfg.dayKNewsArr.push(_loc_14[_loc_16]);
                }
                _loc_16 = _loc_16 + 1;
            }
            return;
        }// end function

        private function setMADataLast(param1:Array) : void
        {
            var _loc_7:uint = 0;
            var _loc_8:uint = 0;
            var _loc_9:Object = null;
            if (!param1)
            {
                return;
            }
            var _loc_2:* = param1.length;
            var _loc_3:* = this._cfg.getWorkingMAArr()[0];
            var _loc_4:* = _loc_3.length;
            var _loc_5:* = new Vector.<Number>;
            var _loc_6:* = new Vector.<Number>;
            _loc_8 = 0;
            while (_loc_8 < _loc_4)
            {
                
                _loc_5[_loc_8] = 0;
                _loc_6[_loc_8] = 0;
                _loc_7 = Math.max(0, _loc_2 - _loc_3[_loc_8]);
                while (_loc_7 < _loc_2)
                {
                    
                    _loc_9 = param1[_loc_7];
                    _loc_5[_loc_8] = _loc_5[_loc_8] + Number(_loc_9.close);
                    _loc_6[_loc_8] = _loc_6[_loc_8] + Number(_loc_9.volume);
                    _loc_7 = _loc_7 + 1;
                }
                _loc_8 = _loc_8 + 1;
            }
            _loc_9 = param1[(_loc_2 - 1)];
            _loc_8 = 0;
            while (_loc_8 < _loc_4)
            {
                
                _loc_7 = Math.min(_loc_2, _loc_3[_loc_8]);
                _loc_9["ma_price" + _loc_8] = _loc_5[_loc_8] / _loc_7;
                _loc_9["ma_volume" + _loc_8] = _loc_6[_loc_8] / _loc_7;
                _loc_8 = _loc_8 + 1;
            }
            return;
        }// end function

    }
}
