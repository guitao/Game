package 
{
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.ui.*;
    import flash.utils.*;

    public class PreLoader extends MovieClip
    {
        private const _C:uint = 11184810;
        private const HEIGHT:uint = 4;
        private const WIDTH:uint = 200;
		
        private var _loadingBox:Shape;
        private const MAIN_CLASS:String = "SinaKLine";
        private var _t:TextField;
        private var _loadingLine:Shape;

        public function PreLoader()
        {
            this._loadingBox = new Shape();
            this._loadingLine = new Shape();
            this._t = new TextField();
            if (stage)
            {
                this.init();
            }
            else
            {
                addEventListener(Event.ADDED_TO_STAGE, this.init);
            }
            return;
        }

        private function checkFrame(event:Event) : void
        {
            if (loaderInfo.bytesLoaded >= loaderInfo.bytesTotal)
            {
                stop();
                this.loaded();
            }
            return;
        }

        private function initUi() : void
        {
            this._loadingBox.graphics.lineStyle(0, this._C);
            this._loadingBox.graphics.drawRect(0, 0, this.WIDTH, this.HEIGHT);
            this._loadingLine.graphics.lineStyle(0, this._C);
            var _loc_1:* = (stage.stageWidth - this.WIDTH) * 0.5;
            this._loadingLine.x = (stage.stageWidth - this.WIDTH) * 0.5;
            this._loadingBox.x = _loc_1;
            this._loadingBox.y = (stage.stageHeight - this.HEIGHT) * 0.5;
            this._loadingLine.y = stage.stageHeight * 0.5;
            addChild(this._loadingLine);
            addChild(this._loadingBox);
            this._t.defaultTextFormat = new TextFormat("arial", 12, this._C);
            this._t.autoSize = "left";
            this._t.selectable = false;
            this._t.text = "加载中";
            this.locateT();
            this._t.y = this._loadingLine.y + 7;
            addChild(this._t);
            return;
        }

        private function loaded() : void
        {
            removeEventListener(Event.ENTER_FRAME, this.checkFrame);
            loaderInfo.removeEventListener(ProgressEvent.PROGRESS, this.progress);
            loaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, this.ioError);
            this.startup();
            return;
        }

        private function progress(event:ProgressEvent) : void
        {
            this._loadingLine.graphics.lineTo(event.bytesLoaded / event.bytesTotal * this.WIDTH, 0);
            return;
        }

        private function ioError(event:IOErrorEvent) : void
        {
            this._t.text = "加载失败,请刷新重试";
            this.locateT();
            return;
        }

        private function init(event:Event = null) : void
        {
            removeEventListener(Event.ADDED_TO_STAGE, this.init);
            this.contextMenu = new ContextMenu();
            this.contextMenu.hideBuiltInItems();
            this.initUi();
            addEventListener(Event.ENTER_FRAME, this.checkFrame);
            loaderInfo.addEventListener(ProgressEvent.PROGRESS, this.progress);
            loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.ioError);
            return;
        }

        private function locateT() : void
        {
            this._t.x = (stage.stageWidth - this._t.width) * 0.5;
            return;
        }

        private function startup() : void
        {
            var _loc_1:* = getDefinitionByName(this.MAIN_CLASS);
            addChild(new _loc_1);
            return;
        }

    }
}
