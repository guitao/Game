package com.sina.finance.data
{
    import flash.events.*;
    import hsuan.*;

    public class TData extends TDataBase
    {
        private var _retryTradingDatesCount:uint = 0;
        public var bgLinePoses:Array;
        protected var _lastObj:Object;
        public var bgLineRealLen:uint;

        public function TData()
        {
            this.bgLinePoses = [];
            tDataState = {t3l:2, t3r:3, t5l:4, t5r:5, t1l:0, t1r:1};
            return;
        }// end function

        override protected function onOneOk(event:Event = null) : void
        {
            var _loc_2:Array = null;
            var _loc_3:Array = null;
            var _loc_4:String = null;
            if (!event)
            {
                if (_isFake)
                {
                    datas_1 = _dataTool.getSpaceTDataByDay(1, hq.price, false);
                }
                else
                {
                    datas_1 = _dataTool.getSpaceTDataByDay(1, hq.price, true);
                    datas_1[0].volume = hq.totalVolume;
                }
            }
            else
            {
                event.target.removeEventListener(Event.COMPLETE, this.onOneOk);
                event.target.removeEventListener(IOErrorEvent.IO_ERROR, oneTIoErr);
                _loc_2 = String(event.target.data).split("\"");
                if (_loc_2.length < 2 || _loc_2[1] == "")
                {
                    datas_1 = _dataTool.getSpaceTDataByDay(1, hq.price, true);
                }
                else
                {
                    datas_1 = _dataTool.b64arrayFormat(_dataTool.b642int32(_loc_2[1]), false);
                }
            }
            handle243orMore(datas_1);
            if (datas_1[0].price <= 0)
            {
                var _loc_5:* = hq.prevclose;
                datas_1[0].avg_price = hq.prevclose;
                datas_1[0].price = _loc_5;
            }
            if (datas_1[0].volume > 0)
            {
                datas_1[0].price = hq.open;
            }
            datas_1[0].date = _dataTool.cloneDate(hq.date);
            datas_1[0].prevclose = hq.prevclose;
            datas_1[0].lastfive = _lastfive;
            hq.setBufData(datas_1[0]);
            tdataObj = new TDataObj(hq);
            calcDataObj(1, hq.date);
            if (dates && dates.length > 3 * 200)
            {
                load5AndYT();
            }
            else
            {
                _loc_3 = hq.today.split("-");
                _loc_3[0] = Number(_loc_3[0]) - 3;
                _loc_4 = _loc_3.join("-");
                _dataTool.loadDataFromUrl(TRADE_URL_HEAD + _loc_4, this.onDatesLoaded, null, this.tradingDatesIoErr);
            }
            if (initCallBackFun != null)
            {
                initCallBackFun();
            }
            return;
        }// end function

        private function onDatesLoaded(event:Event) : void
        {
            var reqLoader:URLLoaderWithReq;
            var reStr:String;
            var needPush:Boolean;
            var days:uint;
            var i:uint;
            var e:* = event;
            reqLoader = URLLoaderWithReq(e.target);
            reqLoader.removeEventListener(Event.COMPLETE, this.onDatesLoaded);
            reqLoader.removeEventListener(IOErrorEvent.IO_ERROR, this.tradingDatesIoErr);
            var jsonStr:* = _dataTool.fixJsonStr(String(e.target.data));
            try
            {
                dates_str = Json.decode(jsonStr);
            }
            catch (err:Error)
            {
                if (++_retryTradingDatesCount > _RETRY_COUNT)
                {
                    reStr;
                }
                else
                {
                    _dataTool.loadDataFromUrl(reqLoader.urlRequest.url + ("&r=" + Math.random()), onDatesLoaded, null, tradingDatesIoErr);
                    reStr;
                }
                _cfg.sendStatistic("flasherr.html?type=" + reStr);
                return;
            }
            dates = [];
            var len:* = dates_str.length;
            var j:uint;
            while (j < len)
            {
                
                if (dates_str[j] == null || dates_str[j] == "")
                {
                }
                else
                {
                    dates.push(_dataTool.dateStr2dateObj(dates_str[j]));
                }
                j = (j + 1);
            }
            if (dates && dates.length > 5)
            {
                needPush;
                days = dates.length;
                i = (days - 1);
                while (i >= days - 5)
                {
                    
                    if (_dataTool.isSameDay_date(dates[i], hq.date))
                    {
                        needPush;
                        break;
                    }
                    i = (i - 1);
                }
                i = (i + 1);
                while (i < days)
                {
                    
                    dates.pop();
                    i = (i + 1);
                }
                if (needPush)
                {
                    dates.push(_dataTool.cloneDate(hq.date));
                }
            }
            if (dates.length > dates_str.length)
            {
                dates_str.push(hq.today);
            }
            else if (dates.length < dates_str.length)
            {
                dates_str.pop();
            }
            load5AndYT();
            return;
        }// end function

        public function addCloseLineVolumeData(param1:Array) : void
        {
            var _loc_7:Number = NaN;
            var _loc_2:* = param1.length - 1;
            var _loc_3:* = datas_3.length;
            var _loc_4:* = _loc_3;
            while (_loc_4 > 0)
            {
                
                _loc_4 = _loc_4 - 1;
                if (_dataTool.isSameDay_date(param1[_loc_2].date, datas_3[_loc_4].date))
                {
                    datas_3[_loc_4].volume = param1[_loc_2].volume;
                    if (_loc_2-- == 0)
                    {
                        break;
                    }
                }
            }
            var _loc_5:Number = 0;
            var _loc_6:uint = 0;
            _loc_4 = _loc_3 - 10;
            while (_loc_4 < (_loc_3 - 1))
            {
                
                _loc_7 = Number(datas_3[_loc_4].volume) || 0;
                if (_loc_7 > 0)
                {
                    _loc_5 = _loc_5 + _loc_7;
                    _loc_6 = _loc_6 + 1;
                }
                if (_loc_4 >= _loc_3 - 6)
                {
                    latest5[_loc_4 - _loc_3 + 6][0].lastfive = _loc_5 / _loc_6 / 240 || 0;
                    _loc_7 = Number(datas_3[_loc_4 - 4].volume) || 0;
                    if (_loc_7 > 0)
                    {
                        _loc_5 = _loc_5 - _loc_7;
                        _loc_6 = _loc_6 - 1;
                    }
                }
                _loc_4 = _loc_4 + 1;
            }
            return;
        }// end function

        public function killNine() : void
        {
            datas_1 = _dataTool.getSpaceTDataByDay(1, hq.price, true);
            datas_1[0].date = _dataTool.cloneDate(hq.date);
            datas_1[0].price = hq.price;
            datas_1[0].prevclose = hq.prevclose;
            datas_1[0].volume = hq.totalVolume;
            var _loc_1:uint = 0;
            var _loc_2:Number = 0;
            var _loc_3:uint = 0;
            while (_loc_3 < 5)
            {
                
                if (latest5[_loc_3][0].totalVolume)
                {
                    _loc_2 = _loc_2 + Number(latest5[_loc_3][0].totalVolume);
                    _loc_1 = _loc_1 + 1;
                }
                _loc_3 = _loc_3 + 1;
            }
            datas_1[0].lastfive = _loc_2 / _loc_1 / 240 || 0;
            hq.setBufData(datas_1[0]);
            hq.inited = false;
            latest5.shift();
            latest5.push(datas_1);
            this.calcBGLinePoses(latest5);
            dates.push(_dataTool.cloneDate(hq.date));
            datas_3.push({price:hq.price, date:_dataTool.cloneDate(hq.date), volume:hq.totalVolume});
            return;
        }// end function

        public function calcBGLinePoses(param1:Array) : void
        {
            var _loc_2:uint = 0;
            var _loc_5:Number = NaN;
            var _loc_6:Array = null;
            var _loc_7:uint = 0;
            if (!param1)
            {
                return;
            }
            if (param1.length <= 5)
            {
                _loc_6 = [];
                _loc_7 = param1.length;
                _loc_2 = 0;
                while (_loc_2 < _loc_7)
                {
                    
                    _loc_6 = _loc_6.concat(param1[_loc_2]);
                    _loc_2 = _loc_2 + 1;
                }
                param1 = _loc_6;
            }
            var _loc_3:* = Number.MAX_VALUE;
            var _loc_4:Number = 0;
            _loc_7 = param1.length;
            _loc_2 = 0;
            while (_loc_2 < _loc_7)
            {
                
                _loc_5 = param1[_loc_2].price;
                if (isNaN(_loc_5) || _loc_5 <= 0 || _loc_5 > 1000000)
                {
                }
                else
                {
                    if (_loc_5 < _loc_3)
                    {
                        _loc_3 = _loc_5;
                    }
                    if (_loc_5 > _loc_4)
                    {
                        _loc_4 = _loc_5;
                    }
                }
                _loc_2 = _loc_2 + 1;
            }
            _loc_2 = 0;
            while (_loc_2 < _loc_7)
            {
                
                this.bgLinePoses[_loc_2] = {y:_dataTool.calcPricePosy(param1[_loc_2].price, _loc_3, _loc_4, _cfg.hbar), d:param1[_loc_2].date};
                if (param1[_loc_2].price > 0)
                {
                    this.bgLineRealLen = _loc_2;
                }
                _loc_2 = _loc_2 + 1;
            }
            while (this.bgLinePoses.length > _loc_7)
            {
                
                this.bgLinePoses.pop();
            }
            return;
        }// end function

        public function reloadOneData() : void
        {
            var tmpS:* = hq.symbol;
            _dataTool.loadDataFromUrl(_cfg.HQ_URL_PREFIX + "&list=ml_" + tmpS, function (event:Event) : void
            {
                var _loc_2:* = String(event.target.data).split("\"");
                if (_loc_2.length < 2 || _loc_2[1] == "")
                {
                    return;
                }
                var _loc_3:* = _dataTool.b64arrayFormat(_dataTool.b642int32(_loc_2[1]), false);
                handle243orMore(_loc_3);
                if (_loc_3[0].price <= 0)
                {
                    var _loc_5:* = hq.prevclose;
                    _loc_3[0].avg_price = hq.prevclose;
                    _loc_3[0].price = _loc_5;
                }
                var _loc_4:uint = 0;
                while (_loc_4 < 242)
                {
                    
                    datas_1[_loc_4].price = _loc_3[_loc_4].price;
                    datas_1[_loc_4].avg_price = _loc_3[_loc_4].avg_price;
                    datas_1[_loc_4].volume = _loc_3[_loc_4].volume;
                    _loc_4 = _loc_4 + 1;
                }
                datas_1[0].totalVolume = _loc_3[0].totalVolume;
                datas_1[0].totalAmount = _loc_3[0].totalAmount;
                hq.inited = false;
                return;
            }// end function
            );
            return;
        }// end function

        override public function update() : void
        {
            if (datas_1 == null)
            {
                return;
            }
            this._lastObj = datas_1[hq.index];
            this._lastObj.price = hq.price;
            if (datas_1[0].volume > 0)
            {
                datas_1[0].price = hq.open;
            }
            this._lastObj.avg_price = hq.avg_price || hq.price;
            this._lastObj.volume = this._lastObj.volume + hq.volume;
            if (datas_3 == null)
            {
                return;
            }
            this._lastObj = datas_3[(datas_3.length - 1)];
            this._lastObj.close = hq.price;
            this._lastObj.volume = hq.totalVolume;
            if (hq.price > this._lastObj.high)
            {
                this._lastObj.high = hq.price;
            }
            if (hq.price < this._lastObj.low)
            {
                this._lastObj.low = hq.price;
            }
            return;
        }// end function

        private function tradingDatesIoErr(event:IOErrorEvent) : void
        {
            var _loc_3:String = null;
            var _loc_2:* = URLLoaderWithReq(event.target);
            _loc_2.removeEventListener(Event.COMPLETE, this.onDatesLoaded);
            _loc_2.removeEventListener(IOErrorEvent.IO_ERROR, this.tradingDatesIoErr);
            var _loc_4:String = this;
            _loc_4._retryTradingDatesCount = this._retryTradingDatesCount + 1;
            if (++this._retryTradingDatesCount > _RETRY_COUNT)
            {
                _loc_3 = "stoptradingdateio";
            }
            else
            {
                _dataTool.loadDataFromUrl(_loc_2.urlRequest.url + ("&r=" + Math.random()), this.onDatesLoaded, null, this.tradingDatesIoErr);
                _loc_3 = "errtradingdateio";
            }
            _cfg.sendStatistic("flasherr.html?type=" + _loc_3);
            return;
        }// end function

    }
}
