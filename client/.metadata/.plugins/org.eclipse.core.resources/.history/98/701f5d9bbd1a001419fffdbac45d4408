package stock.com.ui.elements.xpainting.canvas
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import stock.com.events.*;
    import stock.com.ui.elements.xpainting.icon.*;
    import stock.com.ui.elements.xpainting.painter.*;
    import stock.com.ui.elements.xpainting.panel.*;

    public class XPaintingCanvas extends Sprite
    {
        private var panel:XPaintingPanel = null;
        private var painterLayer:Sprite = null;
        private var _fsHold:Boolean = false;
        private var _fsHoldId:uint;
        private var painters:Array = null;
        private var painter:XPainter = null;
        private var _type:String = null;
        private var newPainter:Boolean = false;
        private var paintingArea:Rectangle = null;
        private var sensor:Sprite = null;
        private var _stage:Stage = null;

        public function XPaintingCanvas(param1:Sprite, param2:Stage, param3:Rectangle, param4:XPaintingPanel)
        {
            this.sensor = param1;
            this._stage = param2;
            this.paintingArea = param3;
            this.panel = param4;
            this.init();
            this._stage.addEventListener(Event.FULLSCREEN, this.onFs);
            return;
        }// end function

        public function hideAllSmallSquare() : void
        {
            var _loc_1:XPainter = null;
            for each (_loc_1 in this.painters)
            {
                
                _loc_1.hideSmallSquare();
            }
            return;
        }// end function

        private function onXpaintingMouseDown(event:MouseEvent = null) : void
        {
            var _loc_2:Point = null;
            var _loc_3:XPainter = null;
            if (event)
            {
                if (this.panel.hitTestPoint(event.stageX, event.stageY))
                {
                    return;
                }
                _loc_2 = new Point(event.stageX, event.stageY);
                if (!this.paintingArea.containsPoint(_loc_2))
                {
                    return;
                }
            }
            else
            {
                _loc_2 = new Point();
            }
            if (this.panel.parent)
            {
                if (this.painter)
                {
                    _loc_3 = this.painter;
                    this.painterLayer.addChild(_loc_3);
                    _loc_3.begingPaint(this.sensor, this._stage, new Rectangle(0, 0, this.paintingArea.width, this.paintingArea.height), super.globalToLocal(_loc_2));
                    if (this.painters.indexOf(_loc_3) == -1)
                    {
                        this.painters.push(_loc_3);
                    }
                    if (event)
                    {
                        event.stopPropagation();
                    }
                }
            }
            return;
        }// end function

        private function getPainter(param1:String) : XPainter
        {
            var _loc_2:XPainter = null;
            switch(param1)
            {
                case IconBase.CURSOR:
                {
                    _loc_2 = new NormalXPainter();
                    break;
                }
                case IconBase.SEGMENTLINE:
                {
                    _loc_2 = new LineSegmentXPainter();
                    break;
                }
                case IconBase.STRAIGHTLINE:
                {
                    _loc_2 = new StraightLineXPainter();
                    break;
                }
                case IconBase.PARALLELLINES:
                {
                    _loc_2 = new ParallelLinesXPainter();
                    break;
                }
                case IconBase.RECTANGLE:
                {
                    _loc_2 = new RectangleXPainter();
                    break;
                }
                case IconBase.PERIODLINES:
                {
                    _loc_2 = new PeriodLinesXPainter();
                    break;
                }
                case IconBase.FIBONACCILINES:
                {
                    _loc_2 = new FibonacciLinesXPainter();
                    break;
                }
                case IconBase.UPMARK:
                {
                    _loc_2 = new UpMarkXPainter();
                    break;
                }
                case IconBase.DOWNMARK:
                {
                    _loc_2 = new DownMarkXPainter();
                    break;
                }
                case IconBase.GOLDENCUTLINES:
                {
                    _loc_2 = new GoldenCutLinesXPainter();
                    break;
                }
                case IconBase.PERCENTLINES:
                {
                    _loc_2 = new PercentLinesXPainter();
                    break;
                }
                case IconBase.BANDLINES:
                {
                    _loc_2 = new BandLinesXPainter();
                    break;
                }
                case IconBase.TEXTCOMMENT:
                {
                    _loc_2 = new TextCommentXPainter();
                    break;
                }
                case IconBase.PICTURESHOT:
                {
                    _loc_2 = new PictureShotXPainter();
                    break;
                }
                default:
                {
                    _loc_2 = new XPainter();
                    break;
                    break;
                }
            }
            this.newPainter = true;
            _loc_2.addEventListener(XPaintingEvent.ENDPAINTER, this.onEndPainter, false, 0, true);
            return _loc_2;
        }// end function

        private function init() : void
        {
            this.painters = [];
            this.painterLayer = new Sprite();
            super.addChild(this.painterLayer);
            super.addChild(this.getMask());
            this.sensor.addEventListener(MouseEvent.MOUSE_DOWN, this.onXpaintingMouseDown);
            this.sensor.addEventListener(MouseEvent.CLICK, this.onXpaintingMouseDown);
            this.panel.addEventListener(XPaintingEvent.ICONSELECTED, this.onSelected);
            return;
        }// end function

        private function onSelected(event:XPaintingEvent) : void
        {
            if (!event.icon || this._type == event.icon.type)
            {
                return;
            }
            this._type = event.icon.type;
            if (this.painter)
            {
                this.painter.removeEventListener(XPaintingEvent.ENDPAINTER, this.onEndPainter);
            }
            this.painter = null;
            if (this._type == IconBase.CURSOR)
            {
                this.painter = null;
            }
            else if (this._type == IconBase.PICTURESHOT)
            {
                if (this._fsHold)
                {
                    if (this.panel)
                    {
                        this.panel.setDefault();
                    }
                }
                else
                {
                    this.painter = this.getPainter(this._type);
                    this.painter.begingPaint(this.sensor, this._stage, new Rectangle(0, 0, this._stage.width, this._stage.height), new Point(0, 0));
                    this.panel.removeFromStage();
                }
            }
            else if (this._type == IconBase.REMOVELINES)
            {
                this.remove();
                if (this.panel)
                {
                    this.panel.setDefault();
                }
            }
            else if (this._type == IconBase.TEXTCOMMENT && this.parent.stage.displayState != "normal")
            {
                if (this.panel)
                {
                    this.panel.setDefault();
                }
            }
            else
            {
                this.painter = this.getPainter(this._type);
            }
            return;
        }// end function

        private function onFs(event:Event) : void
        {
            var e:* = event;
            if (stage && stage.displayState == "fullScreen")
            {
                this._fsHold = true;
                clearTimeout(this._fsHoldId);
                this._fsHoldId = setTimeout(function () : void
            {
                _fsHold = false;
                return;
            }// end function
            , 5000);
                if (this._type == IconBase.TEXTCOMMENT)
                {
                    if (this.panel)
                    {
                        this.panel.setDefault();
                    }
                }
            }
            else
            {
                clearTimeout(this._fsHoldId);
                this._fsHold = false;
            }
            return;
        }// end function

        private function remove() : void
        {
            var _loc_1:XPainter = null;
            if (this.newPainter)
            {
                _loc_1 = this.painters.pop();
                if (_loc_1)
                {
                    _loc_1.destroy();
                }
            }
            else
            {
                this.removeAll();
            }
            return;
        }// end function

        private function getMask() : Sprite
        {
            var _loc_1:* = new Sprite();
            _loc_1.graphics.beginFill(16777215, 0);
            _loc_1.graphics.drawRect(0, 0, this.paintingArea.width, this.paintingArea.height);
            _loc_1.graphics.endFill();
            super.mask = _loc_1;
            return _loc_1;
        }// end function

        private function onEndPainter(event:XPaintingEvent) : void
        {
            event.currentTarget.removeEventListener(XPaintingEvent.ENDPAINTER, this.onEndPainter);
            if (this.panel)
            {
                this.panel.setDefault();
                if (!this.panel.parent)
                {
                    this.panel.addToStage();
                }
            }
            return;
        }// end function

        private function removeAll() : void
        {
            var _loc_1:* = this.painters.pop();
            while (_loc_1)
            {
                
                _loc_1.destroy();
                _loc_1 = this.painters.pop();
            }
            return;
        }// end function

    }
}
