package com.sina.finance.data
{
    import flash.events.*;
    import flash.net.*;
    
    import hsuan.*;

    public class DataTool extends Object
    {
        private var _timeArray:Array;
        private const B64CHARS:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        private var _cfg:Config;
        private static var _instance:DataTool;

        public function DataTool()
        {
            this._cfg = Config.getInstance();
        }

        public function isSameDay_date(param1:Date, param2:Date) : Boolean
        {
            if (param1 == null || param2 == null)
            {
                return false;
            }
            return param1.fullYear == param2.fullYear ? (param1.month == param2.month ? (param1.date == param2.date) : (false)) : (false);
        }

        public function adjustHighLow(param1:Number, param2:Number, param3:int, param4:Boolean = false) : Array
        {
            var _loc_7:Array = null;
            var _loc_10:Number = NaN;
            var _loc_11:Number = NaN;
            var _loc_12:Number = NaN;
            var _loc_13:Number = NaN;
            var _loc_14:Number = NaN;
            var _loc_15:Number = NaN;
            var _loc_16:Number = NaN;
            var _loc_17:Number = NaN;
            var _loc_18:Number = NaN;
            var _loc_19:uint = 0;
            var _loc_20:String = null;
            var _loc_21:String = null;
            var _loc_22:uint = 0;
            var _loc_23:uint = 0;
            var _loc_24:Number = NaN;
            var _loc_25:Number = NaN;
            var _loc_26:Number = NaN;
            var _loc_27:Number = NaN;
            var _loc_28:Number = NaN;
            var _loc_5:Number = -1e-006;
            var _loc_6:* = (param2 + param1) / 2;
            if (param4)
            {
                _loc_7 = [4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20];
            }
            else
            {
                _loc_7 = [4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20];
            }
            var _loc_8:Array = [1, 2, 3, 4, 5, 6, 8];
            var _loc_9:Boolean = false;
            for each (_loc_22 in _loc_7)
            {
                
                _loc_16 = (param1 - param2) / _loc_22;
                _loc_9 = false;
                _loc_17 = Math.pow(10, -param3);
                while (!_loc_9)
                {
                    
                    for each (_loc_23 in _loc_8)
                    {
                        
                        _loc_10 = _loc_17 * _loc_23;
                        if (_loc_10 - _loc_16 > _loc_5)
                        {
                            if (_loc_22 % 2 == 0)
                            {
                                _loc_11 = Math.round(_loc_6 / _loc_10) * _loc_10;
                                _loc_20 = (_loc_11 + _loc_22 / 2 * _loc_10).toFixed(5);
                                _loc_21 = (_loc_11 - _loc_22 / 2 * _loc_10).toFixed(5);
                            }
                            else
                            {
                                _loc_11 = Math.round((_loc_6 + _loc_10 / 2) / _loc_10) * _loc_10;
                                _loc_20 = (_loc_11 + (_loc_22 - 1) / 2 * _loc_10).toFixed(5);
                                _loc_21 = (_loc_11 - (_loc_22 + 1) / 2 * _loc_10).toFixed(5);
                            }
                            _loc_12 = Number(_loc_20);
                            _loc_13 = Number(_loc_21);
                            if (_loc_12 - param1 > _loc_5 && _loc_13 - param2 < _loc_5)
                            {
                                _loc_9 = true;
                                if (_loc_13 < 0)
                                {
                                    _loc_12 = _loc_12 - _loc_13;
                                    _loc_13 = 0;
                                }
                                if (!_loc_18)
                                {
                                    _loc_18 = _loc_12 - _loc_13;
                                    _loc_14 = _loc_12;
                                    _loc_15 = _loc_13;
                                    _loc_19 = _loc_22;
                                    break;
                                }
                                _loc_24 = (_loc_12 - _loc_13) / this.narrowCount(_loc_22);
                                if (Math.round(_loc_24 * 100) != 1 && Math.round(_loc_24 * 10) != 1)
                                {
                                    if (this.notRightNum(_loc_24))
                                    {
                                        break;
                                    }
                                }
                                if (_loc_12 - _loc_13 > _loc_18)
                                {
                                    break;
                                }
                                else if (_loc_12 - _loc_13 == _loc_18)
                                {
                                    _loc_25 = _loc_14 - param1;
                                    _loc_26 = param2 - _loc_15;
                                    _loc_27 = Math.abs(_loc_25 - _loc_26);
                                    _loc_25 = _loc_12 - param1;
                                    _loc_26 = param2 - _loc_13;
                                    _loc_28 = Math.abs(_loc_25 - _loc_26);
                                    if (_loc_28 >= _loc_27)
                                    {
                                        break;
                                    }
                                    else if (_loc_28 == _loc_27 && _loc_19 == 4)
                                    {
                                    }
                                }
                                if (this.notRightNum(_loc_12))
                                {
                                    break;
                                }
                                if (this.notRightNum(_loc_13))
                                {
                                    break;
                                }
                                _loc_18 = _loc_12 - _loc_13;
                                _loc_14 = _loc_12;
                                _loc_15 = _loc_13;
                                _loc_19 = _loc_22;
                                break;
                            }
                        }
                    }
                    _loc_17 = _loc_17 * 10;
                }
            }
            _loc_19 = this.narrowCount(_loc_19, param4);
            return [_loc_14, _loc_15, _loc_19];
        }

        public function isSameWeek(param1:Date, param2:Date) : Boolean
        {
            var _loc_3:Number = 604800000;
            var _loc_4:Number = 259200000;
            var _loc_5:* = (param1.time - _loc_4) / _loc_3;
            var _loc_6:* = (param2.time - _loc_4) / _loc_3;
            return Math.floor(_loc_5) == Math.floor(_loc_6);
        }

        public function setTimeLableForOneDay(param1:Array) : Array
        {
            if (!param1 || param1.length != 242)
            {
                return param1;
            }
            var _loc_2:* = this.getTimeArray();
            var _loc_3:uint = 0;
            while (_loc_3 < 242)
            {
                
                param1[_loc_3].time = _loc_2[_loc_3];
                _loc_3 = _loc_3 + 1;
            }
            param1[0].date.hours = 0;
            return param1;
        }

        public function getDatesFromHx(param1:String, param2:Date) : Array
        {
            var _loc_8:Date = null;
            if (!param1 || param1.length < 1 || !param2)
            {
                return null;
            }
            var _loc_3:* = this.S_KLC_D(param1);
            var _loc_4:* = this.cloneDate(param2);
            var _loc_5:* = new Date(_loc_4.fullYear - 3, _loc_4.month, _loc_4.date);
            var _loc_6:uint = 0;
            var _loc_7:uint = 0;
            var _loc_9:* = _loc_3.length;
            var _loc_10:int = 0;
            while (_loc_10 < _loc_9)
            {
                
                _loc_8 = _loc_3[_loc_10];
                if (_loc_8.time <= _loc_5.time && _loc_3[(_loc_10 + 1)].time >= _loc_5.time)
                {
                    _loc_6 = _loc_10;
                }
                if (_loc_8.fullYear == _loc_4.fullYear && _loc_8.month == _loc_4.month && _loc_8.date == _loc_4.date)
                {
                    _loc_7 = _loc_10 + 1;
                }
                _loc_10++;
            }
            return _loc_3.slice(_loc_6, _loc_7);
        }

        private function char2b64(param1:String) : uint
        {
            param1 = param1.replace(" ", "+");
            var _loc_2:* = this.B64CHARS.indexOf(param1);
            return _loc_2 >= 0 ? (_loc_2) : (0);
        }

        public function getTypeVonSymbol(param1:String) : String
        {
            if (/^((sh000)|(sz39))\d*/.test(param1))
            {
                return "i";
            }
            if (/^((sh60)|(sz[03]0))\d*/.test(param1))
            {
                return "a";
            }
            if (/^((sh900)|(sz20))\d*/.test(param1))
            {
                return "b";
            }
            if (/^(sz1[56])|(sh5[0-2])\d*/.test(param1))
            {
                return "f";
            }
            if (/^sh58\d*/.test(param1))
            {
                return "w";
            }
            return "";
        }

        public function b64arrayFormat(param1:Array, param2:Boolean) : Array
        {
            var _loc_9:Number = NaN;
            var _loc_3:* = this._cfg.isBond ? (10) : (100);
            var _loc_4:Array = [];
            var _loc_5:* = this.getTimeArray();
            var _loc_6:Number = 0;
            var _loc_7:Number = 0;
            var _loc_8:uint = 0;
            var _loc_10:int = 0;
            while (_loc_10 < 726)
            {
                
                _loc_8 = Math.floor(_loc_10 / 3);
                if (param2)
                {
                    _loc_4.push({time:_loc_5[_loc_8], price:param1[(_loc_10 + 1)] / 1000});
                }
                else
                {
                    _loc_4.push({time:_loc_5[_loc_8], avg_price:param1[_loc_10] / 1000, price:param1[(_loc_10 + 1)] / 1000, volume:param1[_loc_10 + 2] / _loc_3});
                    if (_loc_4[_loc_8].volume > 0)
                    {
                        _loc_7 = _loc_7 + _loc_4[_loc_8].volume;
                    }
                    if (_loc_4[_loc_8].avg_price > 0)
                    {
                        _loc_9 = _loc_4[_loc_8].avg_price;
                    }
                }
                _loc_10 = _loc_10 + 3;
            }
            if (_loc_4[0].price < 0)
            {
                var _loc_11:int = 0;
                _loc_6 = 0;
                var _loc_11:* = _loc_11;
                _loc_7 = _loc_11;
                var _loc_11:* = _loc_11;
                _loc_4[0].avg_price = _loc_11;
                _loc_4[0].price = _loc_11;
            }
            if (!param2)
            {
                _loc_4[0].totalVolume = _loc_7;
                _loc_4[0].totalAmount = _loc_7 * _loc_9;
            }
            return _loc_4;
        }

        public function calcVolumePosy(param1:Number, param2:Number) : Number
        {
            if (isNaN(param1) || param1 <= 0)
            {
                return (this._cfg.hVol - 1);
            }
            return this._cfg.hVol * (1 - param1 / param2);
        }

        public function loadDataFromUrl(param1:String, param2:Function, param3:Function = null, param4:Function = null, param5:Function = null, param6:Boolean = false) : void
        {
            var url:* = param1;
            var callBackFunc:* = param2;
            var httpFunc:* = param3;
            var ioErrFunc:* = param4;
            var secFunc:* = param5;
            var useBinary:* = param6;
            var loader:* = new URLLoaderWithReq();
            if (useBinary)
            {
                loader.dataFormat = URLLoaderDataFormat.BINARY;
            }
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrFunc || function (event:IOErrorEvent) : void
            {
                event.target.removeEventListener(event.type, arguments.callee);
                return;
            }
            );
            loader.addEventListener(Event.COMPLETE, callBackFunc);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, secFunc || function (event:SecurityErrorEvent) : void
            {
                event.target.removeEventListener(event.type, arguments.callee);
                _cfg.sendStatistic("flasherr.html?type=policyerr&url=" + url);
                return;
            }
            );
            loader.load(new URLRequest(url));
            return;
        }

        public function getTimeArray() : Array
        {
            var _loc_1:String = null;
            var _loc_2:String = null;
            var _loc_4:int = 0;
            if (this._timeArray == null)
            {
                this._timeArray = [];
            }
            else
            {
                return this._timeArray;
            }
            var _loc_3:int = 30;
            while (_loc_3 <= 59)
            {
                
                _loc_1 = "09:";
                this._timeArray.push(_loc_1 + _loc_3);
                _loc_3++;
            }
            _loc_3 = 10;
            while (_loc_3 <= 15)
            {
                
                _loc_1 = _loc_3.toString() + ":";
                if (_loc_3 == 12)
                {
                }
                else if (_loc_3 == 11)
                {
                    _loc_4 = 0;
                    while (_loc_4 <= 30)
                    {
                        
                        if (_loc_4 < 10)
                        {
                            _loc_2 = "0" + _loc_4.toString();
                        }
                        else
                        {
                            _loc_2 = _loc_4.toString();
                        }
                        this._timeArray.push(_loc_1 + _loc_2);
                        _loc_4++;
                    }
                }
                else if (_loc_3 == 15)
                {
                    this._timeArray.push("15:00");
                }
                else
                {
                    _loc_4 = 0;
                    while (_loc_4 < 60)
                    {
                        
                        if (_loc_4 < 10)
                        {
                            _loc_2 = "0" + _loc_4.toString();
                        }
                        else
                        {
                            _loc_2 = _loc_4.toString();
                        }
                        this._timeArray.push(_loc_1 + _loc_2);
                        _loc_4++;
                    }
                }
                _loc_3++;
            }
            return this._timeArray;
        }

        public function getSpaceTDataByDay(param1:uint, param2:Number, param3:Boolean = false) : Array
        {
            var _loc_4:Array = [];
            var _loc_5:* = this.getTimeArray();
            var _loc_6:int = 0;
            while (_loc_6 < param1 * 242)
            {
                
                _loc_4.push({time:_loc_5[_loc_6 % 242], price:0, percent:0, avg_price:0, volume:0});
                if (!param3)
                {
                    var _loc_7:* = param2;
                    _loc_4[_loc_6].avg_price = param2;
                    _loc_4[_loc_6].price = _loc_7;
                }
                _loc_6++;
            }
            var _loc_7:* = param2;
            _loc_4[0].prevclose = param2;
            var _loc_7:* = _loc_7;
            _loc_4[0].avg_price = _loc_7;
            _loc_4[0].price = _loc_7;
            _loc_4[0].volume = 0;
            _loc_4[0].totalVolume = 0;
            _loc_4[0].totalAmount = 0;
            return _loc_4;
        }

        public function dateObj2dateStr(param1:Date, param2:String = "-") : String
        {
            var _loc_3:Array = [param1.fullYear];
			var _loc_4:int = param1.month;
            if (++param1.month < 10)
            {
                _loc_3.push("0" + ++param1.month);
            }
            else
            {
                _loc_3.push(_loc_4);
            }
            var _loc_5:* = param1.date;
            if (param1.date < 10)
            {
                _loc_3.push("0" + _loc_5);
            }
            else
            {
                _loc_3.push(_loc_5);
            }
            return _loc_3.join(param2);
        }

        public function fixJsonStr(param1:String, param2:String = "[", param3:String = "]") : String
        {
            var _loc_4:* = param1.indexOf(param2);
            var _loc_5:* = param1.lastIndexOf(param3);
            _loc_5 = param1.lastIndexOf(param3) + param3.length;
            return param1.substring(_loc_4, _loc_5);
        }

        public function b642int32(param1:String) : Array
        {
            var _loc_3:int = 0;
            var _loc_4:int = 0;
            var _loc_5:int = 0;
            var _loc_6:int = 0;
            var _loc_7:int = 0;
            if (!param1)
            {
                return [];
            }
            var _loc_2:Array = [];
            _loc_7 = 0;
            _loc_5 = 0;
            _loc_3 = 0;
            while (_loc_3 < param1.length)
            {
                
                _loc_4 = this.char2b64(param1.charAt(_loc_3));
                _loc_6 = _loc_7 & 6 ? (_loc_7 & 7 ^ 7) : (5);
                _loc_5 = _loc_5 | _loc_4 >> 5 - _loc_6 << (_loc_7 ^ 7) - _loc_6;
                if (_loc_7 > 25)
                {
                    _loc_7 = _loc_7 - 32;
                    _loc_2.push(_loc_5);
                    _loc_5 = 0;
                }
                _loc_5 = _loc_5 | (_loc_4 & (1 << 5 - _loc_6) - 1) << (_loc_7 | 7) + 4 + _loc_6;
                _loc_7 = _loc_7 + 6;
                _loc_3++;
            }
            return _loc_2;
        }

        public function dateStr2dateObj(param1:String, param2:String = "-") : Date
        {
            var _loc_3:* = param1.split(param2);
            var _loc_4:* = int(_loc_3[0]);
            var _loc_5:* = int((_loc_3[1] - 1));
            var _loc_6:* = int(_loc_3[2]);
            return new Date(_loc_4, _loc_5, _loc_6);
        }
/*
        public function S_KLC_D(param1:String) : Array
        {
            var C:*;
            var z:*;
            var q:*;
            var h:*;
            var A:*;
            var i:*;
            var j:*;
            var w:*;
            var b:*;
            var s:*;
            var l:*;
            var p:*;
            var r:*;
            var f:*;
            var g:*;
            var t:*;
            var u:*;
            var e:*;
            var v:*;
            var c:*;
            var n:* = param1;
            var arguments:* = arguments;
            var k:* = ;
            b;
            s;
            l;
            p;
            r = ~(3 << 30);
            f = 1 << 30;
            g;
            t = Math;
            var o:* = function ()
            {
                var E:*;
                var D:*;
                E;
                while (E < 64)
                {
                    
                    p[E] = t.pow(2, E);
                    if (E < 26)
                    {
                        l[E] = x(E + 65);
                        l[E + 26] = x(E + 97);
                        if (E < 10)
                        {
                            l[E + 52] = x(E + 48);
                        }
                    }
                    E = (E + 1);
                }
                l.push("+", "/");
                l = l.join("");
                z = n.split("");
                q = z.length;
                E;
                while (E < q)
                {
                    
                    z[E] = l.indexOf(z[E]);
                    E = (E + 1);
                }
                h = {};
                var _loc_2:int = 0;
                j = 0;
                C = _loc_2;
                i = {};
                D = B([12, 6]);
                w = 63 ^ D[1];
                return {_1479:v, _136:e, _200:u, _139:c}["_" + D[0]] || function ()
                {
                    return [];
                }
                ;
            }
            ;
            var x:* = String.fromCharCode;
            var y:* = function (param1)
            {
                return param1 === {}._;
            }
            ;
            var a:* = function ()
            {
                var _loc_1:* = undefined;
                var _loc_2:* = undefined;
                _loc_1 = d();
                _loc_2 = 1;
                while (true)
                {
                    
                    if (d())
                    {
                        _loc_2 = _loc_2 + 1;
                        continue;
                    }
                    return _loc_2 * (_loc_1 * 2 - 1);
                }
                return;
            }
            ;
            var d:* = function ()
            {
                var _loc_1:* = undefined;
                if (C >= q)
                {
                    return 0;
                }
                _loc_1 = z[C] & 1 << j;
                var _loc_3:* = j + 1;
                j = _loc_3;
                if (j >= 6)
                {
                    j = j - 6;
                    var _loc_3:* = C + 1;
                    C = _loc_3;
                }
                return _loc_1;
            }
            ;
            var B:* = function (param1, param2, param3)
            {
                var _loc_4:* = undefined;
                var _loc_5:* = undefined;
                var _loc_6:* = undefined;
                var _loc_7:* = undefined;
                var _loc_8:* = undefined;
                _loc_5 = [];
                _loc_6 = 0;
                if (!param2)
                {
                    param2 = [];
                }
                if (!param3)
                {
                    param3 = [];
                }
                _loc_4 = 0;
                while (_loc_4 < param1.length)
                {
                    
                    _loc_7 = param1[_loc_4];
                    _loc_6 = 0;
                    if (!_loc_7)
                    {
                        _loc_5[_loc_4] = 0;
                    }
                    else
                    {
                        if (C >= q)
                        {
                            return _loc_5;
                        }
                        if (param1[_loc_4] <= 0)
                        {
                            _loc_6 = 0;
                        }
                        else if (param1[_loc_4] <= 30)
                        {
                            while (true)
                            {
                                
                                _loc_8 = 6 - j;
                                _loc_8 = _loc_8 < _loc_7 ? (_loc_8) : (_loc_7);
                                _loc_6 = _loc_6 | (z[C] >> j & (1 << _loc_8) - 1) << param1[_loc_4] - _loc_7;
                                j = j + _loc_8;
                                if (j >= 6)
                                {
                                    j = j - 6;
                                    var _loc_10:* = C + 1;
                                    C = _loc_10;
                                }
                                _loc_7 = _loc_7 - _loc_8;
                                if (_loc_7 <= 0)
                                {
                                    break;
                                }
                            }
                            if (param2[_loc_4] && _loc_6 >= p[(param1[_loc_4] - 1)])
                            {
                                _loc_6 = _loc_6 - p[param1[_loc_4]];
                            }
                        }
                        else
                        {
                            _loc_6 = B([30, param1[_loc_4] - 30], [0, param2[_loc_4]]);
                            if (!param3[_loc_4])
                            {
                                _loc_6 = _loc_6[0] + _loc_6[1] * p[30];
                            }
                        }
                        _loc_5[_loc_4] = _loc_6;
                    }
                    _loc_4 = _loc_4 + 1;
                }
                return _loc_5;
            }
            ;
            var m:* = function (param1)
            {
                var _loc_2:* = undefined;
                var _loc_3:* = undefined;
                var _loc_4:* = undefined;
                if (param1 > 1)
                {
                    _loc_2 = 0;
                }
                _loc_2 = 0;
                while (_loc_2 < param1)
                {
                    
                    var _loc_5:* = h;
                    var _loc_6:* = h.d + 1;
                    _loc_5.d = _loc_6;
                    _loc_4 = h.d % 7;
                    if (_loc_4 == 3 || _loc_4 == 4)
                    {
                        h.d = h.d + (5 - _loc_4);
                    }
                    _loc_2 = _loc_2 + 1;
                }
                _loc_3 = new Date();
                _loc_3.setTime((s + h.d) * b);
                return _loc_3;
            }
            ;
            u = function ()
            {
                var _loc_1:* = undefined;
                var _loc_2:* = undefined;
                var _loc_3:* = undefined;
                var _loc_4:* = undefined;
                var _loc_5:* = undefined;
                var _loc_6:* = undefined;
                if (w >= 1)
                {
                    return [];
                }
                h.d = B([18], [1])[0] - 1;
                _loc_4 = B([3, 3, 30, 6]);
                h.p = _loc_4[0];
                h.ld = _loc_4[1];
                h.cd = _loc_4[2];
                h.c = _loc_4[3];
                h.m = t.pow(10, h.p);
                h.pc = h.cd / h.m;
                _loc_3 = [];
                _loc_1 = 0;
                while (true)
                {
                    
                    _loc_5 = {d:1};
                    if (d())
                    {
                        _loc_4 = B([3])[0];
                        if (_loc_4 == 0)
                        {
                            _loc_5.d = B([6])[0];
                        }
                        else if (_loc_4 == 1)
                        {
                            h.d = B([18])[0];
                            _loc_5.d = 0;
                        }
                        else
                        {
                            _loc_5.d = _loc_4;
                        }
                    }
                    _loc_6 = {date:m(_loc_5.d)};
                    if (d())
                    {
                        h.ld = h.ld + a();
                    }
                    _loc_4 = B([h.ld * 3], [1]);
                    h.cd = h.cd + _loc_4[0];
                    _loc_6.close = h.cd / h.m;
                    _loc_3.push(_loc_6);
                    if (C >= q || C == (q - 1) && !((h.c ^ (_loc_1 + 1)) & 63))
                    {
                        break;
                    }
                    _loc_1 = _loc_1 + 1;
                }
                _loc_3[0].prevclose = h.pc;
                return _loc_3;
            }
            ;
            e = function ()
            {
                var _loc_1:* = undefined;
                var _loc_2:* = undefined;
                var _loc_3:* = undefined;
                var _loc_4:* = undefined;
                var _loc_5:* = undefined;
                var _loc_6:* = undefined;
                var _loc_7:* = undefined;
                var _loc_8:* = undefined;
                var _loc_9:* = undefined;
                var _loc_10:* = undefined;
                var _loc_11:* = undefined;
                if (w >= 2)
                {
                    return [];
                }
                _loc_7 = [];
                _loc_9 = {v:"volume", p:"price", a:"avg_price"};
                h.d = B([18], [1])[0] - 1;
                _loc_8 = {date:m(1)};
                _loc_3 = B(w < 1 ? ([3, 3, 4, 1, 1, 1, 5]) : ([4, 4, 4, 1, 1, 1, 3]));
                _loc_1 = 0;
                while (_loc_1 < 7)
                {
                    
                    h[["la", "lp", "lv", "tv", "rv", "zv", "pp"][_loc_1]] = _loc_3[_loc_1];
                    _loc_1 = _loc_1 + 1;
                }
                h.m = t.pow(10, h.pp);
                if (w >= 1)
                {
                    _loc_3 = B([3, 3]);
                    h.c = _loc_3[0];
                    _loc_3 = _loc_3[1];
                }
                else
                {
                    _loc_3 = 5;
                    h.c = 2;
                }
                h.pc = B([_loc_3 * 6])[0];
                _loc_8.pc = h.pc / h.m;
                h.cp = h.pc;
                h.da = 0;
                var _loc_12:int = 0;
                h.sv = 0;
                h.sa = _loc_12;
                _loc_1 = 0;
                while (true)
                {
                    
                    if (C >= q || C == (q - 1) && !((h.c ^ _loc_1) & 7))
                    {
                        break;
                    }
                    _loc_5 = {};
                    _loc_4 = {};
                    _loc_10 = h.tv ? (d()) : (1);
                    _loc_2 = 0;
                    while (_loc_2 < 3)
                    {
                        
                        _loc_11 = ["v", "p", "a"][_loc_2];
                        if (_loc_10 ? (d()) : (0))
                        {
                            _loc_3 = a();
                            h["l" + _loc_11] = h["l" + _loc_11] + _loc_3;
                        }
                        _loc_6 = _loc_11 == "v" && h.rv ? (d()) : (1);
                        _loc_3 = B([h["l" + _loc_11] * 3 + (_loc_11 == "v" ? (_loc_6 * 7) : (0))], [_loc_2])[0] * (_loc_6 ? (1) : (100));
                        _loc_4[_loc_11] = _loc_3;
                        if (_loc_11 == "v")
                        {
                            var _loc_12:* = _loc_3;
                            _loc_5[_loc_9[_loc_11]] = _loc_3;
                            if (!_loc_12 && _loc_1 < 241 && (h.zv ? (!d()) : (1)))
                            {
                                _loc_4.p = 0;
                                break;
                            }
                        }
                        else if (_loc_11 == "a")
                        {
                            h.da = (w < 1 ? (0) : (h.da)) + _loc_4.a;
                        }
                        _loc_2 = _loc_2 + 1;
                    }
                    h.sv = h.sv + _loc_4.v;
                    var _loc_12:* = h.cp + _loc_4.p;
                    h.cp = h.cp + _loc_4.p;
                    _loc_5[_loc_9.p] = _loc_12 / h.m;
                    h.sa = h.sa + _loc_4.v * h.cp;
                    _loc_5[_loc_9.a] = y(_loc_4.a) ? (_loc_1 ? (_loc_7[(_loc_1 - 1)][_loc_9.a]) : (_loc_5[_loc_9.p])) : (h.sv ? (((t.floor((h.sa * (2000 / h.m) + h.sv) / h.sv) >> 1) + h.da) / 1000) : (_loc_5[_loc_9.p] + h.da / 1000));
                    _loc_7.push(_loc_5);
                    _loc_1 = _loc_1 + 1;
                }
                _loc_7[0].date = _loc_8.date;
                _loc_7[0].prevclose = _loc_8.pc;
                return _loc_7;
            }
            ;
            v = function ()
            {
                var _loc_1:* = undefined;
                var _loc_2:* = undefined;
                var _loc_3:* = undefined;
                var _loc_4:* = undefined;
                var _loc_5:* = undefined;
                var _loc_6:* = undefined;
                var _loc_7:* = undefined;
                var _loc_8:* = undefined;
                if (w >= 1)
                {
                    return [];
                }
                h.lv = 0;
                h.ld = 0;
                h.cd = 0;
                h.cv = [0, 0];
                h.p = B([6])[0];
                h.d = B([18], [1])[0] - 1;
                h.m = t.pow(10, h.p);
                _loc_6 = B([3, 3]);
                h.md = _loc_6[0];
                h.mv = _loc_6[1];
                _loc_1 = [];
                while (true)
                {
                    
                    _loc_6 = B([6]);
                    if (!_loc_6.length)
                    {
                        break;
                    }
                    _loc_4 = {c:_loc_6[0]};
                    _loc_5 = {};
                    _loc_4.d = 1;
                    if (_loc_4.c & 32)
                    {
                        while (true)
                        {
                            
                            _loc_6 = B([6])[0];
                            if ((_loc_6 | 16) == 63)
                            {
                                _loc_8 = _loc_6 & 16 ? ("x") : ("u");
                                _loc_6 = B([3, 3]);
                                _loc_4[_loc_8 + "_d"] = _loc_6[0] + h.md;
                                _loc_4[_loc_8 + "_v"] = _loc_6[1] + h.mv;
                                break;
                                continue;
                            }
                            if (_loc_6 & 32)
                            {
                                _loc_7 = _loc_6 & 8 ? ("d") : ("v");
                                _loc_8 = _loc_6 & 16 ? ("x") : ("u");
                                _loc_4[_loc_8 + "_" + _loc_7] = (_loc_6 & 7) + h["m" + _loc_7];
                                break;
                                continue;
                            }
                            _loc_7 = _loc_6 & 15;
                            if (_loc_7 == 0)
                            {
                                _loc_4.d = B([6])[0];
                            }
                            else if (_loc_7 == 1)
                            {
                                var _loc_9:* = B([18])[0];
                                _loc_7 = B([18])[0];
                                h.d = _loc_9;
                                _loc_4.d = 0;
                            }
                            else
                            {
                                _loc_4.d = _loc_7;
                            }
                            if (!(_loc_6 & 16))
                            {
                                break;
                            }
                        }
                    }
                    _loc_5.date = m(_loc_4.d);
                    for (_loc_7 in {v:0, d:0})
                    {
                        
                        if (!y(_loc_4["x_" + _loc_7]))
                        {
                            h["l" + _loc_7] = _loc_4["x_" + _loc_7];
                        }
                        if (y(_loc_4["u_" + _loc_7]))
                        {
                            _loc_4["u_" + _loc_7] = h["l" + _loc_7];
                        }
                    }
                    _loc_4.l_l = [_loc_4.u_d, _loc_4.u_d, _loc_4.u_d, _loc_4.u_d, _loc_4.u_v];
                    _loc_8 = g[_loc_4.c & 15];
                    if (_loc_4.u_v & 1)
                    {
                        _loc_8 = 31 - _loc_8;
                    }
                    if (_loc_4.c & 16)
                    {
                        _loc_4.l_l[4] = _loc_4.l_l[4] + 2;
                    }
                    _loc_3 = 0;
                    while (_loc_3 < 5)
                    {
                        
                        if (_loc_8 & 1 << 4 - _loc_3)
                        {
                            var _loc_9:* = _loc_4.l_l;
                            var _loc_10:* = _loc_3;
                            var _loc_11:* = _loc_4.l_l[_loc_3] + 1;
                            _loc_9[_loc_10] = _loc_11;
                        }
                        _loc_4.l_l[_loc_3] = _loc_4.l_l[_loc_3] * 3;
                        _loc_3 = _loc_3 + 1;
                    }
                    _loc_4.d_v = B(_loc_4.l_l, [1, 0, 0, 1, 1], [0, 0, 0, 0, 1]);
                    _loc_7 = h.cd + _loc_4.d_v[0];
                    _loc_5.open = _loc_7 / h.m;
                    _loc_5.high = (_loc_7 + _loc_4.d_v[1]) / h.m;
                    _loc_5.low = (_loc_7 - _loc_4.d_v[2]) / h.m;
                    _loc_5.close = (_loc_7 + _loc_4.d_v[3]) / h.m;
                    _loc_6 = _loc_4.d_v[4];
                    if (typeof(_loc_6) == "number")
                    {
                        _loc_6 = [_loc_6, _loc_6 >= 0 ? (0) : (-1)];
                    }
                    h.cd = _loc_7 + _loc_4.d_v[3];
                    _loc_8 = h.cv[0] + _loc_6[0];
                    h.cv = [_loc_8 & r, h.cv[1] + _loc_6[1] + ((h.cv[0] & r) + (_loc_6[0] & r) & f)];
                    _loc_5.volume = (h.cv[0] & (f - 1)) + h.cv[1] * f;
                    _loc_1.push(_loc_5);
                }
                return _loc_1;
            }
            ;
            c = function ()
            {
                var _loc_1:* = undefined;
                var _loc_2:* = undefined;
                var _loc_3:* = undefined;
                var _loc_4:* = undefined;
                if (w > 1)
                {
                    return [];
                }
                h.l = 0;
                _loc_4 = -1;
                h.d = B([18])[0] - 1;
                _loc_3 = B([18])[0];
                while (h.d < _loc_3)
                {
                    
                    _loc_2 = m(1);
                    if (_loc_4 <= 0)
                    {
                        if (d())
                        {
                            h.l = h.l + a();
                        }
                        _loc_4 = B([h.l * 3], [0])[0] + 1;
                        if (!_loc_1)
                        {
                            _loc_1 = [_loc_2];
                            _loc_4 = _loc_4 - 1;
                        }
                    }
                    else
                    {
                        _loc_1.push(_loc_2);
                    }
                    _loc_4 = _loc_4 - 1;
                }
                return _loc_1;
            }
            ;
            return this.this.()();
        }

        public function volume2string(param1:Number, param2:Boolean = false) : String
        {
            var _loc_3:String = null;
            var _loc_4:String = "";
            if (param1 > 1000000000000)
            {
                _loc_3 = (param1 / 1000000000000).toFixed(0);
                _loc_4 = "万亿";
            }
            else if (param1 > 100000000)
            {
                _loc_3 = (param1 / 100000000).toFixed(2);
                _loc_4 = "亿";
            }
            else if (param1 > 100000)
            {
                _loc_3 = this._cfg.stockType == "i" ? ((param1 / 10000).toFixed(0)) : ((param1 / 10000).toFixed(2));
                _loc_4 = "万";
            }
            else if (param1 >= 1)
            {
                _loc_3 = param1.toFixed(0);
            }
            else
            {
                _loc_3 = "-";
            }
            if (param2)
            {
                return _loc_3 + _loc_4;
            }
            return _loc_3;
        }*/

        public function dateObj2dateStrUTC(param1:Date, param2:String = "-") : String
        {
            var _loc_3:Array = [param1.fullYearUTC];
            if (++param1.monthUTC < 10)
            {
                _loc_3.push("0" + ++param1.monthUTC);
            }
            else
            {
                _loc_3.push(_loc_4);
            }
            var _loc_5:* = param1.dateUTC;
            if (param1.dateUTC < 10)
            {
                _loc_3.push("0" + _loc_5);
            }
            else
            {
                _loc_3.push(_loc_5);
            }
            return _loc_3.join(param2);
        }

        public function cloneDate(param1:Date) : Date
        {
            return new Date(param1.fullYear, param1.month, param1.date);
        }

        public function isSameMonth(param1:Date, param2:Date) : Boolean
        {
            return param1.fullYear == param2.fullYear ? (param1.month == param2.month) : (false);
        }

        public function price2string(param1:Number, param2:uint = 2) : String
        {
            if (isNaN(param1) || param1 <= 0)
            {
                return "-";
            }
            if (param1 < 100000)
            {
                return param1.toFixed(param2);
            }
            if (param1 < 1000000)
            {
                return (param1 / 10000).toFixed(param2) + "万";
            }
            if (param1 < 10000000)
            {
                return (param1 / 1000000).toFixed(param2) + "百万";
            }
            if (param1 < 100000000)
            {
                return (param1 / 10000000).toFixed(param2) + "千万";
            }
            return (param1 / 100000000).toFixed(param2) + "亿";
        }

        private function narrowCount(param1:uint, param2:Boolean = false) : uint
        {
            if (param2)
            {
                while (param1 > 5)
                {
                    
                    if (param1 % 2 == 0)
                    {
                        param1 = param1 / 2;
                        continue;
                    }
                    if (param1 % 3 == 0)
                    {
                        param1 = param1 / 3;
                        continue;
                    }
                    break;
                }
            }
            else if (param1 > 9)
            {
                if (param1 % 3 == 0)
                {
                    param1 = param1 / 3;
                }
                else if (param1 % 4 == 0)
                {
                    param1 = param1 / 4;
                }
                else if (param1 % 2 == 0)
                {
                    param1 = param1 / 2;
                }
            }
            return param1;
        }

        public function calcPricePosy(param1:Number, param2:Number, param3:Number, param4:Number) : Number
        {
            if (isNaN(param1) || param1 <= param2)
            {
                return param4;
            }
            if (param1 >= param3)
            {
                return 1;
            }
            return Math.max(param4 * (1 - (param1 - param2) / (param3 - param2)), 1);
        }

        private function notRightNum(param1:Number) : Boolean
        {
            var _loc_2:* = uint(Math.round(param1 * 100));
            if (_loc_2 % 100 != 0)
            {
                if (_loc_2 % 10 == 0)
                {
                    _loc_2 = _loc_2 / 10;
                }
                if (_loc_2 % 5 != 0 && _loc_2 % 2 != 0)
                {
                    return true;
                }
            }
            return false;
        }

        public function isSameDay_str(param1:String, param2:String) : Boolean
        {
            if (param1 == param2)
            {
                return true;
            }
            var _loc_3:* = param1.split("-");
            var _loc_4:* = param2.split("-");
            if (_loc_3.length != 3 || _loc_4.length != 3)
            {
                return false;
            }
            if (Number(_loc_3[0]) == Number(_loc_4[0]) && Number(_loc_3[1]) == Number(_loc_4[1]) && Number(_loc_3[2]) == Number(_loc_4[2]))
            {
                return true;
            }
            return false;
        }

        public static function getInstance() : DataTool
        {
            if (_instance == null)
            {
				_instance = new DataTool();
            }
            return _instance;
        }

    }
}
