package stock.com.ui.elements.xpainting.painter
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import stock.com.ui.elements.xpainting.*;
    import stock.com.ui.elements.xpainting.painter.square.*;

    public class ParallelLinesXPainter extends XPainter
    {
        private var directP:Point;
        private const DEFAULT_DISTANCE:Number = 10;
        private var startSquare:SmallSquare;
        private var secondP:Point;
        private var startP:Point;
        private var distance:Number;

        public function ParallelLinesXPainter()
        {
            this.init();
            return;
        }// end function

        private function getSecondPoint(param1:Number) : Point
        {
            var _loc_2:* = Calculator.instance.calcNormalVector(this.directP, param1);
            if (!this.startP)
            {
                return new Point();
            }
            return new Point(this.startP.x + _loc_2.x, this.startP.y + _loc_2.y);
        }// end function

        private function init() : void
        {
            this.startSquare = new SmallSquare(6, controllableColor);
            super.addChild(this.startSquare);
            squares = [this.startSquare];
            this.directP = new Point(1, 0);
            this.distance = this.DEFAULT_DISTANCE;
            this.startSquare.addEventListener(MouseEvent.MOUSE_DOWN, this.onSquareDown, false, 0, true);
            return;
        }// end function

        override protected function beginListening() : void
        {
            sensor.addEventListener(MouseEvent.MOUSE_MOVE, this.onMove);
            sensor.addEventListener(MouseEvent.MOUSE_UP, this.onUp);
            _stage.addEventListener(Event.MOUSE_LEAVE, this.onLeave);
            return;
        }// end function

        private function onMove(event:MouseEvent) : void
        {
            var _loc_2:* = super.globalToLocal(new Point(event.stageX, event.stageY));
            this.directP.x = _loc_2.x - this.startP.x;
            this.directP.y = _loc_2.y - this.startP.y;
            this.secondP = this.getSecondPoint(this.distance);
            this.drawlines(this.startP, this.secondP);
            return;
        }// end function

        private function onLeave(event:Event) : void
        {
            this.endListening();
            endPaint();
            return;
        }// end function

        private function onUp(event:MouseEvent) : void
        {
            this.endListening();
            if (!super.mature)
            {
                sensor.addEventListener(MouseEvent.MOUSE_MOVE, this.onSecondMove);
                sensor.addEventListener(MouseEvent.MOUSE_DOWN, this.onSecondDown);
                _stage.addEventListener(Event.MOUSE_LEAVE, this.onLeave);
            }
            endPaint();
            return;
        }// end function

        private function onSquareDown(event:MouseEvent) : void
        {
            hideSmallSquare();
            this.beginListening();
            return;
        }// end function

        override public function begingPaint(param1:Sprite, param2:Stage, param3:Rectangle, param4:Point) : void
        {
            super.begingPaint(param1, param2, param3, param4);
            this.startP = param4;
            this.secondP = new Point(this.startP.x, this.startP.y + this.DEFAULT_DISTANCE);
            this.startSquare.x = this.startP.x;
            this.startSquare.y = this.startP.y;
            this.drawlines(this.startP, this.secondP);
            this.beginListening();
            return;
        }// end function

        private function onSecondMove(event:MouseEvent) : void
        {
            var _loc_2:* = super.globalToLocal(new Point(event.stageX - 4, event.stageY - 4));
            this.secondP.x = _loc_2.x;
            this.secondP.y = _loc_2.y;
            this.distance = Calculator.instance.calcLinesDistance(this.startP, this.secondP, new Point(this.directP.y, -this.directP.x));
            this.drawlines(this.startP, _loc_2);
            return;
        }// end function

        override protected function endListening() : void
        {
            sensor.removeEventListener(MouseEvent.MOUSE_MOVE, this.onMove);
            sensor.removeEventListener(MouseEvent.MOUSE_UP, this.onUp);
            _stage.removeEventListener(Event.MOUSE_LEAVE, this.onLeave);
            return;
        }// end function

        private function onSecondDown(event:MouseEvent) : void
        {
            sensor.removeEventListener(MouseEvent.MOUSE_MOVE, this.onSecondMove);
            sensor.removeEventListener(MouseEvent.MOUSE_DOWN, this.onSecondDown);
            _stage.removeEventListener(Event.MOUSE_LEAVE, this.onLeave);
            return;
        }// end function

        override public function destroy() : void
        {
            this.startSquare.removeEventListener(MouseEvent.MOUSE_DOWN, this.onSquareDown);
            this.startSquare = null;
            super.destroy();
            return;
        }// end function

        private function drawlines(param1:Point, param2:Point) : void
        {
            clearPaint();
            drawStraightLine(param1, this.directP, rect);
            drawStraightLine(param2, this.directP, rect);
            return;
        }// end function

    }
}
