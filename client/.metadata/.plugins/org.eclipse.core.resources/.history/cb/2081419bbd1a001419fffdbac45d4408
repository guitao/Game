package com.sina.finance.ui
{
    import __AS3__.vec.*;
    import com.sina.finance.data.*;
    import com.ui.*;
    import com.ui.dayKNews.*;
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.ui.*;
    import flash.utils.*;

    public class InteractiveMgr extends UIMgr
    {
        private var _priceTextsArr:Array;
        private var _wheeling:Boolean = false;
        private var _toNewsId:uint;
        private var _toNewsBtn:Sprite;
        private var _dashW:uint = 4;
        private var _percentContainer:Sprite;
        private var _maPriceInited:Boolean;
        private var _titleText:TextField;
        private var _timeBuf:Number;
        private var _rightNum:Number;
        private var _mapriceContainer:Sprite;
        private var _volumeTexts:Array;
        private var _globalDragging:Boolean = false;
        private var _timeContainer:Sprite;
        private var _maVolumeInited:Boolean;
        private var _curNewsDateArr:Array;
        private var _hisMark:Sprite;
        private var _maxComparePct:Number;
        private var _newsMarkArr:Array;
        private var _newsIndex:int;
        private var _volumeContainer:Sprite;
        private var _mouseClkArea:Shape;
        private var _percentText:TextField;
        private var _len:uint;
        private var _priceContainer:Sprite;
        private var _rsArr:Vector.<Number>;
        private var _maVTArr:Array;
        private var _maPTArr:Array;
        private var _isMoving:Boolean = false;
        private var _percentTexts:Array;
        private var _data:Object;
        private var _hideToNewsBtnId:int;
        private var _date:Date;
        private var _priceText:TextField;
        private var _timeTexts:Array;
        private var _msDownP:Point;
        private var _isPressing:Boolean = false;
        private const _TO_NEWS_W:uint = 128;
        private var _mark:Object;
        private var _minComparePct:Number;
        private const _TO_NEWS_H:uint = 20;
        private var _buf:Array;
        private var _dataObj:DataObjBase;
        private var _dateBuf:Date;
        private var _crossXLine:Sprite;
        private var _floaterObj:Object;
        public var globalDragHandler:Function;
        private var _index:uint;
        private var _msy:Number;
        private const _BASIC_TITLE_Y:int = -24;
        private var _toNewsT:TextField;
        private var _interactiveLayer:Sprite;
        private var _currentDatas:Array;
        private var _newsMarkLayer:Sprite;
        private var _mavolumeContainer:Sprite;
        private const _DASH_COLOR:uint = 10130836;

        public function InteractiveMgr(param1:DataMgr)
        {
            this._maPTArr = [];
            this._maVTArr = [];
            this._priceTextsArr = [];
            this._percentTexts = [];
            this._volumeTexts = [];
            this._timeTexts = [];
            this._floaterObj = {};
            this._newsMarkArr = [];
            this._msDownP = new Point(-1, -1);
            this._dateBuf = new Date();
            this._timeBuf = this._dateBuf.time;
            super(param1);
            if (stage)
            {
                this.init(null);
            }
            else
            {
                addEventListener(Event.ADDED_TO_STAGE, this.init);
            }
            return;
        }// end function

        private function floaterHandler() : void
        {
            var _loc_1:Number = NaN;
            var _loc_2:Number = NaN;
            var _loc_3:uint = 0;
            var _loc_4:uint = 0;
            if (_cfg.isDrawing || !_cfg.showFloater)
            {
                _cfg.floater.visible = false;
                return;
            }
            if (this._index >= this._len)
            {
                this._index = this._len - 1;
            }
            this._mark = _dataMgr.kdata.kdataObj.marks[this._index];
            this._data = _dataMgr.kdata.kdataObj.datas[this._index];
            this._floaterObj.date = this._data.date;
            this._floaterObj.open = this._mark.open;
            this._floaterObj.high = this._mark.high;
            this._floaterObj.low = this._mark.low;
            this._floaterObj.close = this._mark.close;
            this._floaterObj.percent = this._mark.percent;
            this._floaterObj.volume = this._mark.volume;
            if (!this._rsArr)
            {
                this._rsArr = _dataMgr.kdata.rsArr;
            }
            if (this._rsArr && this._rsArr.length > 0)
            {
                this._floaterObj.volumeNum = this._data.volume;
                _loc_1 = this._data.date.time;
                _loc_3 = 0;
                _loc_4 = this._rsArr.length;
                while (_loc_3 < _loc_4)
                {
                    
                    if (_loc_1 >= this._rsArr[_loc_3])
                    {
                        _loc_2 = this._rsArr[++_loc_3];
                        break;
                    }
                    else
                    {
                        _loc_3 = ++_loc_3 + 1;
                    }
                    _loc_3 = _loc_3 + 1;
                }
                if (!_loc_2)
                {
                    _loc_2 = this._rsArr[0];
                }
                this._floaterObj.capital = _loc_2;
            }
            _cfg.floater.setData(this._floaterObj);
            _cfg.floater.visible = true;
            return;
        }// end function

        private function dashLineFromTo(param1:Graphics, param2:Boolean, param3:Number, param4:Number, param5:Number, param6:Boolean = false) : void
        {
            var _loc_7:Number = NaN;
            var _loc_8:Number = NaN;
            if (param2)
            {
                _loc_7 = param3;
                while (_loc_7 < param4)
                {
                    
                    param1.moveTo(_loc_7, param5);
                    _loc_7 = _loc_7 + (param6 ? (2) : (this._dashW));
                    param1.lineTo(_loc_7, param5);
                    _loc_7 = _loc_7 + (param6 ? (2) : (this._dashW));
                }
            }
            else
            {
                _loc_8 = param3;
                while (_loc_8 < param4)
                {
                    
                    param1.moveTo(param5, _loc_8);
                    _loc_8 = _loc_8 + this._dashW;
                    param1.lineTo(param5, _loc_8);
                    _loc_8 = _loc_8 + this._dashW;
                }
            }
            return;
        }// end function

        private function _showNewsBtn(param1:int) : void
        {
            clearTimeout(this._toNewsId);
            return;
        }// end function

        private function setTitle(param1:Boolean = false) : void
        {
            var _loc_3:uint = 0;
            var _loc_4:String = null;
            var _loc_5:String = null;
            var _loc_2:Boolean = false;
            if (param1)
            {
                _loc_2 = _isTType ? (this._index >= _dataMgr.tdata.tdataObj.realLen) : (this._index >= (this._len - 1));
            }
            if (!_loc_2 && param1 && this._isMoving)
            {
                return;
            }
            if (param1)
            {
                this._index = uint.MAX_VALUE - 100000;
            }
            if (_isTType)
            {
                if (this._index > _dataMgr.tdata.tdataObj.realLen)
                {
                    this._index = _dataMgr.tdata.tdataObj.realLen;
                }
                this._mark = _dataMgr.tdata.tdataObj.marks[this._index];
                this._data = _dataMgr.tdata.tdataObj.datas[this._index];
                if (_id == 3)
                {
                    this._date = this._data.date;
                }
                else
                {
                    this._date = _dataMgr.tdata.tdataObj.datas[Math.floor(this._index / 242) * 242].date;
                }
                if (_dataMgr.comparing)
                {
                    this._buf = [this._date.fullYear, "/", this._date.month < 9 ? ("0" + (this._date.month + 1)) : ((this._date.month + 1)), "/", this._date.date < 10 ? ("0" + this._date.date) : (this._date.date), " ", this._data.time, " ", _dataMgr.tdata.hq.name, " ", this._mark.price, " ", this._mark.percent];
                    if (_dataMgr.cdatas.length > 1)
                    {
                        _loc_3 = 1;
                        while (_loc_3 < _dataMgr.cdatas.length)
                        {
                            
                            if (!TDataBase(_dataMgr.cdatas[_loc_3]).tdataObj)
                            {
                                return;
                            }
                            if (this._index > TDataBase(_dataMgr.cdatas[_loc_3]).tdataObj.realLen)
                            {
                                this._index = TDataBase(_dataMgr.cdatas[_loc_3]).tdataObj.realLen;
                            }
                            this._mark = TDataBase(_dataMgr.cdatas[_loc_3]).tdataObj.marks[this._index];
                            this._buf.push("  ");
                            this._buf.push(TDataBase(_dataMgr.cdatas[_loc_3]).hq.name);
                            this._buf.push(" ");
                            if (_dataMgr.cdatas.length == 2)
                            {
                                this._buf.push(this._mark.price);
                                this._buf.push(" ");
                            }
                            this._buf.push(this._mark.percent);
                            _loc_3 = _loc_3 + 1;
                        }
                    }
                }
                else
                {
                    this._buf = [this._date.fullYear, "/", this._date.month < 9 ? ("0" + (this._date.month + 1)) : ((this._date.month + 1)), "/", this._date.date < 10 ? ("0" + this._date.date) : (this._date.date), " ", this._data.time, "  价位:", this._mark.price, "  均价:", this._mark.avg_price, "  成交量:", this._mark.volume, "  涨幅:", this._mark.percent];
                }
            }
            else
            {
                if (this._index >= this._len)
                {
                    this._index = this._len - 1;
                }
                this._mark = _dataMgr.kdata.kdataObj.marks[this._index];
                this._data = _dataMgr.kdata.kdataObj.datas[this._index];
                _loc_5 = "";
                if (_cfg.reDirection == "f")
                {
                    _loc_5 = " <font color=\'#fa0200\'>[前复权]</font>";
                }
                else if (_cfg.reDirection == "b")
                {
                    _loc_5 = " <font color=\'#fa0200\'>[后复权]</font>";
                }
                if (this._data.time && this._data.time.length > 2)
                {
                    if (this._data.high >= 10000)
                    {
                        _loc_4 = this._data.day.substr(5);
                    }
                    else
                    {
                        _loc_4 = this._data.day;
                    }
                    this._buf = [_loc_4, " ", this._data.time, _loc_5, " 开:", this._mark.open, "  高:", this._mark.high, "  低:", this._mark.low, "  收:", this._mark.close, "  量:", this._mark.volume, "  幅:", this._mark.percent];
                }
                else
                {
                    this._buf = [this._data.day, _loc_5, " 开:", this._mark.open, "  高:", this._mark.high, "  低:", this._mark.low, "  收:", this._mark.close, "  量:", this._mark.volume, "  幅:", this._mark.percent];
                }
                this.setMAText(this._mark);
            }
            this._titleText.htmlText = this._buf.join("");
            addChild(this._titleText);
            return;
        }// end function

        private function init(event:Event) : void
        {
            var e:* = event;
            removeEventListener(Event.ADDED_TO_STAGE, this.init);
            stage.addEventListener(MouseEvent.MOUSE_WHEEL, this.onMsWheel);
            try
            {
                ExternalInterface.addCallback("jsMouseWheel", this.jsMouseWheel);
            }
            catch (err:Error)
            {
            }
            this._priceContainer = this.getSprite(-_cfg.posX, 0);
            this._percentContainer = this.getSprite(_cfg.TW, 0);
            this._volumeContainer = this.getSprite(-_cfg.posX, _cfg.hMain + _cfg.hTimeLb - 1);
            this._mapriceContainer = this.getSprite(0, _cfg.posY - _cfg.yMainLine);
            this._mavolumeContainer = this.getSprite(0, _cfg.hReal + _cfg.hTimeLb);
            this._timeContainer = this.getSprite(0, _cfg.hMain);
            this._crossXLine = this.getSprite(0, 0);
            this._priceText = this.getTextField(_cfg.cfontRise, _cfg.cblockTimeBar);
            this._percentText = this.getTextField(_cfg.cfontRise, _cfg.cblockTimeBar);
            this._initHisMark();
            this._titleText = this.getTextField(_cfg.LB_COLOR, 0, 12);
            this._titleText.x = 0;
            addChild(this._titleText);
            this.initInteractiveLayer();
            this._initNewsMarkLayer();
            _cfg.floater = new FloaterMe();
            this.initHitTestArea();
            return;
        }// end function

        private function setCrossLine() : void
        {
            this._crossXLine.graphics.clear();
            this._crossXLine.graphics.lineStyle(1, this._DASH_COLOR);
            this.dashLineFromTo(this._crossXLine.graphics, true, -1, _isTType ? (_cfg.TW) : (_cfg.KW), 0);
            this._crossXLine.visible = false;
            return;
        }// end function

        private function setTimeText(param1:Array, param2:Boolean) : void
        {
            var _loc_6:TextField = null;
            var _loc_7:uint = 0;
            var _loc_8:TextField = null;
            var _loc_3:* = _cfg.TW;
            var _loc_4:* = param1.length;
            while (this._timeContainer.numChildren < _loc_4)
            {
                
                _loc_6 = this.getTextField(_cfg.LB_COLOR, 0, 10);
                this._timeContainer.addChild(_loc_6);
                this._timeTexts.push(_loc_6);
            }
            while (this._timeContainer.numChildren > _loc_4)
            {
                
                _loc_7 = this._timeContainer.numChildren - 1;
                this._timeContainer.removeChildAt(_loc_7);
                delete this._timeTexts[_loc_7];
                this._timeTexts.pop();
            }
            var _loc_5:int = 0;
            while (_loc_5 < _loc_4)
            {
                
                _loc_8 = this._timeTexts[_loc_5];
                _loc_8.text = param1[_loc_5];
                _loc_8.y = 0;
                if (param2)
                {
                    _loc_8.x = (_loc_5 + 0.5) * _loc_3 / _loc_4 - _loc_8.width / 2;
                }
                else
                {
                    _loc_8.x = _loc_5 * _loc_3 / (_loc_4 - 1);
                    if (_loc_5 == 0)
                    {
                    }
                    else if (_loc_5 < (_loc_4 - 1))
                    {
                        _loc_8.x = _loc_8.x - _loc_8.width / 2;
                    }
                    else
                    {
                        _loc_8.x = _loc_8.x - _loc_8.width;
                    }
                }
                _loc_5++;
            }
            return;
        }// end function

        private function getTextField(param1:uint = 0, param2:uint = 0, param3:uint = 10, param4:String = "left") : TextField
        {
            var _loc_5:* = new TextField();
            new TextField().selectable = false;
            _loc_5.autoSize = param4;
            if (param2 > 0)
            {
                _loc_5.background = true;
                _loc_5.backgroundColor = param2;
            }
            else
            {
                _loc_5.background = false;
            }
            _loc_5.defaultTextFormat = new TextFormat("arial", param3, param1);
            return _loc_5;
        }// end function

        private function _newsCall(param1:Date, param2:String) : void
        {
            DisplayMgr(this.parent).showDayKNews(param1, this._curNewsDateArr);
            return;
        }// end function

        private function onMsOut(event:MouseEvent = null) : void
        {
            var _loc_2:Boolean = false;
            this._globalDragging = false;
            var _loc_2:* = _loc_2;
            this._isMoving = _loc_2;
            this._isPressing = _loc_2;
            if (event)
            {
                _cfg.barCtrl.removeStageListener();
            }
            Mouse.cursor = MouseCursor.AUTO;
            DisplayMgr(this.parent).interactiveEnd();
            this._crossXLine.visible = false;
            if (contains(this._titleText))
            {
                removeChild(this._titleText);
            }
            this.setTitle(true);
            return;
        }// end function

        public function drawNewsMarks(param1:Array) : void
        {
            var _loc_2:NewsMark = null;
            var _loc_4:Object = null;
            var _loc_6:uint = 0;
            this._curNewsDateArr = param1;
            var _loc_3:* = param1.length;
            while (this._newsMarkLayer.numChildren < _loc_3)
            {
                
                _loc_2 = new NewsMark(this._newsCall);
                this._newsMarkLayer.addChild(_loc_2);
                this._newsMarkArr[this._newsMarkArr.length] = _loc_2;
            }
            while (this._newsMarkLayer.numChildren > _loc_3)
            {
                
                _loc_6 = this._newsMarkLayer.numChildren - 1;
                _loc_2 = NewsMark(this._newsMarkLayer.removeChildAt(_loc_6));
                _loc_2.clear();
                delete this._newsMarkArr[_loc_6];
                var _loc_7:* = this._newsMarkArr;
                var _loc_8:* = this._newsMarkArr.length - 1;
                _loc_7.length = _loc_8;
            }
            var _loc_5:uint = 0;
            while (_loc_5 < _loc_3)
            {
                
                _loc_4 = param1[_loc_5];
                _loc_2 = this._newsMarkArr[_loc_5];
                _loc_2.x = _loc_4.x;
                _loc_2.dStr = _dataTool.dateObj2dateStr(_loc_4.d);
                _loc_2.date = _loc_4.d;
                _loc_2.type = _loc_4.t;
                _loc_5 = _loc_5 + 1;
            }
            return;
        }// end function

        private function onKbDown(event:KeyboardEvent) : void
        {
            if (stage && stage.focus is TextField)
            {
                return;
            }
            var _loc_2:* = event.keyCode;
            if (_loc_2 == 37 || _loc_2 == 100 || _loc_2 == 65 || _loc_2 == 74)
            {
                this._isMoving = true;
                var _loc_3:String = this;
                var _loc_4:* = this._index - 1;
                _loc_3._index = _loc_4;
            }
            else if (_loc_2 == 39 || _loc_2 == 102 || _loc_2 == 68 || _loc_2 == 76)
            {
                this._isMoving = true;
                var _loc_3:String = this;
                var _loc_4:* = this._index + 1;
                _loc_3._index = _loc_4;
                if (!_isTType && this._index >= this._len)
                {
                    this._index = 0;
                }
                else if (_isTType && this._index > _dataMgr.tdata.tdataObj.realLen)
                {
                    this._index = 0;
                }
            }
            else if (_loc_2 == 40 || _loc_2 == 83 || _loc_2 == 98 || _loc_2 == 75)
            {
                if (!_isTType)
                {
                    DisplayMgr(this.parent).barController.showMoreOrLess(true);
                    this.onMsOut(null);
                    return;
                }
            }
            else if (_loc_2 == 38 || _loc_2 == 104 || _loc_2 == 87 || _loc_2 == 73)
            {
                if (!_isTType)
                {
                    DisplayMgr(this.parent).barController.showMoreOrLess(false);
                    this.onMsOut(null);
                    return;
                }
            }
            else
            {
                return;
            }
            this.setTitle();
            DisplayMgr(this.parent).interactiveTo(this._index);
            if (!_isTType)
            {
                this.floaterHandler();
            }
            return;
        }// end function

        private function _initNewsMarkLayer() : void
        {
            this._newsMarkLayer = new Sprite();
            addChild(this._newsMarkLayer);
            return;
        }// end function

        private function msDown(event:MouseEvent) : void
        {
            this._isPressing = true;
            this._msDownP.x = mouseX;
            this._msDownP.y = mouseY;
            return;
        }// end function

        private function setVolumeText(param1:Number, param2:Number = 5) : void
        {
            var _loc_4:TextField = null;
            var _loc_5:uint = 0;
            var _loc_6:Number = NaN;
            var _loc_7:TextField = null;
            var _loc_8:String = null;
            while (this._volumeContainer.numChildren < param2)
            {
                
                _loc_4 = this.getTextField(8421504, 0, 10, "right");
                this._volumeContainer.addChild(_loc_4);
                this._volumeTexts.push(_loc_4);
            }
            while (this._volumeContainer.numChildren > param2)
            {
                
                _loc_5 = this._volumeContainer.numChildren - 1;
                this._volumeContainer.removeChildAt(_loc_5);
                delete this._volumeTexts[_loc_5];
                this._volumeTexts.pop();
            }
            var _loc_3:int = 0;
            while (_loc_3 < param2)
            {
                
                _loc_6 = param1 - _loc_3 * param1 / (param2 - 1);
                _loc_7 = this._volumeTexts[_loc_3];
                if (param1 > 1000000000000)
                {
                    _loc_8 = (_loc_6 / 1000000000000).toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "x万亿";
                    }
                }
                else if (param1 > 1000000000)
                {
                    _loc_8 = (_loc_6 / 100000000).toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "x亿";
                    }
                }
                else if (param1 > 10000000)
                {
                    _loc_8 = (_loc_6 / 1000000).toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "x百万";
                    }
                }
                else if (param1 > 100000)
                {
                    _loc_8 = (_loc_6 / 10000).toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "x万";
                    }
                }
                else if (param1 <= 1)
                {
                    _loc_8 = _loc_6.toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "0";
                    }
                }
                else
                {
                    _loc_8 = _loc_6.toFixed(0);
                    if (_loc_3 == (param2 - 1))
                    {
                        _loc_8 = "0";
                    }
                }
                _loc_7.text = _loc_8;
                _loc_7.x = _cfg.posX - _loc_7.width;
                _loc_7.y = _loc_3 * _cfg.hVol / (param2 - 1);
                _loc_7.y = _loc_7.y - _loc_7.height * 0.5;
                _loc_3++;
            }
            return;
        }// end function

        private function setPercentText(param1:Array, param2:Boolean = false) : void
        {
            var _loc_7:uint = 0;
            var _loc_8:String = null;
            var _loc_10:TextField = null;
            var _loc_11:uint = 0;
            var _loc_12:TextField = null;
            var _loc_3:* = param1.length;
            while (this._percentContainer.numChildren < _loc_3)
            {
                
                _loc_10 = this.getTextField(_cfg.cfontRise);
                this._percentContainer.addChild(_loc_10);
                this._percentTexts.push(_loc_10);
            }
            while (this._percentContainer.numChildren > _loc_3)
            {
                
                _loc_11 = this._percentContainer.numChildren - 1;
                this._percentContainer.removeChildAt(_loc_11);
                delete this._percentTexts[_loc_11];
                this._percentTexts.pop();
            }
            var _loc_4:* = param2 ? (_cfg.hcompare) : (_cfg.hMain);
            var _loc_5:Number = 0;
            var _loc_6:* = _loc_4 / (_loc_3 - 1);
            var _loc_9:int = 0;
            while (_loc_9 < _loc_3)
            {
                
                _loc_12 = this._percentTexts[_loc_9];
                _loc_8 = (param1[_loc_9] * 100).toFixed(2) + "%";
                _loc_7 = _cfg.cfontFall;
                if (param1[_loc_9] > -1e-006 && param1[_loc_9] < 1e-006)
                {
                    _loc_7 = _cfg.cfontBlack;
                    _loc_8 = " 0";
                }
                else if (param1[_loc_9] > 0)
                {
                    _loc_7 = _cfg.cfontRise;
                    _loc_8 = " " + _loc_8;
                }
                _loc_12.textColor = _loc_7;
                _loc_12.text = _loc_8;
                _loc_12.x = 0;
                _loc_12.y = _loc_5 - _loc_12.height * 0.5;
                _loc_5 = _loc_5 + _loc_6;
                _loc_9++;
            }
            return;
        }// end function

        private function _toShowHisMark(param1:Boolean) : void
        {
            this._hisMark.visible = param1;
            return;
        }// end function

        private function onMsWheel(event:MouseEvent) : void
        {
            this.mouseWheelHandler(event.delta > 0);
            return;
        }// end function

        private function volume2string(param1:Number, param2:Boolean = false) : String
        {
            var _loc_3:String = null;
            var _loc_4:String = "";
            if (param1 > 1000000000000)
            {
                _loc_3 = (param1 / 1000000000000).toFixed(2);
                _loc_4 = "万亿";
            }
            else if (param1 > 100000000)
            {
                _loc_3 = (param1 / 100000000).toFixed(2);
                _loc_4 = "亿";
            }
            else if (param1 > 10000000)
            {
                _loc_3 = (param1 / 1000000).toFixed(2);
                _loc_4 = "百万";
            }
            else if (param1 > 100000)
            {
                _loc_3 = (param1 / 10000).toFixed(2);
                _loc_4 = "万";
            }
            else if (param1 <= 1)
            {
                _loc_3 = param1.toFixed(2);
            }
            else
            {
                _loc_3 = param1.toFixed(0);
                _loc_4 = "";
            }
            if (param2)
            {
                return _loc_3 + _loc_4;
            }
            return _loc_3;
        }// end function

        override public function selectRangleReset() : void
        {
            var _loc_1:uint = 0;
            var _loc_2:Boolean = false;
            var _loc_3:uint = 0;
            if (_isTType)
            {
                this._currentDatas = _dataMgr.tdata.tdataObj.datas;
                if (this._currentDatas != null)
                {
                    this._len = this._currentDatas.length;
                }
                if (_dataMgr.comparing)
                {
                    this.setPercentText(_dataMgr.cdataPercents, true);
                    this._timeContainer.y = _cfg.hcompare;
                    this._minComparePct = _dataMgr.cdataPercents[(_dataMgr.cdataPercents.length - 1)];
                    this._maxComparePct = _dataMgr.cdataPercents[0];
                }
                else
                {
                    this.setPercentText(this.getTPercents(_dataMgr.tdata.tdataObj.labelMinP, _dataMgr.tdata.tdataObj.labelMaxP, _dataMgr.tdata.tdataObj.prevclose), false);
                    this.setPriceText(_dataMgr.tdata.tdataObj.labelMinP, _dataMgr.tdata.tdataObj.labelMaxP, _dataMgr.tdata.tdataObj.prevclose, false, 9);
                    this.setVolumeText(_dataMgr.tdata.tdataObj.labelMaxVol);
                    this._timeContainer.y = _cfg.hMain;
                }
                _loc_1 = this._dataObj.days;
                this.setTimeText(this._dataObj.dates, _id != 3 ? (_loc_1 != 1) : (false));
                if (_id == 3)
                {
                    this._toShowHisMark(false);
                    return;
                }
                _loc_2 = true;
                _loc_3 = 0;
                while (_loc_3 < _loc_1)
                {
                    
                    if (_dataTool.isSameDay_date(this._currentDatas[_loc_3 * 242].date, _dataMgr.tdata.hq.date))
                    {
                        _loc_2 = false;
                        break;
                    }
                    _loc_3 = _loc_3 + 1;
                }
                this._toShowHisMark(_loc_2);
            }
            else
            {
                this._currentDatas = _dataMgr.kdata.kdataObj.datas;
                if (this._currentDatas != null)
                {
                    this._len = this._currentDatas.length;
                }
                this.setPriceText(_dataMgr.kdata.kdataObj.labelMinP, _dataMgr.kdata.kdataObj.labelMaxP, 0, true, (_dataMgr.kdata.kdataObj.labelPriceCount + 1));
                this.setVolumeText(_dataMgr.kdata.kdataObj.labelMaxVol);
                while (this._timeContainer.numChildren)
                {
                    
                    this._timeContainer.removeChildAt(0);
                    this._timeTexts.pop();
                }
                this._timeContainer.y = _cfg.hMain;
            }
            if (_dataMgr.comparing)
            {
                setTimeout(this.setTitle, 500, true);
            }
            else
            {
                this.setTitle(true);
            }
            return;
        }// end function

        private function _initHisMark() : void
        {
            this._hisMark = new Sprite();
            this._hisMark.visible = false;
            addChild(this._hisMark);
            var _loc_1:uint = 37;
            var _loc_2:* = new TextField();
            _loc_2.selectable = false;
            _loc_2.width = _loc_1;
            _loc_2.height = 18;
            _loc_2.defaultTextFormat = new TextFormat("arial", 12, 16777215, null, null, null, null, null, "center");
            _loc_2.text = "历史";
            var _loc_3:* = new Shape();
            _loc_3.graphics.beginFill(2576294);
            _loc_3.graphics.drawRoundRect(0, 1, _loc_1, 18, 3, 3);
            _loc_3.graphics.endFill();
            this._hisMark.addChild(_loc_3);
            this._hisMark.addChild(_loc_2);
            this._hisMark.x = -_loc_1 - 3;
            return;
        }// end function

        private function getSprite(param1:Number, param2:Number) : Sprite
        {
            var _loc_3:* = new Sprite();
            var _loc_4:Boolean = false;
            _loc_3.mouseChildren = false;
            _loc_3.mouseEnabled = _loc_4;
            _loc_3.x = param1;
            _loc_3.y = param2;
            addChild(_loc_3);
            return _loc_3;
        }// end function

        private function _mouseMoveHandler(event:MouseEvent) : void
        {
            var _loc_2:uint = 0;
            var _loc_4:Number = NaN;
            var _loc_5:Boolean = false;
            var _loc_6:Boolean = false;
            if (this._isPressing)
            {
                this._crossXLine.visible = false;
                DisplayMgr(this.parent).interactiveEnd();
                if (this._globalDragging)
                {
                    return;
                }
                this._globalDragging = true;
                this.globalDragHandler(mouseX);
                return;
            }
            this._isMoving = true;
            this._msy = this._interactiveLayer.mouseY;
            this._crossXLine.y = this._msy;
            this._index = this._interactiveLayer.mouseX * (this._len < _cfg.NK ? (_cfg.NK) : (this._len)) / (_isTType ? (_cfg.TW) : (_cfg.KW));
            DisplayMgr(this.parent).interactiveTo(this._index);
            this.setTitle();
            if (!_isTType)
            {
                this.floaterHandler();
            }
            if (_isTType && _dataMgr.comparing)
            {
                if (this._msy > _cfg.hcompare)
                {
                    this._crossXLine.visible = false;
                }
                else
                {
                    this._crossXLine.visible = true;
                    this._rightNum = this._maxComparePct - this._msy / _cfg.hcompare * (this._maxComparePct - this._minComparePct);
                    _loc_2 = _cfg.cfontFall;
                    if (this._rightNum > 0)
                    {
                        _loc_2 = _cfg.cfontRise;
                    }
                    else if (this._rightNum == 0)
                    {
                        _loc_2 = _cfg.cfontBlack;
                    }
                    this._percentText.text = this.percent2string(this._rightNum);
                    this._percentText.textColor = _loc_2;
                }
                return;
            }
            var _loc_3:* = _isTType ? (_cfg.hMain) : (_cfg.hReal);
            if (this._msy > _loc_3 && this._msy < _loc_3 + _cfg.hTimeLb || this._msy > (_isTType ? (_cfg.hMTV) : ((_cfg.hRTV - 1))))
            {
                this._crossXLine.visible = false;
            }
            else
            {
                this._crossXLine.visible = true;
                _loc_4 = this._dataObj.labelMaxP - this._msy / _loc_3 * (this._dataObj.labelMaxP - this._dataObj.labelMinP);
                if (this._msy <= _loc_3)
                {
                    _loc_2 = _cfg.cfontFall;
                    if (!this._crossXLine.contains(this._percentText))
                    {
                        this._crossXLine.addChild(this._percentText);
                    }
                    if (_isTType)
                    {
                        if (_loc_4 > this._dataObj.prevclose)
                        {
                            _loc_2 = _cfg.cfontRise;
                        }
                        else if (_loc_4 == this._dataObj.prevclose)
                        {
                            _loc_2 = _cfg.cfontBlack;
                        }
                        this._rightNum = (_loc_4 - this._dataObj.prevclose) / this._dataObj.prevclose;
                        this._percentText.text = this.percent2string(this._rightNum);
                        this._percentText.textColor = _loc_2;
                        this._priceText.textColor = _loc_2;
                        this._priceText.text = _loc_4.toFixed(this._dataObj.hq.ppp);
                    }
                    else
                    {
                        _loc_2 = _cfg.cfontRise;
                        var _loc_7:* = _loc_2;
                        this._priceText.textColor = _loc_2;
                        this._percentText.textColor = _loc_7;
                        var _loc_7:* = _loc_4.toFixed(this._dataObj.hq.ppp);
                        this._priceText.text = _loc_4.toFixed(this._dataObj.hq.ppp);
                        this._percentText.text = _loc_7;
                    }
                }
                else if (this._msy < _cfg.hMTV)
                {
                    if (this._crossXLine.contains(this._percentText))
                    {
                        this._crossXLine.removeChild(this._percentText);
                    }
                    _loc_4 = this._dataObj.labelMaxVol * (1 - (this._msy - _loc_3 - _cfg.hTimeLb) / _cfg.hVol);
                    this._priceText.text = this.volume2string(_loc_4);
                    this._priceText.textColor = _cfg.cfontVolume;
                }
            }
            this._priceText.x = -this._priceText.width;
            this._mouseClkArea.x = mouseX;
            this._mouseClkArea.y = mouseY;
            if (!_isTType)
            {
                _loc_5 = _cfg.hExtMark ? (this._mouseClkArea.hitTestObject(_cfg.hExtMark)) : (false);
                _loc_6 = _cfg.lExtMark ? (this._mouseClkArea.hitTestObject(_cfg.lExtMark)) : (false);
                if (_loc_5 || _loc_6)
                {
                    Mouse.cursor = MouseCursor.BUTTON;
                    if (_loc_5)
                    {
                        _cfg.hExtMark.showDate(true);
                        if (_cfg.lExtMark)
                        {
                            _cfg.lExtMark.showDate(false);
                        }
                    }
                    else
                    {
                        if (_cfg.hExtMark)
                        {
                            _cfg.hExtMark.showDate(false);
                        }
                        _cfg.lExtMark.showDate(true);
                    }
                }
                else
                {
                    Mouse.cursor = MouseCursor.AUTO;
                    if (_cfg.hExtMark)
                    {
                        _cfg.hExtMark.showDate(false);
                    }
                    if (_cfg.lExtMark)
                    {
                        _cfg.lExtMark.showDate(false);
                    }
                }
            }
            else
            {
                Mouse.cursor = MouseCursor.AUTO;
            }
            return;
        }// end function

        private function initInteractiveLayer() : void
        {
            this._interactiveLayer = new Sprite();
            this._interactiveLayer.alpha = 0;
            this.locateInteractiveArea(true);
            this._interactiveLayer.addEventListener(MouseEvent.MOUSE_DOWN, this.msDown);
            this._interactiveLayer.addEventListener(MouseEvent.MOUSE_UP, this._msUp);
            this._interactiveLayer.addEventListener(MouseEvent.MOUSE_MOVE, this._mouseMoveHandler);
            this._interactiveLayer.addEventListener(MouseEvent.MOUSE_OUT, this.onMsOut);
            addChild(this._interactiveLayer);
            return;
        }// end function

        private function _msUp(event:MouseEvent) : void
        {
            var _loc_2:Boolean = false;
            this._globalDragging = false;
            this._isPressing = _loc_2;
            if (_isTType)
            {
                this._onDbClk();
                return;
            }
            this._mouseClkArea.x = mouseX;
            this._mouseClkArea.y = mouseY;
            if (this._mouseClkArea.hitTestObject(_cfg.hExtMark))
            {
                this._index = uint(_cfg.hExtMark.index);
            }
            else if (this._mouseClkArea.hitTestObject(_cfg.lExtMark))
            {
                this._index = uint(_cfg.lExtMark.index);
            }
            else
            {
                clearTimeout(this._toNewsId);
                this._onDbClk();
                if (_id != UrlHashDecoder.DAY_K_ID || this._msDownP.x != mouseX || this._msDownP.y != mouseY || mouseY >= _cfg.hReal)
                {
                    return;
                }
                this._toNewsId = setTimeout(this._showNewsBtn, 301, this._index);
                return;
            }
            this.setTitle();
            DisplayMgr(this.parent).interactiveTo(this._index);
            this.floaterHandler();
            return;
        }// end function

        override public function resize() : void
        {
            this._priceContainer.x = -_cfg.posX;
            this._priceContainer.y = 0;
            var _loc_1:* = _isTType ? (_cfg.TW) : (_cfg.KW);
            this._percentContainer.x = _isTType ? (_cfg.TW) : (_cfg.KW);
            this._percentText.x = _loc_1;
            this._percentContainer.y = 0;
            this._mapriceContainer.y = _cfg.posY - _cfg.yMainLine;
            this._mavolumeContainer.y = _cfg.hReal + _cfg.hTimeLb;
            this._volumeContainer.x = -_cfg.posX;
            this.locateInteractiveArea(_isTType);
            this.setCrossLine();
            return;
        }// end function

        private function initHitTestArea() : void
        {
            this._mouseClkArea = new Shape();
            this._mouseClkArea.graphics.beginFill(0, 0);
            this._mouseClkArea.graphics.drawCircle(0, 0, 1);
            this._mouseClkArea.graphics.endFill();
            addChild(this._mouseClkArea);
            return;
        }// end function

        private function setMAText(param1:Object) : void
        {
            var _loc_6:TextField = null;
            var _loc_7:TextField = null;
            var _loc_2:* = _cfg.getWorkingMAArr();
            var _loc_3:* = _loc_2[0];
            var _loc_4:* = _loc_2[1];
            var _loc_5:* = _loc_3.length;
            while (this._maPTArr.length < _loc_5)
            {
                
                var _loc_10:* = this.getTextField();
                this._maPTArr[this._maPTArr.length] = this.getTextField();
                _loc_6 = _loc_10;
                var _loc_10:* = this.getTextField();
                this._maVTArr[this._maVTArr.length] = this.getTextField();
                _loc_7 = _loc_10;
                this._mapriceContainer.addChild(_loc_6);
                this._mavolumeContainer.addChild(_loc_7);
            }
            while (this._maPTArr.length > _loc_5)
            {
                
                _loc_6 = this._maPTArr.pop();
                _loc_7 = this._maVTArr.pop();
                this._mapriceContainer.removeChild(_loc_6);
                this._mavolumeContainer.removeChild(_loc_7);
            }
            var _loc_8:* = _cfg.KW / _loc_5;
            var _loc_9:uint = 0;
            while (_loc_9 < _loc_5)
            {
                
                _loc_6 = TextField(this._maPTArr[_loc_9]);
                _loc_7 = TextField(this._maVTArr[_loc_9]);
                var _loc_10:int = -2;
                _loc_7.y = -2;
                _loc_6.y = _loc_10;
                var _loc_10:* = (_loc_8 - _loc_6.width) * 0.5 + _loc_8 * _loc_9;
                _loc_7.x = (_loc_8 - _loc_6.width) * 0.5 + _loc_8 * _loc_9;
                _loc_6.x = _loc_10;
                var _loc_10:* = _loc_4[_loc_9];
                _loc_7.textColor = _loc_4[_loc_9];
                _loc_6.textColor = _loc_10;
                _loc_6.text = "MA" + _loc_3[_loc_9] + ": " + param1["ma_price" + _loc_9];
                _loc_7.text = "MA" + _loc_3[_loc_9] + ": " + param1["ma_volume" + _loc_9];
                _loc_9 = _loc_9 + 1;
            }
            return;
        }// end function

        private function mouseWheelHandler(param1:Boolean) : void
        {
            var isUp:* = param1;
            if (this._wheeling)
            {
                return;
            }
            this._wheeling = true;
            DisplayMgr(this.parent).barController.showMoreOrLess(isUp);
            this.onMsOut(null);
            setTimeout(function () : void
            {
                _wheeling = false;
                return;
            }// end function
            , 50);
            return;
        }// end function

        private function onKbUp(event:KeyboardEvent) : void
        {
            this._isMoving = false;
            if (stage && stage.focus is TextField)
            {
                return;
            }
            if (event.keyCode == 13)
            {
                DisplayMgr(this.parent).dbClkHandle(this._index, true);
            }
            return;
        }// end function

        private function getTPercents(param1:Number, param2:Number, param3:Number) : Array
        {
            var _loc_4:Number = NaN;
            var _loc_5:Array = [];
            var _loc_6:uint = 9;
            var _loc_7:* = (param2 - param1) / (_loc_6 - 1);
            var _loc_8:uint = 0;
            while (_loc_8 < _loc_6)
            {
                
                _loc_4 = (param2 - _loc_7 * _loc_8 - param3) / param3;
                _loc_5[_loc_5.length] = _loc_4;
                _loc_8 = _loc_8 + 1;
            }
            return _loc_5;
        }// end function

        private function locateInteractiveArea(param1:Boolean = true) : void
        {
            this._interactiveLayer.graphics.clear();
            this._interactiveLayer.graphics.beginFill(0);
            if (param1)
            {
                this._titleText.y = this._BASIC_TITLE_Y;
                this._hisMark.y = this._BASIC_TITLE_Y - 1;
                this._interactiveLayer.graphics.drawRect(-1, 0, _cfg.TW + 2, _cfg.hMTV + _cfg.hindicator);
                this._volumeContainer.y = _cfg.hMain + _cfg.hTimeLb;
            }
            else
            {
                this._titleText.y = this._BASIC_TITLE_Y - _cfg.yMainLine + _cfg.posY;
                this._interactiveLayer.graphics.drawRect(-1, 0, _cfg.KW + 2, _cfg.hRTV + _cfg.hindicator);
                this._volumeContainer.y = _cfg.hReal + _cfg.hTimeLb - 1;
            }
            this._interactiveLayer.graphics.endFill();
            return;
        }// end function

        private function jsMouseWheel(param1:Number) : void
        {
            this.mouseWheelHandler(param1 > 0);
            return;
        }// end function

        private function setPriceText(param1:Number, param2:Number, param3:Number, param4:Boolean = false, param5:uint = 9) : void
        {
            var _loc_8:TextField = null;
            var _loc_9:uint = 0;
            var _loc_10:uint = 0;
            var _loc_11:Number = NaN;
            var _loc_12:String = null;
            var _loc_13:TextField = null;
            var _loc_14:uint = 0;
            var _loc_15:int = 0;
            var _loc_16:uint = 0;
            var _loc_17:Number = NaN;
            var _loc_18:int = 0;
            var _loc_19:int = 0;
            var _loc_20:Number = NaN;
            var _loc_21:uint = 0;
            var _loc_6:* = param4 ? (param5 * 2) : (param5);
            while (this._priceContainer.numChildren < _loc_6)
            {
                
                _loc_13 = this.getTextField(_cfg.clinePrice, 0, 10, "right");
                this._priceContainer.addChild(_loc_13);
                this._priceTextsArr[this._priceTextsArr.length] = _loc_13;
            }
            while (this._priceContainer.numChildren > _loc_6)
            {
                
                _loc_14 = this._priceContainer.numChildren - 1;
                this._priceContainer.removeChildAt(_loc_14);
                delete this._priceTextsArr[_loc_14];
                var _loc_22:* = this._priceTextsArr;
                var _loc_23:* = this._priceTextsArr.length - 1;
                _loc_22.length = _loc_23;
            }
            var _loc_7:* = _cfg.posX;
            if (param4)
            {
                _loc_10 = _cfg.hReal;
                _loc_15 = 0;
                _loc_9 = 0;
                while (_loc_9 < param5)
                {
                    
                    _loc_12 = (param2 - _loc_9 * (param2 - param1) / (param5 - 1)).toFixed(this._dataObj.hq.ppp);
                    _loc_11 = Number(_loc_12);
                    _loc_18 = String(_loc_11).indexOf(".");
                    if (_loc_18 > 0)
                    {
                        _loc_19 = int(String(_loc_11).substring((_loc_18 + 1)));
                        if (_loc_19 > _loc_15)
                        {
                            _loc_15 = _loc_19;
                        }
                    }
                    _loc_9 = _loc_9 + 1;
                }
                if (_loc_15 == 0)
                {
                    _loc_16 = 0;
                }
                else
                {
                    _loc_16 = param2 - param1 < 0.1 ? (2) : (_loc_15 < 10 ? (1) : (2));
                }
                _loc_9 = 0;
                while (_loc_9 < param5)
                {
                    
                    _loc_8 = this._priceTextsArr[_loc_9];
                    _loc_8.textColor = _cfg.cfontRise;
                    _loc_11 = param2 - _loc_9 * (param2 - param1) / (param5 - 1);
                    _loc_8.text = _loc_11.toFixed(_loc_16);
                    if (_loc_11 == 0)
                    {
                        _loc_8.text = "0";
                    }
                    _loc_12 = _loc_8.text;
                    _loc_8.x = _loc_7 - _loc_8.width;
                    _loc_17 = _loc_9 * _loc_10 / (param5 - 1) - _loc_8.height / 2;
                    _loc_8.y = _loc_17;
                    _loc_8 = this._priceTextsArr[_loc_9 + param5];
                    _loc_8.textColor = _cfg.cfontRise;
                    _loc_8.text = _loc_12;
                    _loc_8.x = _loc_7 + _cfg.KW + 1;
                    _loc_8.y = _loc_17;
                    _loc_9 = _loc_9 + 1;
                }
            }
            else
            {
                _loc_10 = _cfg.hMain;
                _loc_20 = (param2 - param1) / (param5 - 1);
                _loc_9 = 0;
                while (_loc_9 < param5)
                {
                    
                    _loc_8 = this._priceTextsArr[_loc_9];
                    _loc_12 = (param2 - _loc_9 * _loc_20).toFixed(this._dataObj.hq.ppp);
                    _loc_11 = Number(_loc_12);
                    _loc_21 = _cfg.cfontRise;
                    if (param1 == param3)
                    {
                        _loc_21 = _loc_9 == (param5 - 1) ? (_cfg.cfontBlack) : (_cfg.cfontRise);
                    }
                    else if (param2 == param3)
                    {
                        _loc_21 = _loc_9 == 0 ? (_cfg.cfontBlack) : (_cfg.cfontFall);
                    }
                    else
                    {
                        _loc_21 = _loc_11 == this._dataObj.prevclose ? (_cfg.cfontBlack) : (_loc_11 > this._dataObj.prevclose ? (_cfg.cfontRise) : (_cfg.cfontFall));
                    }
                    _loc_8.textColor = _loc_21;
                    _loc_8.text = _loc_12;
                    _loc_8.x = _loc_7 - _loc_8.width;
                    _loc_8.y = _loc_9 * _loc_10 / (param5 - 1) - _loc_8.height * 0.5;
                    _loc_9 = _loc_9 + 1;
                }
            }
            return;
        }// end function

        private function percent2string(param1:Number) : String
        {
            var _loc_2:String = "%";
            param1 = param1 * 100;
            var _loc_3:uint = 2;
            if (param1 > 0)
            {
                _loc_2 = " " + param1.toFixed(_loc_3) + _loc_2;
            }
            else if (param1 == 0)
            {
                _loc_2 = " 0";
            }
            else
            {
                _loc_2 = param1.toFixed(_loc_3) + _loc_2;
            }
            return _loc_2;
        }// end function

        private function _onDbClk(event:MouseEvent = null) : void
        {
            this._dateBuf = new Date();
            if (this._dateBuf.time - this._timeBuf > 300)
            {
                this._timeBuf = this._dateBuf.time;
                return;
            }
            DisplayMgr(this.parent).dbClkHandle(this._index);
            return;
        }// end function

        override public function setTypeId(param1:Boolean, param2:uint) : void
        {
            this.locateInteractiveArea(param1);
            _isTType = param1;
            _id = param2;
            this._timeContainer.y = _cfg.hMain;
            if (!this._crossXLine.contains(this._percentText))
            {
                this._crossXLine.addChild(this._percentText);
            }
            if (!this._crossXLine.contains(this._priceText))
            {
                this._crossXLine.addChild(this._priceText);
            }
            if (!contains(this._priceContainer))
            {
                addChildAt(this._priceContainer, 0);
            }
            if (!contains(this._volumeContainer))
            {
                addChildAt(this._volumeContainer, 0);
            }
            this.drawNewsMarks([]);
            if (param1)
            {
                this._dataObj = _dataMgr.tdata.tdataObj;
                this.setTimeText(this._dataObj.dates, this._dataObj.days != 1);
                if (!contains(this._percentContainer))
                {
                    addChildAt(this._percentContainer, 0);
                }
                if (contains(this._mapriceContainer))
                {
                    removeChild(this._mapriceContainer);
                }
                if (contains(this._mavolumeContainer))
                {
                    removeChild(this._mavolumeContainer);
                }
                if (contains(_cfg.floater))
                {
                    removeChild(_cfg.floater);
                }
                if (_dataMgr.comparing)
                {
                    if (contains(this._priceContainer))
                    {
                        removeChild(this._priceContainer);
                    }
                    if (contains(this._volumeContainer))
                    {
                        removeChild(this._volumeContainer);
                    }
                    if (this._crossXLine.contains(this._priceText))
                    {
                        this._crossXLine.removeChild(this._priceText);
                    }
                    this._timeContainer.y = _cfg.hcompare;
                    this._minComparePct = _dataMgr.cdataPercents[(_dataMgr.cdataPercents.length - 1)];
                    this._maxComparePct = _dataMgr.cdataPercents[0];
                }
            }
            else
            {
                this._toShowHisMark(false);
                this._dataObj = _dataMgr.kdata.kdataObj;
                if (contains(this._percentContainer))
                {
                    removeChild(this._percentContainer);
                }
                if (!contains(this._mapriceContainer))
                {
                    addChildAt(this._mapriceContainer, 0);
                }
                if (!contains(this._mavolumeContainer))
                {
                    addChild(this._mavolumeContainer);
                }
                _cfg.floater.visible = false;
                addChild(_cfg.floater);
            }
            this._currentDatas = this._dataObj.datas;
            if (this._currentDatas != null)
            {
                this._len = this._currentDatas.length;
            }
            this.setCrossLine();
            this._priceText.text = "price";
            this._percentText.text = "percent";
            this._priceText.x = -this._priceText.width;
            this._percentText.x = _isTType ? (_cfg.TW) : (_cfg.KW);
            if (_dataMgr.comparing)
            {
                setTimeout(this.setTitle, 500, true);
            }
            else
            {
                this.setTitle(true);
            }
            if (stage)
            {
                stage.addEventListener(KeyboardEvent.KEY_DOWN, this.onKbDown);
                stage.addEventListener(KeyboardEvent.KEY_UP, this.onKbUp);
            }
            return;
        }// end function

    }
}
