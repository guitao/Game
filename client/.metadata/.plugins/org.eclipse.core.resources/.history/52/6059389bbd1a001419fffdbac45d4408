package com.sina.finance.data
{

    public class TDataObjBase extends DataObjBase
    {
        public var realLen:uint;

        public function TDataObjBase(param1:HQ)
        {
            super(param1);
            return;
        }// end function

        public function setPctAndPrice(param1:Number, param2:Number) : void
        {
            var _loc_3:Number = 1e-006;
            if (minPercent - param1 > _loc_3 || param2 - maxPercent > _loc_3)
            {
                var _loc_4:* = param2 * prevclose + prevclose;
                maxPrice = param2 * prevclose + prevclose;
                labelMaxP = _loc_4;
                var _loc_4:* = param1 * prevclose + prevclose;
                minPrice = param1 * prevclose + prevclose;
                labelMinP = _loc_4;
                this.calcPoses();
            }
            return;
        }// end function

        override protected function initPoses() : void
        {
            if (poses == null || marks == null)
            {
                poses = [];
                marks = [];
            }
            if (poses.length > this.realLen)
            {
                poses.splice(this.realLen);
            }
            if (marks.length > this.realLen)
            {
                marks.splice(this.realLen);
            }
            var _loc_1:* = poses.length;
            while (_loc_1 <= this.realLen)
            {
                
                poses.push({});
                marks.push({});
                _loc_1 = _loc_1 + 1;
            }
            this.calcPoses();
            return;
        }// end function

        override protected function setExtValue() : void
        {
            var _loc_1:int = 0;
            while (_loc_1 < datasLength)
            {
                
                if (datas[_loc_1].price <= 0)
                {
                }
                else
                {
                    this.realLen = _loc_1;
                    if (minPrice > datas[_loc_1].price)
                    {
                        minPrice = datas[_loc_1].price;
                    }
                    if (maxPrice < datas[_loc_1].price)
                    {
                        maxPrice = datas[_loc_1].price;
                    }
                }
                _loc_1++;
            }
            maxPercent = (maxPrice - prevclose) / prevclose;
            minPercent = (minPrice - prevclose) / prevclose;
            if (minPercent > 0)
            {
                minPercent = 0;
            }
            if (maxPercent < 0)
            {
                maxPercent = 0;
            }
            return;
        }// end function

        public function setData(param1:Array, param2:uint) : void
        {
            days = param2;
            datas = param1;
            datasLength = datas.length;
            initExtValue();
            prevclose = datas[0].prevclose;
            if (isNaN(prevclose) || prevclose < 0.01)
            {
                prevclose = datas[0].price;
            }
            this.setExtValue();
            this.initPoses();
            return;
        }// end function

        override protected function calcPoses() : void
        {
            var _loc_2:Object = null;
            var _loc_3:Object = null;
            var _loc_4:Number = NaN;
            var _loc_1:uint = 0;
            while (_loc_1 <= this.realLen)
            {
                
                _loc_2 = poses[_loc_1];
                _loc_3 = marks[_loc_1];
                if (datas[_loc_1].price > 0)
                {
                    var _loc_5:* = (datas[_loc_1].price - prevclose) / prevclose;
                    _loc_4 = (datas[_loc_1].price - prevclose) / prevclose;
                    datas[_loc_1].percent = _loc_5;
                    _loc_2.price = _dataTool.calcPricePosy(datas[_loc_1].price, minPrice, maxPrice, _cfg.hReal);
                }
                else
                {
                    if (_loc_1 == 0)
                    {
                        datas[0].price = hq.prevclose;
                        var _loc_5:int = 0;
                        _loc_4 = 0;
                        datas[0].percent = _loc_5;
                    }
                    datas[_loc_1].percent = datas[(_loc_1 - 1)].percent;
                    datas[_loc_1].price = datas[(_loc_1 - 1)].price;
                    _loc_2.price = poses[(_loc_1 - 1)].price;
                }
                _loc_3.price = _dataTool.price2string(datas[_loc_1].price, hq.ppp);
                _loc_3.percent = (_loc_4 * 100).toFixed(hq.ppp) + "%";
                _loc_1 = _loc_1 + 1;
            }
            return;
        }// end function

        public function setPercentPoses(param1:Number, param2:Number, param3:Number = -1) : void
        {
            var _loc_5:Object = null;
            var _loc_6:Number = NaN;
            if (param3 < 0)
            {
                param3 = _cfg.hcompare;
            }
            var _loc_4:uint = 0;
            while (_loc_4 <= this.realLen)
            {
                
                _loc_5 = poses[_loc_4];
                if (datas[_loc_4].price > 0)
                {
                    _loc_6 = datas[_loc_4].percent;
                }
                else if (_loc_4 == 0)
                {
                    _loc_6 = 0;
                }
                else
                {
                    _loc_6 = datas[(_loc_4 - 1)].percent;
                }
                _loc_5.percent = _dataTool.calcPricePosy(_loc_6, param1, param2, param3);
                _loc_4 = _loc_4 + 1;
            }
            return;
        }// end function

    }
}
