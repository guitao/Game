package com.sina.finance.ui
{

    public class IndicatorCCI extends Indicator
    {
        private var _max:Number;
        private const CCCI:uint = 31944;
        private var _ccis:Array;
        private var _min:Number;
        private const ECCIMA:uint = 14;
        private const CCCIMA:uint = 255;
        private var _cciLine:LineCurve;

        public function IndicatorCCI()
        {
            _color2 = this.CCCI;
            this._cciLine = new LineCurve(1, this.CCCI, 1, false);
            addChild(this._cciLine);
            return;
        }// end function

        override public function draw(param1:uint = 24) : void
        {
            this._cciLine.clear(true);
            var _loc_2:* = _objs.length;
            var _loc_3:* = _cfg.KW / _loc_2;
            if (_loc_2 < _cfg.NK)
            {
                _loc_3 = _cfg.KW / _cfg.NK;
            }
            var _loc_4:* = _loc_3 / 2;
            var _loc_5:* = _cfg.hindicator * this._max / (this._max - this._min);
            var _loc_6:uint = 0;
            while (_loc_6 < _loc_2)
            {
                
                if (_loc_6 == 0)
                {
                    this._cciLine.moveTo(_loc_4, _objs[_loc_6].cciy);
                }
                else
                {
                    this._cciLine.lineTo(_loc_4, _objs[_loc_6].cciy);
                }
                _loc_4 = _loc_4 + _loc_3;
                _loc_6 = _loc_6 + 1;
            }
            return;
        }// end function

        override public function initDatasBySource(param1:Array) : void
        {
            var _loc_4:Number = NaN;
            var _loc_5:Number = NaN;
            var _loc_6:Number = NaN;
            var _loc_7:Number = NaN;
            var _loc_8:Number = NaN;
            destroyArray(this._ccis);
            destroyArray(_objs);
            this._ccis = [];
            _objs = [];
            var _loc_2:* = param1.length;
            var _loc_3:Number = 0;
            var _loc_9:Number = 0;
            var _loc_10:* = param1[0];
            _loc_4 = (Number(_loc_10.high) + Number(_loc_10.low) + Number(_loc_10.close)) / 3;
            var _loc_14:* = Number(_loc_10.close) || 0;
            _loc_9 = Number(_loc_10.close) || 0;
            _loc_8 = _loc_14;
            var _loc_14:* = Math.abs(_loc_8 - _loc_10.close) || 0;
            _loc_7 = Math.abs(_loc_8 - _loc_10.close) || 0;
            _loc_6 = _loc_14;
            if (_loc_6 == 0)
            {
                _loc_3 = 0;
            }
            else
            {
                _loc_3 = (_loc_4 - _loc_8) / _loc_6 / 0.015;
            }
            this._ccis.push(_loc_3);
            var _loc_11:Array = [_loc_4];
            var _loc_12:Array = [_loc_6];
            if (_loc_2 == 1)
            {
                return;
            }
            var _loc_13:uint = 1;
            while (_loc_13 < _loc_2)
            {
                
                _loc_10 = param1[_loc_13];
                _loc_4 = (Number(_loc_10.high) + Number(_loc_10.low) + Number(_loc_10.close)) / 3 || Number(_loc_10.close);
                _loc_9 = _loc_9 + _loc_4;
                if (_loc_13 >= this.ECCIMA)
                {
                    _loc_9 = _loc_9 - _loc_11[_loc_13 - this.ECCIMA];
                    _loc_8 = _loc_9 / this.ECCIMA;
                }
                else
                {
                    _loc_8 = _loc_9 / (_loc_13 + 1);
                }
                _loc_11.push(_loc_4);
                _loc_6 = this.getMD(_loc_11, _loc_8, _loc_13);
                if (_loc_6 == 0)
                {
                    _loc_3 = 0;
                }
                else
                {
                    _loc_3 = (_loc_4 - _loc_8) / _loc_6 / 0.015;
                }
                this._ccis.push(_loc_3);
                _loc_13 = _loc_13 + 1;
            }
            return;
        }// end function

        private function getMD(param1:Array, param2:Number, param3:uint) : Number
        {
            if (param3 < this.ECCIMA)
            {
                param3 = 0;
            }
            else
            {
                param3 = param1.length - this.ECCIMA;
            }
            var _loc_4:Number = 0;
            while (param3 < param1.length)
            {
                
                _loc_4 = _loc_4 + Math.abs(param2 - param1[param3]);
                param3 = param3 + 1;
            }
            if (param3 >= this.ECCIMA)
            {
                return _loc_4 / this.ECCIMA;
            }
            return _loc_4 / (param3 + 1);
        }// end function

        override public function calcObjs(param1:uint, param2:uint) : void
        {
            var _loc_7:Object = null;
            var _loc_3:* = param2 - param1;
            while (_objs.length > _loc_3)
            {
                
                _objs.pop();
            }
            while (_objs.length < _loc_3)
            {
                
                _objs.push({});
            }
            this._max = -1000000000;
            this._min = 1000000000;
            var _loc_4:* = param1;
            while (_loc_4 < param2)
            {
                
                _loc_7 = _objs[_loc_4 - param1];
                _loc_7.cci = this._ccis[_loc_4];
                if (this._min > _loc_7.cci)
                {
                    this._min = _loc_7.cci;
                }
                if (this._max < _loc_7.cci)
                {
                    this._max = _loc_7.cci;
                }
                _loc_4 = _loc_4 + 1;
            }
            if (this._min > 0)
            {
                this._min = 0;
            }
            if (this._max < 0)
            {
                this._max = 0;
            }
            var _loc_5:* = this._max - this._min;
            var _loc_6:* = _cfg.hindicator - 10;
            _loc_4 = 0;
            while (_loc_4 < _loc_3)
            {
                
                _objs[_loc_4].cciy = _loc_6 * (this._max - _objs[_loc_4].cci) / _loc_5;
                _loc_4 = _loc_4 + 1;
            }
            setLeftText(this._min, this._max, 3, 2);
            return;
        }// end function

        override public function interactiveEnd() : void
        {
            this._cciLine.interactiveEnd();
            return;
        }// end function

        override public function setDefaultText() : void
        {
            var _loc_1:* = _objs.length - 1;
            setTitleText("", "CCI: " + Number(_objs[_loc_1].cci).toFixed(2), "");
            return;
        }// end function

        override public function interactiveTo(param1:uint) : void
        {
            this._cciLine.interactiveTo(param1);
            if (param1 >= _objs.length)
            {
                param1 = _objs.length - 1;
            }
            setTitleText("", "CCI: " + Number(_objs[param1].cci).toFixed(2), "");
            return;
        }// end function

    }
}
