package com.ui.datebar
{
    import com.greensock.*;
    import com.sina.finance.data.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.utils.*;
    import mx.utils.*;

    public class DateSelector extends Sprite
    {
        private var _from:TextField;
        private var _dateInputLayer:Sprite;
        private const _TXT_COLOR:uint = 7804;
        private var _timeMachineLayer:Sprite;
        private var _alertT:TextField;
        private const _TXT_H:uint = 20;
        private var _dayBtns:DateSelectorButtons;
        private var _tmBtn_x:uint;
        private var _to:TextField;
        private var _isK:Boolean = false;
        private var _cfg:Config;
        private var _tmMask:Shape;
        private const _TIP_DATE_FORMAT:String = "请输入正确的日期，格式：年-月-日";
        private var _isEnabled:Boolean = false;
        public var exitTimeMachine:Function;
        private var _dataTool:DataTool;
        private var _tid:uint;
        private var _dayBtnLayer:Sprite;
        private var _alert:Sprite;
        private var _okBtn:Sprite;
        private var _delegate:Function;
        private var _tDateT:TextField;
        private const _BIG_BTN_W:uint = 100;
        private var _tmTipBtn:Sprite;

        public function DateSelector(param1:Function)
        {
            var delegate:* = param1;
            this._dataTool = DataTool.getInstance();
            this._cfg = Config.getInstance();
            this._tmBtn_x = this._cfg.TW - this._BIG_BTN_W;
            this._delegate = delegate;
            this._dateInputLayer = new Sprite();
            this._dayBtnLayer = new Sprite();
            var _loc_3:Boolean = false;
            this._dayBtnLayer.visible = false;
            this._dateInputLayer.visible = _loc_3;
            addChild(this._dateInputLayer);
            addChild(this._dayBtnLayer);
            var lb:* = this.newTxtField("开始日期", 12, this._TXT_COLOR);
            lb.x = 3;
            this._dateInputLayer.addChild(lb);
            this._from = this.newTxtField("", 12, this._TXT_COLOR, false, true, this._cfg.KW * 0.32);
            this._from.tabIndex = 0;
            this._from.x = lb.width + lb.x + 5;
            this._dateInputLayer.addChild(this._from);
            lb = this.newTxtField("至", 12, this._TXT_COLOR);
            lb.x = this._from.x + this._from.width + 3;
            this._dateInputLayer.addChild(lb);
            this._to = this.newTxtField("", 12, this._TXT_COLOR, false, true, this._cfg.KW * 0.32);
            this._to.tabIndex = 1;
            this._to.x = lb.x + lb.width + 5;
            this._dateInputLayer.addChild(this._to);
            this._okBtn = this.newBtn("确定");
            this._okBtn.x = this._cfg.KW - this._okBtn.width - 1;
            this._okBtn.addEventListener(MouseEvent.CLICK, this.confirmInput);
            this._dateInputLayer.addChild(this._okBtn);
            this._dayBtns = new DateSelectorButtons();
            this._dayBtnLayer.addChild(this._dayBtns);
            this._dayBtns.addEventListener(Event.SELECT, function (event:Event) : void
            {
                _delegate(_dayBtns.pressedBtn, null);
                return;
            }// end function
            );
            this._timeMachineLayer = new Sprite();
            this._tmMask = new Shape();
            this._tmMask.graphics.beginFill(0);
            this._tmMask.graphics.drawRect(-1, -2, this._cfg.TW, 25);
            this._tmMask.graphics.endFill();
            this._timeMachineLayer.mask = this._tmMask;
            this._dayBtnLayer.addChild(this._tmMask);
            this._tmTipBtn = this.newBtn("< 历史分时查询", this._BIG_BTN_W);
            this._tmTipBtn.addEventListener(MouseEvent.CLICK, this.showTm);
            this._timeMachineLayer.x = this._tmBtn_x;
            this._dayBtnLayer.addChild(this._timeMachineLayer);
            this._timeMachineLayer.addChild(this._tmTipBtn);
            var tmLb:* = this.newTxtField("查询日期", 12, this._TXT_COLOR);
            tmLb.x = this._tmTipBtn.x + this._tmTipBtn.width + 5;
            this._timeMachineLayer.addChild(tmLb);
            this._tDateT = this.newTxtField("", 12, this._TXT_COLOR, false, true);
            this._tDateT.tabEnabled = false;
            this._tDateT.x = tmLb.x + tmLb.width;
            this._timeMachineLayer.addChild(this._tDateT);
            var tOkBtn:* = this.newBtn("确定");
            tOkBtn.x = this._tDateT.x + this._tDateT.width + 5;
            tOkBtn.addEventListener(MouseEvent.CLICK, this.confirmInput);
            this._timeMachineLayer.addChild(tOkBtn);
            var tBackBtn:* = this.newBtn("返回最新分时 >", this._BIG_BTN_W);
            tBackBtn.addEventListener(MouseEvent.CLICK, function (event:MouseEvent) : void
            {
                exitTimeMachine(true, true, true);
                return;
            }// end function
            );
            tBackBtn.x = this._cfg.TW + this._tmTipBtn.x + this._tmTipBtn.width - tBackBtn.width;
            this._timeMachineLayer.addChild(tBackBtn);
            this._timeMachineLayer.graphics.beginFill(15725564);
            this._timeMachineLayer.graphics.drawRect(0, -2, this._timeMachineLayer.width, this._timeMachineLayer.height + 3);
            this._timeMachineLayer.graphics.endFill();
            this.graphics.beginFill(this._cfg.BG_COLOR);
            this.graphics.drawRect(-1, -2, this._cfg.TW + 2, this._TXT_H + 6);
            this.graphics.endFill();
            return;
        }// end function

        public function setTDate(param1:Date, param2:Boolean) : void
        {
            if (param2 || stage.focus != this._tDateT)
            {
                this._tDateT.text = this._dataTool.dateObj2dateStr(param1);
            }
            return;
        }// end function

        private function check(param1:String, param2:String) : Array
        {
            var _loc_5:Date = null;
            var _loc_3:* = this._dataTool.dateStr2dateObj(param1);
            var _loc_4:* = this._dataTool.dateStr2dateObj(param2);
            if (_loc_3 > _loc_4)
            {
                _loc_5 = _loc_3;
                _loc_3 = _loc_4;
                _loc_4 = _loc_5;
                this.setFromToDate(_loc_3, _loc_4, true);
            }
            var _loc_6:int = 8;
            _loc_4.hours = 8;
            _loc_3.hours = _loc_6;
            return [_loc_3, _loc_4];
        }// end function

        public function cancelTm(param1:Boolean = false) : void
        {
            this._timeMachineLayer.visible = !param1;
            return;
        }// end function

        public function setFromToDate(param1:Date, param2:Date, param3:Boolean) : void
        {
            if (param3 || stage.focus != this._from && stage.focus != this._to)
            {
                this._from.text = this._dataTool.dateObj2dateStr(param1, "-");
                this._to.text = this._dataTool.dateObj2dateStr(param2);
            }
            return;
        }// end function

        private function newBtn(param1:String, param2:uint = 48) : Sprite
        {
            var _loc_3:* = new Sprite();
            _loc_3.buttonMode = true;
            var _loc_4:* = new Matrix();
            new Matrix().createGradientBox(param2, (this._TXT_H + 1), Math.PI * 0.5);
            _loc_3.graphics.beginGradientFill("linear", [9282766, 8230339], [1, 1], [0, 255], _loc_4);
            _loc_3.graphics.drawRect(0, 0, param2, (this._TXT_H + 1));
            _loc_3.graphics.endFill();
            var _loc_5:* = this.newTxtField(param1, 12, 16777215, false, false, param2, true);
            _loc_3.addChild(_loc_5);
            return _loc_3;
        }// end function

        private function newTxtField(param1:String = null, param2:uint = 10, param3:uint = 0, param4:Boolean = false, param5:Boolean = false, param6:uint = 148, param7:Boolean = false) : TextField
        {
            var _loc_8:* = new TextField();
            new TextField().height = this._TXT_H;
            if (param5)
            {
                _loc_8.border = true;
                _loc_8.borderColor = 13881294;
                _loc_8.background = true;
                _loc_8.backgroundColor = 16777215;
                _loc_8.type = "input";
                _loc_8.width = param6;
                _loc_8.restrict = "0-9\\-";
                _loc_8.addEventListener(MouseEvent.CLICK, this.clkInput);
                _loc_8.addEventListener(KeyboardEvent.KEY_UP, this.onUp);
            }
            else
            {
                _loc_8.width = param6;
                if (!param7)
                {
                    _loc_8.autoSize = "left";
                }
                _loc_8.mouseEnabled = false;
            }
            var _loc_9:* = new TextFormat("arial", param2, param3, param4, null, null, null, null, param7 ? ("center") : (null));
            _loc_8.defaultTextFormat = _loc_9;
            if (param1)
            {
                _loc_8.text = param1;
            }
            return _loc_8;
        }// end function

        public function functionable(param1:Boolean = false) : void
        {
            this._isEnabled = param1;
            var _loc_2:* = param1 ? ("input") : ("dynamic");
            this._to.type = param1 ? ("input") : ("dynamic");
            this._from.type = _loc_2;
            this._dayBtns.functionable(param1);
            return;
        }// end function

        public function showErr(param1:String) : void
        {
            var str:* = param1;
            clearTimeout(this._tid);
            if (!this._alert)
            {
                this._alertT = this.newTxtField(str, 12, 16777215, false, false, this._cfg.TW, true);
                this._alert = new Sprite();
                this._alert.graphics.beginFill(11141120);
                this._alert.graphics.drawRect(0, 0, this._cfg.TW, 22);
                this._alert.x = 0;
                addChild(this._alert);
                this._alertT.y = -1;
                this._alert.addChild(this._alertT);
            }
            this._alertT.text = str;
            this._alert.visible = true;
            this._tid = setTimeout(function () : void
            {
                _alert.visible = false;
                return;
            }// end function
            , 3000);
            return;
        }// end function

        public function showTm(event:MouseEvent = null) : void
        {
            if (!this._isEnabled)
            {
                return;
            }
            TweenNano.to(this._timeMachineLayer, 0.3, {x:-this._tmTipBtn.width - 2});
            return;
        }// end function

        private function clkInput(event:MouseEvent) : void
        {
            if (stage.displayState == "fullScreen")
            {
                this.showErr("提示：无法在全屏模式下录入文字");
            }
            return;
        }// end function

        private function onUp(event:KeyboardEvent) : void
        {
            if (event.keyCode == 13)
            {
                this.confirmInput(null);
            }
            return;
        }// end function

        public function hideTm() : void
        {
            TweenNano.to(this._timeMachineLayer, 0.3, {x:this._tmBtn_x});
            return;
        }// end function

        private function fixDate(param1:String) : String
        {
            if (param1 == "")
            {
                return this._dataTool.dateObj2dateStr(new Date());
            }
            if (param1.indexOf("-") == -1)
            {
                if (param1.length == 8)
                {
                    return param1.substr(0, 4) + "-" + param1.substr(4, 2) + "-" + param1.substr(6, 2);
                }
                if (param1.length > 4)
                {
                    return param1;
                }
            }
            var _loc_2:* = param1.split("-");
            if (_loc_2.length == 1)
            {
                return this.fullfillYear(int(param1)) + "-1-1";
            }
            if (_loc_2.length == 2)
            {
                return this.fullfillYear(int(_loc_2[0])) + "-" + _loc_2[1] + "-1";
            }
            if (_loc_2.length == 3)
            {
                return this.fullfillYear(int(_loc_2[0])) + "-" + _loc_2[1] + "-" + _loc_2[2];
            }
            return param1;
        }// end function

        private function confirmInput(event:MouseEvent) : void
        {
            var _loc_2:String = null;
            var _loc_3:String = null;
            var _loc_4:Array = null;
            var _loc_5:String = null;
            var _loc_6:Date = null;
            if (!this._isEnabled)
            {
                return;
            }
            if (this._isK)
            {
                _loc_2 = this.fixDate(StringUtil.trim(this._from.text));
                _loc_3 = this.fixDate(StringUtil.trim(this._to.text));
                if (!this.isDatePattern(_loc_2) || !this.isDatePattern(_loc_3))
                {
                    this.showErr(this._TIP_DATE_FORMAT);
                    return;
                }
                _loc_4 = this.check(_loc_2, _loc_3);
                this._delegate(0, null, _loc_4[0], _loc_4[1]);
            }
            else
            {
                _loc_5 = this.fixDate(StringUtil.trim(this._tDateT.text));
                if (!this.isDatePattern(_loc_5))
                {
                    this.showErr(this._TIP_DATE_FORMAT);
                    return;
                }
                _loc_6 = this._dataTool.dateStr2dateObj(_loc_5);
                if (_loc_6.fullYear < 2008)
                {
                    this.showErr(this._cfg.TIP_2008);
                    return;
                }
                this._delegate(1, _loc_6);
            }
            return;
        }// end function

        private function fullfillYear(param1:int) : String
        {
            var _loc_2:* = String(param1);
            if (param1 < 10)
            {
                _loc_2 = "200" + _loc_2;
            }
            else if (param1 < 90)
            {
                _loc_2 = "20" + _loc_2;
            }
            else if (param1 < 100)
            {
                _loc_2 = "19" + param1;
            }
            return _loc_2;
        }// end function

        public function changeMode(param1:Boolean, param2:int = 0, param3:Boolean = false) : void
        {
            this._isK = param1;
            this._dateInputLayer.visible = param1;
            this._dayBtnLayer.visible = !param1;
            if (!param1)
            {
                this._dayBtns.isFiveT = param3;
                this._dayBtns.num = param2;
            }
            return;
        }// end function

        private function isDatePattern(param1:String) : Boolean
        {
            var _loc_2:* = param1.split("-");
            if (_loc_2.length != 3)
            {
                return false;
            }
            var _loc_3:* = int(_loc_2[0]);
            var _loc_4:* = int(_loc_2[1]);
            var _loc_5:* = int(_loc_2[2]);
            if (isNaN(_loc_3) || _loc_3 <= 0 || (isNaN(_loc_4) || _loc_4 <= 0 || _loc_4 > 12) || isNaN(_loc_5) || _loc_5 <= 0 || _loc_5 > 31)
            {
                return false;
            }
            return true;
        }// end function

    }
}
