package com.sina.finance.ui
{
    import com.sina.finance.data.*;
    import flash.display.*;

    public class LineMgr extends UIMgr
    {
        private var _linesC:LinesC;
        private var _lineKPriceLine:Shape;
        private var _linesK:LinesK;
        private var _linesT:LinesT;
        private var _overTLine:OverTLine;

        public function LineMgr(param1:DataMgr)
        {
            super(param1);
            return;
        }// end function

        public function newSet() : void
        {
            if (this._linesK && contains(this._linesK))
            {
                this._linesK.newColorComes();
            }
            return;
        }// end function

        override public function interactiveTo(param1:uint) : void
        {
            if (this._linesT && contains(this._linesT))
            {
                this._linesT.interactiveTo(param1);
            }
            if (this._linesK && contains(this._linesK))
            {
                this._linesK.interactiveTo(param1);
            }
            if (this._linesC && contains(this._linesC))
            {
                this._linesC.interactiveTo(param1);
            }
            return;
        }// end function

        override public function selectRangleReset() : void
        {
            if (_isTType)
            {
                if (_dataMgr.cdatas.length > 1)
                {
                    if (!this._linesC)
                    {
                        this._linesC = new LinesC(_dataMgr.cdatas);
                    }
                    this._linesC.draw();
                    if (!contains(this._linesC))
                    {
                        addChild(this._linesC);
                    }
                    if (this._linesT && contains(this._linesT))
                    {
                        removeChild(this._linesT);
                    }
                    if (this._overTLine && contains(this._overTLine))
                    {
                        removeChild(this._overTLine);
                    }
                }
                else
                {
                    if (!this._linesT)
                    {
                        this._linesT = new LinesT(_dataMgr.tdata.tdataObj as TDataObj);
                    }
                    this._linesT.id = _id;
                    this._linesT.draw();
                    if (!contains(this._linesT))
                    {
                        addChild(this._linesT);
                    }
                    if (this._linesC && contains(this._linesC))
                    {
                        removeChild(this._linesC);
                    }
                    if (_dataMgr.tdata.isLates5() && _dataMgr.isShowingFloatT && _dataMgr.overTArr.length > 0)
                    {
                        if (!this._overTLine)
                        {
                            this._overTLine = new OverTLine(_dataMgr.overTArr);
                        }
                        this._overTLine.draw();
                        if (!contains(this._overTLine))
                        {
                            addChildAt(this._overTLine, 0);
                        }
                    }
                    else if (this._overTLine && contains(this._overTLine))
                    {
                        removeChild(this._overTLine);
                    }
                }
                if (this._linesK && contains(this._linesK))
                {
                    removeChild(this._linesK);
                }
                if (this._lineKPriceLine && contains(this._lineKPriceLine))
                {
                    removeChild(this._lineKPriceLine);
                }
            }
            else
            {
                if (!this._linesK)
                {
                    this._linesK = new LinesK(_dataMgr.kdata.kdataObj);
                }
                this._linesK.draw(_id);
                if (!this._lineKPriceLine)
                {
                    this._lineKPriceLine = new Shape();
                }
                this.drawKPriceLine(_dataMgr.kdata.kdataObj.labelPriceCount);
                if (!contains(this._lineKPriceLine))
                {
                    addChildAt(this._lineKPriceLine, 0);
                }
                if (!contains(this._linesK))
                {
                    addChild(this._linesK);
                }
                if (this._linesC && contains(this._linesC))
                {
                    removeChild(this._linesC);
                }
                if (this._linesT && contains(this._linesT))
                {
                    removeChild(this._linesT);
                }
                if (this._overTLine && contains(this._overTLine))
                {
                    removeChild(this._overTLine);
                }
            }
            return;
        }// end function

        override public function interactiveEnd() : void
        {
            if (this._linesT && contains(this._linesT))
            {
                this._linesT.interactiveEnd();
            }
            if (this._linesK && contains(this._linesK))
            {
                this._linesK.interactiveEnd();
            }
            if (this._linesC && contains(this._linesC))
            {
                this._linesC.interactiveEnd();
            }
            return;
        }// end function

        private function dashLineFromTo(param1:Graphics, param2:Number) : void
        {
            var _loc_3:Number = 0;
            while (_loc_3 < _cfg.TW)
            {
                
                param1.moveTo(_loc_3, param2);
                _loc_3 = _loc_3 + 2;
                param1.lineTo(_loc_3, param2);
                _loc_3 = _loc_3 + 2;
            }
            return;
        }// end function

        override public function resize() : void
        {
            if (_isTType)
            {
                if (this._linesT && contains(this._linesT))
                {
                    this._linesT.resize();
                }
            }
            else
            {
                this._linesK.resize();
            }
            return;
        }// end function

        private function drawKPriceLine(param1:int) : void
        {
            this._lineKPriceLine.graphics.clear();
            this._lineKPriceLine.graphics.lineStyle(0, _cfg.clineBackground, 1, true);
            param1 = param1 + 1;
            var _loc_2:uint = 0;
            while (_loc_2 < param1)
            {
                
                if (_loc_2 < (param1 - 1))
                {
                    this.dashLineFromTo(this._lineKPriceLine.graphics, _loc_2 * _cfg.hReal / (param1 - 1));
                }
                _loc_2 = _loc_2 + 1;
            }
            return;
        }// end function

    }
}
