package 
{
    import codegeass.*;
    import com.sina.finance.data.*;
    import com.sina.finance.ui.*;
    import com.ui.*;
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    import hsuan.*;
    import mx.utils.*;

    public class SinaKLine extends Sprite
    {
        private var _hasRoomForTitle:Boolean = false;
        private var _newM:NewsModule;
        private var _issuePrice:Number;
        private var _displayMgr:DisplayMgr;
        private var _retryCountHq:uint = 0;
        private var _servDomain:String;
        private var _cfg:Config;
        private var _countdown:int = 3;
        private var _iHqStr:String;
        private var _symbol:String;
        private var _dataTool:DataTool;
        private var _retryCountTradingD:uint = 0;
        private var _dataMgr:DataMgr;
        private var _addrClientIp:String;
        private var _addrServerIp:String;
        private var _dateStr:String;
        private var _hqStr:String;
        private var _retryCountIhq:uint = 0;
        private const N_SERVER_IP:String = "sys_serverip";
        private const N_CLINET_IP:String = "sys_clientip";

        public function SinaKLine()
        {
            this._cfg = Config.getInstance();
            this._dataTool = DataTool.getInstance();
            Security.allowDomain("*");
            Security.allowInsecureDomain("*");
            System.useCodePage = true;
            if (stage)
            {
                this._init(null);
            }
            else
            {
                addEventListener(Event.ADDED_TO_STAGE, this._init);
            }
            return;
        }

        private function _setAuthorize() : void
        {
            var popUrl:String;
            var pCode:* = loaderInfo.parameters.code || "";
            var pUrl:* = loaderInfo.parameters.url || "";
            this._cfg.browserUrl = "";
            try
            {
                this._cfg.browserUrl = ExternalInterface.call("eval", "window.location.href");
            }
            catch (err:Error)
            {
                trace("1");
            }
			var pattern:RegExp=/(^http:\/\/.+\.sina\.com\.cn\/.+)|(^file:\/\/\/.*)/i;
            if (!pattern.test(this._cfg.browserUrl))
            {
                this._cfg.isExternal = true;
            }
            if (!pUrl || pUrl == "undefined" || pUrl == "")
            {
                pUrl = this._cfg.browserUrl;
            }
            var hostname:String;
            try
            {
                hostname = ExternalInterface.call("function(){return location.hostname;}");
            }
            catch (err:Error)
            {
            }
            var subPart:* = CodeGeass.getSubPart(pCode);
            var code:* = CodeGeass.calc(hostname + subPart);
            var matchingPart:* = pCode.substr(0, 31);
            if (code == matchingPart)
            {
                this._cfg.isAuthorized = true;
                popUrl = pUrl;
            }
            var sStr:* = this._cfg.isAuthorized ? (loaderInfo.parameters.s) : ("");
            this._cfg.initParam(sStr);
            if (!popUrl || StringUtil.trim(popUrl) == "")
            {
                popUrl = this._cfg.FINANCE_URL + this._symbol + "/nc.shtml";
            }
            this._cfg.mbPopUrl = encodeURIComponent(popUrl);
            return;
        }

        private function _go() : void
        {
            if (--this._countdown > 0)
            {
                return;
            }
            this._dataMgr = new DataMgr();
            this._displayMgr = new DisplayMgr(this._dataMgr);
            addChild(this._displayMgr);
            this._dataMgr.initData(this._symbol, this._hqStr, this._dateStr, this._iHqStr);
            this._dataMgr.newStockHandler = this._newStockComes;
            this._dataMgr.addExternalInterface();
            this._dataMgr.selfRefresh();
            this._informPage();
            return;
        }

        private function dateStrLoaded(event:Event) : void
        {
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.dateStrErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.dateStrErr);
            event.target.removeEventListener(Event.COMPLETE, this.dateStrLoaded);
            var _loc_2:* = String(event.target.data).split("\"");
            this._dateStr = _loc_2[1];
            this._go();
            return;
        }

        private function iHqLoading() : void
        {
            this._dataTool.loadDataFromUrl(this._cfg.HQ_URL_PREFIX + "&list=" + this._symbol + "_i", this.onIhqLoaded, null, this.onIhqErr, this.onIhqErr);
            return;
        }

        private function onIhqErr(event:Event) : void
        {
            var _loc_2:String = null;
            event.target.removeEventListener(Event.COMPLETE, this.onIhqLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onIhqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onIhqErr);
            if (++this._retryCountIhq < 3)
            {
                this.iHqLoading();
                _loc_2 = "errihq";
            }
            else
            {
                _loc_2 = "stopihq";
                this._go();
            }
            this._cfg.sendStatistic("flasherr.html?type=" + _loc_2);
            return;
        }

        private function _hijackLoaded(event:Event) : void
        {
            var serverIp:String;
            var clientIp:String;
            var symbol:String;
            var url:String;
            var toRe:Boolean;
            var reportUrl:String;
            var e:* = event;
            e.target.removeEventListener(Event.COMPLETE, this._hijackLoaded);
            var arr:* = XUtils.getHqVar(String(e.target.data));
            if (!arr)
            {
                return;
            }
            var isInitLoad:Boolean;
            var i:uint;
            var l:* = arr.length;
            while (i < l)
            {
                
                symbol = arr[i][0];
                switch(symbol)
                {
                    case this.N_SERVER_IP:
                    {
                        isInitLoad;
                        var _loc_3:* = String(arr[i][1]);
                        serverIp = String(arr[i][1]);
                        this._addrServerIp = _loc_3;
                        break;
                    }
                    case this.N_CLINET_IP:
                    {
                        clientIp = String(arr[i][1]);
                        break;
                    }
                    default:
                    {
                        return;
                        break;
                    }
                }
                i = (i + 1);
            }
            if (!clientIp)
            {
                return;
            }
            if (isInitLoad && serverIp && clientIp)
            {
                var _loc_3:* = clientIp;
                this._addrClientIp = clientIp;
                url = "http://" + serverIp + "/?_=" + new Date().time + "list=" + this.N_CLINET_IP;
                this._dataTool.loadDataFromUrl(url, this._hijackLoaded);
            }
            else if (this._addrClientIp != clientIp && this._addrServerIp)
            {
                toRe = this._checkLastReportTime();
                if (!toRe)
                {
                    return;
                }
                reportUrl;
                reportUrl = reportUrl.replace("$clientip1", this._addrClientIp).replace("$clientip2", clientIp).replace("$serveraddr", this._servDomain).replace("$serverip", this._addrServerIp).replace("$rn", new Date().time);
                this._dataTool.loadDataFromUrl(reportUrl, function (event:Event) : void
            {
                event.target.removeEventListener(event.type, arguments.callee);
                return;
            }
            );
            }
            return;
        }

        private function _setTradingDatesStr() : void
        {
            if (!this._dateStr || this._dateStr.length < 9)
            {
                this._dataTool.loadDataFromUrl(this._cfg.TRADING_D_URL, this.dateStrLoaded, null, this.dateStrErr, this.dateStrErr);
            }
            else
            {
                this._go();
            }
            return;
        }

        private function _setModulesOnAuth() : void
        {
            if (this._cfg.paramArr[0] == true)
            {
                this._addNewsMod();
            }
            if (this._cfg.paramArr[1] == true)
            {
                this._makeRoomForTitle();
            }
            return;
        }

        private function onHqStrLoaded(event:Event) : void
        {
            event.target.removeEventListener(Event.COMPLETE, this.onHqStrLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onHqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onHqErr);
            var _loc_2:* = new ByteArray();
            _loc_2.writeBytes(event.target.data);
            _loc_2.position = 0;
            var _loc_3:* = _loc_2.readMultiByte(_loc_2.length, "gbk");
            var _loc_4:* = _loc_3.split("\"");
            this._hqStr = _loc_4[1];
            if (this._hqStr.charAt(0) == "N")
            {
                this._cfg.stockType = "n";
            }
            this._go();
            return;
        }

        private function _hijackTest() : void
        {
            var _loc_1:Array = ["hq.sinajs.cn", "live.sinajs.cn", "newspush.sinajs.cn"];
            var _loc_2:* = Math.floor(Math.random() * 3);
            this._servDomain = _loc_1[_loc_2];
            var _loc_3:* = "http://" + this._servDomain + "/?_=" + new Date().time + "&list=" + this.N_SERVER_IP + "," + this.N_CLINET_IP;
            this._dataTool.loadDataFromUrl(_loc_3, this._hijackLoaded);
            return;
        }

        private function _informPage(param1:Boolean = false) : void
        {
            var isFake:* = param1;
            this._drawBg();
            if (isFake && ExternalInterface.available)
            {
                ExternalInterface.addCallback("addCompareData", this._fakeApi);
                ExternalInterface.addCallback("callIndicator", this._fakeApi);
                ExternalInterface.call("Conn.flashOK");
            }
        }

        private function onIhqLoaded(event:Event) : void
        {
            var _loc_3:String = null;
            var _loc_4:String = null;
            event.target.removeEventListener(Event.COMPLETE, this.onIhqLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onIhqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onIhqErr);
            var _loc_2:* = String(event.target.data).split("\"");
            if (!_loc_2 || !_loc_2[1] || _loc_2[1] == "")
            {
                this._cfg.calcLastfive = true;
                if (!this._cfg.stockType || this._cfg.stockType == "")
                {
                    this._cfg.stockType = "f";
                }
            }
            else
            {
                this._iHqStr = _loc_2[1];
                _loc_2 = this._iHqStr.split(",");
                _loc_3 = StringUtil.trim(_loc_2[15]);
                if (_loc_3 != "1")
                {
                    addChild(new CharacterNotice(_loc_3));
                    this._informPage(true);
                    return;
                }
                this._cfg.stockType = StringUtil.trim(_loc_2[0]).toLowerCase();
				var pattern:RegExp=/[gz]/;
                this._cfg.isBond = pattern.test(this._cfg.stockType);
                if (this._cfg.isBond)
                {
                    _loc_4 = this._cfg.BOND_URL.replace("$symbol", this._symbol);
                    this._cfg.mbPopUrl = encodeURIComponent(_loc_4);
                }
            }
            this._go();
            return;
        }

        private function _newStockComes(param1:String) : void
        {
            return;
        }

        private function _checkLastReportTime() : Boolean
        {
            var so:SharedObject;
            var lastTime:Number;
            var timeGap:Number;
            var toReport:Boolean;
            var now:* = new Date().time;
            try
            {
                so = SharedObject.getLocal(this._cfg.LOCAL_STORAGE, this._cfg.LOCAL_PATH);
                if (isNaN(so.data.hijack))
                {
                    so.data.hijack = now;
                    so.flush();
                }
                else
                {
                    lastTime = Number(so.data.hijack);
                    timeGap = 1000 * 60 * 90;
                    if (now - lastTime > timeGap)
                    {
                        so.data.hijack = now;
                        so.flush();
                        toReport;
                    }
                    else
                    {
                        toReport;
                    }
                }
            }
            catch (err:Error)
            {
                toReport;
            }
            return toReport;
        }

        private function dateStrErr(event:Event) : void
        {
            var _loc_2:String = null;
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.dateStrErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.dateStrErr);
            event.target.removeEventListener(Event.COMPLETE, this.dateStrLoaded);
            if (++this._retryCountTradingD < 3)
            {
                this._setTradingDatesStr();
                _loc_2 = "errdate";
            }
            else
            {
                _loc_2 = "stopdate";
                this._go();
            }
            this._cfg.sendStatistic("flasherr.html?type=" + _loc_2);
            return;
        }

        private function _fakeApi(param1:String) : void
        {
            return;
        }

        private function _initStage() : void
        {
            stage.scaleMode = "showAll";
            stage.align = "T";
            this._cfg.sendStatistic("flashinit.html?file=cn&type=0");
            return;
        }

        private function _drawBg() : void
        {
            var _loc_1:* = new Shape();
            _loc_1.graphics.beginFill(16777215);
            _loc_1.graphics.drawRect(0, 0, this._cfg.viewW, this._cfg.viewH);
            addChildAt(_loc_1, 0);
            return;
        }

        private function _initSymbol(param1:String = null) : void
        {
            this._symbol = param1 || (param1 ? (loaderInfo.parameters.symbol) : ("sh000001"));
            this._symbol = StringUtil.trim(this._symbol);
            if (this._symbol == "sz399001_raw")
            {
                this._symbol = "sz399001";
            }
            this._cfg.stockType = this._dataTool.getTypeVonSymbol(this._symbol);
            return;
        }

        private function _addNewsMod() : void
        {
            this._cfg.hMain = this._cfg.hMain - 20;
            if (!this._newM)
            {
                this._newM = new NewsModule(this._symbol);
            }
            this._newM.x = this._cfg.posX - this._cfg.ORI_POX_X;
            this._newM.y = this._cfg.viewH - 20;
            addChildAt(this._newM, 0);
            this._newM.resize();
            return;
        }

        private function _init(event:Event) : void
        {
            removeEventListener(Event.ADDED_TO_STAGE, this._init);
            this._initStage();
            this._initSymbol();
            this._dateStr = loaderInfo.parameters.dates_str || "";
            this._cfg.directToId = UrlHashDecoder.getIdFromWord(loaderInfo.parameters.view);
            this._localStorage();
            this._cfg.mainTabStatistic(this._cfg.directToId, true);
            this._setAuthorize();
            this._setModulesOnAuth();
            this.iHqLoading();
            this.hqLoading();
            this._setTradingDatesStr();
            this._hijackTest();
            return;
        }

        private function hqLoading() : void
        {
            var _loc_1:* = this._symbol;
            this._dataTool.loadDataFromUrl(this._cfg.HQ_URL_PREFIX + "&list=" + _loc_1, this.onHqStrLoaded, null, this.onHqErr, this.onHqErr, true);
            return;
        }

        private function _localStorage() : void
        {
            var defaultMa:Array;
            var maArr:Array;
            var show:Boolean;
            var reK:uint;
            var so:SharedObject;
            defaultMa;
            var i:uint;
            var l:* = this._cfg.DEFAULT_MADAYS_ARR.length;
            while (i < l)
            {
                
                defaultMa[defaultMa.length] = [this._cfg.DEFAULT_MADAYS_ARR[i], this._cfg.DEFAULT_MACOLOR_ARR[i]];
                i = (i + 1);
            }
            try
            {
                so = SharedObject.getLocal(this._cfg.LOCAL_STORAGE, this._cfg.LOCAL_PATH);
                if (so.data.showFloater == null)
                {
                    so.data.showFloater = this._cfg.showFloater;
                }
                show = so.data.showFloater;
                if (!so.data.maArr2012)
                {
                    so.data.maArr2012 = defaultMa;
                }
                maArr = so.data.maArr2012;
                if (so.data.reK == null)
                {
                    so.data.reK = this._cfg.reK;
                }
                reK = so.data.reK;
            }
            catch (err:Error)
            {
                maArr = defaultMa;
                show;
                reK;
            }
            var j:uint;
            while (j < maArr.length)
            {
                
                this._cfg.maDayArr[j] = maArr[j][0];
                this._cfg.maColorArr[j] = maArr[j][1];
                j = (j + 1);
            }
            var _loc_2:* = show;
            this._cfg.FloaterSo = show;
            this._cfg.showFloater = _loc_2;
            this._cfg.reK = reK;
            return;
        }

        private function _makeRoomForTitle() : void
        {
            if (!this._hasRoomForTitle)
            {
                this._hasRoomForTitle = true;
                this._cfg.posY = this._cfg.posY + 21;
            }
            this._cfg.hVol = this._cfg.hVol - 6;
            this._cfg.hMain = this._cfg.hMain - 15;
            return;
        }

        private function onHqErr(event:Event) : void
        {
            var _loc_2:String = null;
            event.target.removeEventListener(Event.COMPLETE, this.onHqStrLoaded);
            event.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onHqErr);
            event.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onHqErr);
            if (++this._retryCountHq < 3)
            {
                this.hqLoading();
                _loc_2 = "errinithq";
            }
            else
            {
                _loc_2 = "stopinithq";
                this._go();
            }
            this._cfg.sendStatistic("flasherr.html?type=" + _loc_2);
            return;
        }

    }
}
