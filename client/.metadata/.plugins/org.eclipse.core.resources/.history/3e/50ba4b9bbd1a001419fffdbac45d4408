package com.ui
{
    import assets.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.text.*;

    public class FloaterBtn extends Sprite
    {
        private var _enabled:Boolean;
        private var _cfg:Config;
        private var _switchBtn:BtnShowHideFloater;
        private var _tips:Sprite;
        private var _so:SharedObject;

        public function FloaterBtn()
        {
            this._cfg = Config.getInstance();
            this._switchBtn = new BtnShowHideFloater();
            this.init();
            return;
        }// end function

        public function check(param1:Boolean = true) : void
        {
            this._enabled = param1;
            MovieClip(this._switchBtn).gotoAndStop(param1 ? (this._cfg.showFloater ? (1) : (2)) : (3));
            if (param1)
            {
                this._switchBtn.removeEventListener(MouseEvent.MOUSE_OVER, this.overBtn);
                this._switchBtn.removeEventListener(MouseEvent.MOUSE_OUT, this.outBtn);
            }
            else
            {
                this._switchBtn.addEventListener(MouseEvent.MOUSE_OVER, this.overBtn);
                this._switchBtn.addEventListener(MouseEvent.MOUSE_OUT, this.outBtn);
            }
            return;
        }// end function

        private function overBtn(event:MouseEvent) : void
        {
            this._tips.visible = true;
            return;
        }// end function

        private function init() : void
        {
            try
            {
                this._so = SharedObject.getLocal(this._cfg.LOCAL_STORAGE, this._cfg.LOCAL_PATH);
            }
            catch (err:Error)
            {
            }
            addChild(this._switchBtn);
            this._switchBtn.addEventListener(MouseEvent.CLICK, this.onClick);
            this.drawTip();
            this.check();
            return;
        }// end function

        private function outBtn(event:MouseEvent) : void
        {
            this._tips.visible = false;
            return;
        }// end function

        private function onClick(event:MouseEvent) : void
        {
            if (!this._enabled)
            {
                return;
            }
            this._cfg.showFloater = !this._cfg.showFloater;
            this._cfg.FloaterSo = this._cfg.showFloater;
            if (this._so)
            {
                this._so.data.showFloater = this._cfg.showFloater;
            }
            this.check();
            this._cfg.sendStatistic("tool.html?type=onoff");
            return;
        }// end function

        private function drawTip() : void
        {
            var _loc_1:int = 120;
            this._tips = new Sprite();
            this._tips.graphics.lineStyle(0, 14797730);
            this._tips.graphics.beginFill(16775888);
            this._tips.graphics.drawRoundRect(0, 0, _loc_1, 47, 5);
            this._tips.graphics.moveTo(_loc_1, 7);
            this._tips.graphics.lineTo(_loc_1 + 9, 10);
            this._tips.graphics.lineTo(_loc_1, 14);
            this._tips.graphics.lineStyle(0, 16775888);
            this._tips.graphics.endFill();
            var _loc_2:* = new TextField();
            _loc_2.defaultTextFormat = new TextFormat("arial", 12);
            _loc_2.text = "浮层开关仅在K线图状态下有效";
            _loc_2.width = _loc_1 - 5;
            _loc_2.wordWrap = true;
            _loc_2.height = 47;
            _loc_2.x = 5;
            _loc_2.y = 6;
            this._tips.addChild(_loc_2);
            this._tips.x = -_loc_1 - 15;
            this._tips.buttonMode = true;
            this._tips.mouseChildren = false;
            this._tips.visible = false;
            addChild(this._tips);
            return;
        }// end function

    }
}
