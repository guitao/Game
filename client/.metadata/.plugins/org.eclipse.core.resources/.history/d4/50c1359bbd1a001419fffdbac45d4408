package com.sina.finance.data
{

    public class KDataObj extends DataObjBase
    {

        public function KDataObj(param1:HQ)
        {
            super(param1);
            return;
        }// end function

        override protected function initPoses() : void
        {
            if (poses == null || marks == null)
            {
                poses = [];
                marks = [];
            }
            if (poses.length > datasLength)
            {
                poses.splice(datasLength);
            }
            if (marks.length > datasLength)
            {
                marks.splice(datasLength);
            }
            var _loc_1:* = poses.length;
            while (_loc_1 < datasLength)
            {
                
                poses.push({});
                marks.push({});
                _loc_1 = _loc_1 + 1;
            }
            this.calcPoses();
            return;
        }// end function

        override protected function setExtValue() : void
        {
            var _loc_1:Object = null;
            var _loc_5:uint = 0;
            var _loc_6:uint = 0;
            initExtValue();
            var _loc_2:Number = 0.01;
            var _loc_3:Number = 100000;
            var _loc_4:Array = [];
            _loc_6 = _cfg.getWorkingMAArr()[0].length;
            var _loc_7:int = 0;
            while (_loc_7 < datasLength)
            {
                
                _loc_1 = datas[_loc_7];
                if (_loc_1.close <= 0)
                {
                }
                else
                {
                    if (_loc_1.high > _loc_2)
                    {
                        _loc_2 = _loc_1.high;
                    }
                    if (_loc_1.low < _loc_3)
                    {
                        _loc_3 = _loc_1.low;
                    }
                    _loc_5 = 0;
                    while (_loc_5 < _loc_6)
                    {
                        
                        _loc_4[_loc_5] = _loc_1["ma_price" + _loc_5];
                        _loc_5 = _loc_5 + 1;
                    }
                    maxPrice = Math.max.apply(Math, [maxPrice, _loc_1.close, 0, _loc_1.high].concat(_loc_4));
                    minPrice = Math.min.apply(Math, [minPrice, _loc_1.close, _loc_1.low].concat(_loc_4));
                    if (minPrice < 0)
                    {
                        minPrice = 0;
                    }
                    _loc_5 = 0;
                    while (_loc_5 < _loc_6)
                    {
                        
                        _loc_4[_loc_5] = _loc_1["ma_volume" + _loc_5];
                        _loc_5 = _loc_5 + 1;
                    }
                    maxVolume = Math.max.apply(Math, [maxVolume, 0, _loc_1.volume].concat(_loc_4));
                }
                _loc_7++;
            }
            var _loc_8:Boolean = false;
            var _loc_9:Boolean = false;
            _loc_7 = datas.length - 1;
            while (_loc_7 >= 0)
            {
                
                if (_loc_8)
                {
                    datas[_loc_7].isHighest = false;
                }
                else if (_loc_2 == datas[_loc_7].high)
                {
                    datas[_loc_7].isHighest = true;
                    _loc_8 = true;
                }
                else
                {
                    datas[_loc_7].isHighest = false;
                }
                if (_loc_9)
                {
                    datas[_loc_7].isLowest = false;
                }
                else if (_loc_3 == datas[_loc_7].low)
                {
                    datas[_loc_7].isLowest = true;
                    _loc_9 = true;
                }
                else
                {
                    datas[_loc_7].isLowest = false;
                }
                _loc_7 = _loc_7 - 1;
            }
            var _loc_10:* = _dataTool.adjustHighLow(maxPrice, minPrice, 2, false);
            labelMaxP = _loc_10[0];
            labelMinP = _loc_10[1];
            labelPriceCount = _loc_10[2];
            _loc_10 = _dataTool.adjustHighLow(maxVolume, 0, 0, true);
            labelMaxVol = _loc_10[0];
            labelVolumeCount = _loc_10[2];
            return;
        }// end function

        public function setData(param1:Array, param2:Number) : void
        {
            if (!param1 || param1.length == 0)
            {
                return;
            }
            datas = param1;
            prevclose = param2;
            datasLength = datas.length;
            days = datasLength;
            this.setExtValue();
            this.initPoses();
            return;
        }// end function

        override protected function calcPoses() : void
        {
            var _loc_1:Object = null;
            var _loc_2:uint = 0;
            var _loc_5:Object = null;
            var _loc_6:Object = null;
            var _loc_3:* = _cfg.getWorkingMAArr()[0].length;
            var _loc_4:uint = 0;
            while (_loc_4 < datasLength)
            {
                
                _loc_1 = datas[_loc_4];
                _loc_5 = poses[_loc_4];
                _loc_6 = marks[_loc_4];
                _loc_5.isHighest = _loc_1.isHighest;
                _loc_5.isLowest = _loc_1.isLowest;
                _loc_5.close = _dataTool.calcPricePosy(_loc_1.close, labelMinP, labelMaxP, _cfg.hReal);
                _loc_5.open = _dataTool.calcPricePosy(_loc_1.open, labelMinP, labelMaxP, _cfg.hReal);
                _loc_5.high = _dataTool.calcPricePosy(_loc_1.high, labelMinP, labelMaxP, _cfg.hReal);
                _loc_5.low = _dataTool.calcPricePosy(_loc_1.low, labelMinP, labelMaxP, _cfg.hReal);
                _loc_5.volume = _dataTool.calcVolumePosy(_loc_1.volume, labelMaxVol);
                _loc_2 = 0;
                while (_loc_2 < _loc_3)
                {
                    
                    _loc_5["ma_price" + _loc_2] = _dataTool.calcPricePosy(_loc_1["ma_price" + _loc_2], labelMinP, labelMaxP, _cfg.hReal);
                    _loc_5["ma_volume" + _loc_2] = _dataTool.calcVolumePosy(_loc_1["ma_volume" + _loc_2], labelMaxVol);
                    _loc_2 = _loc_2 + 1;
                }
                _loc_6.close = _dataTool.price2string(_loc_1.close, hq.ppp);
                _loc_6.percent = (_loc_1.percent * 100).toFixed(hq.ppp) + "%";
                _loc_6.open = _dataTool.price2string(_loc_1.open, hq.ppp);
                _loc_6.high = _dataTool.price2string(_loc_1.high, hq.ppp);
                _loc_6.low = _dataTool.price2string(_loc_1.low, hq.ppp);
                _loc_6.volume = _dataTool.volume2string(_loc_1.volume, true);
                _loc_2 = 0;
                while (_loc_2 < _loc_3)
                {
                    
                    _loc_6["ma_price" + _loc_2] = _dataTool.price2string(_loc_1["ma_price" + _loc_2], hq.ppp);
                    _loc_6["ma_volume" + _loc_2] = _dataTool.volume2string(_loc_1["ma_volume" + _loc_2], true);
                    _loc_2 = _loc_2 + 1;
                }
                _loc_4 = _loc_4 + 1;
            }
            return;
        }// end function

    }
}
