package hsuan
{
    import flash.display.*;
    import flash.events.*;

    public class ColorPalette extends Sprite
    {
        private const COLOR_ARR:Array;
        private const NUM:uint = 4;
        private var _seledColor:uint;
        private var _panel:Sprite;
        private const GAP:uint = 7;
        private var _first:Boolean = true;
        private var _prev:Sprite;

        public function ColorPalette(param1:uint)
        {
            var _loc_4:AColor = null;
            this.COLOR_ARR = [16384512, 16755715, 9222925, 1228249, 15609714, 15952896, 901480, 1023458, 16555192, 13710336, 32319, 485060, 10102132, 9978880, 2381855, 18301];
            this._prev = new Sprite();
            this._prev.buttonMode = true;
            this.setColorPrev(param1);
            this._prev.addEventListener(MouseEvent.CLICK, this.onClk);
            addChild(this._prev);
            this._panel = new Sprite();
            this._panel.visible = false;
            this._panel.graphics.lineStyle(0, 12436431);
            this._panel.graphics.beginFill(16777215);
            this._panel.graphics.drawRect(0, 0, 100, 100);
            this._panel.graphics.endFill();
            this._panel.x = 23;
            this._panel.y = 3;
            addChild(this._panel);
            var _loc_2:* = this.GAP;
            var _loc_3:* = this.GAP;
            var _loc_5:uint = 0;
            while (_loc_5 < this.COLOR_ARR.length)
            {
                
                if (_loc_5 != 0 && _loc_5 % this.NUM == 0)
                {
                    _loc_3 = _loc_3 + 23;
                    _loc_2 = this.GAP;
                }
                _loc_4 = new AColor(this.COLOR_ARR[_loc_5]);
                _loc_4.x = _loc_2;
                _loc_4.y = _loc_3;
                _loc_4.addEventListener(MouseEvent.CLICK, this.clkColor);
                this._panel.addChild(_loc_4);
                _loc_2 = _loc_2 + (_loc_4.width + this.GAP);
                _loc_5 = _loc_5 + 1;
            }
            return;
        }// end function

        private function clkColor(event:MouseEvent) : void
        {
            this.setColorPrev((event.currentTarget as AColor).colorValue);
            this.closeCp();
            return;
        }// end function

        private function onClk(event:MouseEvent) : void
        {
            this._panel.visible = true;
            stage.addEventListener(MouseEvent.CLICK, this.anyClk);
            return;
        }// end function

        private function anyClk(event:MouseEvent) : void
        {
            if (this._first)
            {
                this._first = false;
                return;
            }
            if (!this._panel.hitTestPoint(event.stageX, event.stageY))
            {
                this.closeCp();
            }
            return;
        }// end function

        public function get seledColor() : uint
        {
            return this._seledColor;
        }// end function

        public function setColorPrev(param1:uint) : void
        {
            this._prev.graphics.clear();
            this._prev.graphics.lineStyle(0, 16777215);
            this._prev.graphics.beginFill(param1);
            this._prev.graphics.drawRect(0, 0, 15, 15);
            this._prev.graphics.endFill();
            this._seledColor = param1;
            return;
        }// end function

        public function closeCp() : void
        {
            if (stage)
            {
                stage.removeEventListener(MouseEvent.CLICK, this.anyClk);
            }
            this._panel.visible = false;
            this._first = true;
            return;
        }// end function

    }
}
