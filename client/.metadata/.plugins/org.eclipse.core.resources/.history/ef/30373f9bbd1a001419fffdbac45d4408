package com.sina.finance.ui
{

    public class IndicatorOBV extends Indicator
    {
        private const COBV:uint = 255;
        private const EOBVMA:uint = 30;
        private var _min:Number;
        private const COBVMA:uint = 16711935;
        private var _obvLine:LineCurve;
        private var _obvmas:Array;
        private var _max:Number;
        private var _obvmaLine:LineCurve;
        private var _obvs:Array;

        public function IndicatorOBV()
        {
            _color2 = this.COBV;
            _color3 = this.COBVMA;
            this._obvLine = new LineCurve(1, this.COBV, 1, false);
            this._obvmaLine = new LineCurve(1, this.COBVMA, 1, false);
            addChild(this._obvLine);
            addChild(this._obvmaLine);
            return;
        }// end function

        override public function draw(param1:uint = 24) : void
        {
            this._obvLine.clear(true);
            this._obvmaLine.clear(true);
            var _loc_2:* = _objs.length;
            var _loc_3:* = _cfg.KW / _loc_2;
            if (_loc_2 < _cfg.NK)
            {
                _loc_3 = _cfg.KW / _cfg.NK;
            }
            var _loc_4:* = _loc_3 / 2;
            var _loc_5:* = _cfg.hindicator * this._max / (this._max - this._min);
            var _loc_6:uint = 0;
            while (_loc_6 < _loc_2)
            {
                
                if (_loc_6 == 0)
                {
                    this._obvLine.moveTo(_loc_4, _objs[_loc_6].obvy);
                    this._obvmaLine.moveTo(_loc_4, _objs[_loc_6].obvmay);
                }
                else
                {
                    this._obvLine.lineTo(_loc_4, _objs[_loc_6].obvy);
                    this._obvmaLine.lineTo(_loc_4, _objs[_loc_6].obvmay);
                }
                _loc_4 = _loc_4 + _loc_3;
                _loc_6 = _loc_6 + 1;
            }
            return;
        }// end function

        override public function initDatasBySource(param1:Array) : void
        {
            var _loc_5:Number = NaN;
            destroyArray(this._obvs);
            destroyArray(this._obvmas);
            destroyArray(_objs);
            this._obvs = [];
            this._obvmas = [];
            _objs = [];
            var _loc_2:* = param1.length;
            var _loc_3:Number = 0;
            var _loc_4:Number = 0;
            var _loc_6:* = param1[0];
            if (isNaN(_loc_6.prevclose) || Number(_loc_6.close) > Number(_loc_6.prevclose))
            {
                _loc_5 = _loc_6.volume;
            }
            else
            {
                _loc_5 = -_loc_6.volume;
            }
            if (_loc_6.close == _loc_6.prevclose)
            {
                _loc_3 = 0;
            }
            else
            {
                _loc_3 = _loc_5;
            }
            _loc_4 = _loc_3;
            this._obvs.push(_loc_3);
            this._obvmas.push(_loc_3);
            if (_loc_2 == 1)
            {
                return;
            }
            var _loc_7:uint = 1;
            while (_loc_7 < _loc_2)
            {
                
                if (param1[_loc_7].close > param1[(_loc_7 - 1)].close)
                {
                    _loc_5 = Number(param1[_loc_7].volume);
                }
                else if (param1[_loc_7].close == param1[(_loc_7 - 1)].close)
                {
                    _loc_5 = 0;
                }
                else
                {
                    _loc_5 = -Number(param1[_loc_7].volume);
                }
                _loc_3 = _loc_5 + this._obvs[(_loc_7 - 1)];
                this._obvs.push(_loc_3);
                _loc_4 = _loc_4 + _loc_3;
                if (_loc_7 >= this.EOBVMA)
                {
                    _loc_4 = _loc_4 - this._obvs[_loc_7 - this.EOBVMA];
                    this._obvmas.push(_loc_4 / this.EOBVMA);
                }
                else
                {
                    this._obvmas.push(_loc_4 / (_loc_7 + 1));
                }
                _loc_7 = _loc_7 + 1;
            }
            return;
        }// end function

        override public function setDefaultText() : void
        {
            var _loc_1:* = _objs.length - 1;
            setTitleText("", "OBV: " + this.getOBVText(Number(_objs[_loc_1].obv)), "OBVMA30: " + this.getOBVText(Number(_objs[_loc_1].obvma)));
            return;
        }// end function

        override public function calcObjs(param1:uint, param2:uint) : void
        {
            var _loc_7:Object = null;
            var _loc_3:* = param2 - param1;
            while (_objs.length > _loc_3)
            {
                
                _objs.pop();
            }
            while (_objs.length < _loc_3)
            {
                
                _objs.push({});
            }
            this._max = -1000;
            this._min = 100000000000;
            var _loc_4:* = param1;
            while (_loc_4 < param2)
            {
                
                _loc_7 = _objs[_loc_4 - param1];
                _loc_7.obv = this._obvs[_loc_4];
                _loc_7.obvma = this._obvmas[_loc_4];
                this._min = Math.min(_loc_7.obv, _loc_7.obvma, this._min);
                this._max = Math.max(_loc_7.obv, _loc_7.obvma, this._max);
                _loc_4 = _loc_4 + 1;
            }
            var _loc_5:* = this._max - this._min;
            var _loc_6:* = _cfg.hindicator - 10;
            _loc_4 = 0;
            while (_loc_4 < _loc_3)
            {
                
                _objs[_loc_4].obvy = _loc_6 * (this._max - _objs[_loc_4].obv) / _loc_5;
                _objs[_loc_4].obvmay = _loc_6 * (this._max - _objs[_loc_4].obvma) / _loc_5;
                _loc_4 = _loc_4 + 1;
            }
            setLeftText(this._min, this._max, 3, 2);
            return;
        }// end function

        override public function interactiveEnd() : void
        {
            this._obvLine.interactiveEnd();
            this._obvmaLine.interactiveEnd();
            return;
        }// end function

        private function getOBVText(param1:Number) : String
        {
            if (param1 > 1000000000 || param1 < -1000000000)
            {
                return (param1 / 100000000).toFixed(2) + "亿";
            }
            if (param1 > 100000 || param1 < -100000)
            {
                return (param1 / 10000).toFixed(2) + "万";
            }
            return param1.toFixed(2);
        }// end function

        override public function interactiveTo(param1:uint) : void
        {
            this._obvLine.interactiveTo(param1);
            this._obvmaLine.interactiveTo(param1);
            if (param1 >= _objs.length)
            {
                param1 = _objs.length - 1;
            }
            setTitleText("", "OBV: " + this.getOBVText(Number(_objs[param1].obv)), "OBVMA30: " + this.getOBVText(Number(_objs[param1].obvma)));
            return;
        }// end function

    }
}
