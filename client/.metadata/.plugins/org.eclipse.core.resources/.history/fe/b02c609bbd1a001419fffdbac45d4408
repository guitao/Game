package stock.com.ui.elements.xpainting.painter
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import stock.com.ui.elements.xpainting.*;
    import stock.com.ui.elements.xpainting.painter.square.*;

    public class GoldenCutLinesXPainter extends XPainter
    {
        private var directP:Point;
        private var endP:Point;
        private var endSquare:SmallSquare;
        private var startSquare:SmallSquare;
        private var texts:Array;
        private var distance:Number = 0;
        private var series:Array;
        private var startP:Point;

        public function GoldenCutLinesXPainter()
        {
            this.directP = new Point(-1, 0);
            this.series = [0, 23.6, 38.2, 50, 61.8, 76.4, 100, 138.2, 161.8, 200, 238.2, 261.8];
            this.texts = [];
            this.init();
            return;
        }// end function

        private function onStartSquareDown(event:MouseEvent) : void
        {
            movingObject = STARTSQUARE;
            this.onSquareDown();
            return;
        }// end function

        private function onEndSquareDown(event:MouseEvent) : void
        {
            movingObject = ENDSQUARE;
            this.onSquareDown();
            return;
        }// end function

        private function init() : void
        {
            this.startSquare = new SmallSquare();
            this.endSquare = new SmallSquare(6, controllableColor);
            super.addChild(this.startSquare);
            super.addChild(this.endSquare);
            squares = [this.startSquare, this.endSquare];
            hideSmallSquare();
            this.startSquare.addEventListener(MouseEvent.MOUSE_DOWN, this.onStartSquareDown, false, 0, true);
            this.endSquare.addEventListener(MouseEvent.MOUSE_DOWN, this.onEndSquareDown, false, 0, true);
            return;
        }// end function

        override protected function beginListening() : void
        {
            sensor.addEventListener(MouseEvent.MOUSE_MOVE, this.onMove);
            sensor.addEventListener(MouseEvent.MOUSE_UP, this.onUp);
            _stage.addEventListener(Event.MOUSE_LEAVE, this.onLeave);
            return;
        }// end function

        private function updatePoints(param1:int, param2:Point) : void
        {
            var _loc_4:Point = null;
            var _loc_3:* = super.globalToLocal(param2);
            if (param1 == STARTSQUARE)
            {
                _loc_4 = new Point((rect.left + rect.right) / 2, _loc_3.y);
                this.endP.y = this.endP.y + (_loc_4.y - this.startP.y);
                this.startP = _loc_4;
            }
            else
            {
                this.endP = this.getEndPoint(_loc_3);
            }
            return;
        }// end function

        private function onMove(event:MouseEvent) : void
        {
            this.updatePoints(movingObject, new Point(event.stageX, event.stageY));
            this.drawlines(this.startP, this.endP);
            event.stopPropagation();
            return;
        }// end function

        private function onUp(event:MouseEvent) : void
        {
            this.endListening();
            endPaint();
            event.stopPropagation();
            return;
        }// end function

        private function onSquareDown() : void
        {
            hideSmallSquare();
            this.beginListening();
            return;
        }// end function

        override public function begingPaint(param1:Sprite, param2:Stage, param3:Rectangle, param4:Point) : void
        {
            super.begingPaint(param1, param2, param3, param4);
            this.startP = new Point((param3.left + param3.right) / 2, param4.y);
            movingObject = ENDSQUARE;
            this.beginListening();
            return;
        }// end function

        private function onLeave(event:Event) : void
        {
            this.endListening();
            endPaint();
            return;
        }// end function

        private function getEndPoint(param1:Point) : Point
        {
            var _loc_2:* = Calculator.instance.calcNormalVector(this.directP);
            this.distance = Calculator.instance.calcLinesDirectedDistance(this.startP, param1, _loc_2);
            return new Point(this.startP.x + this.distance * _loc_2.x, this.startP.y + this.distance * _loc_2.y);
        }// end function

        override protected function endListening() : void
        {
            sensor.removeEventListener(MouseEvent.MOUSE_MOVE, this.onMove);
            sensor.removeEventListener(MouseEvent.MOUSE_UP, this.onUp);
            _stage.removeEventListener(Event.MOUSE_LEAVE, this.onLeave);
            return;
        }// end function

        override public function destroy() : void
        {
            this.startSquare.removeEventListener(MouseEvent.MOUSE_DOWN, this.onStartSquareDown);
            this.endSquare.removeEventListener(MouseEvent.MOUSE_DOWN, this.onEndSquareDown);
            this.endListening();
            this.startSquare = null;
            this.endSquare = null;
            super.destroy();
            return;
        }// end function

        private function drawlines(param1:Point, param2:Point) : void
        {
            var _loc_4:int = 0;
            var _loc_5:TextField = null;
            var _loc_6:uint = 0;
            this.startSquare.x = param1.x;
            this.startSquare.y = param1.y;
            this.endSquare.x = param2.x;
            this.endSquare.y = param2.y;
            clearPaint();
            var _loc_3:* = new Point(param2.x - param1.x, param2.y - param1.y);
            if (!this.texts || this.texts.length == 0)
            {
                _loc_4 = 0;
                while (_loc_4 < this.series.length)
                {
                    
                    _loc_5 = getTextField(0, 1, 11);
                    _loc_5.text = Number(this.series[_loc_4]).toFixed(1) + "%";
                    this.texts.push(_loc_5);
                    _loc_5.x = 2;
                    if (_loc_4 != 0)
                    {
                        super.addChild(_loc_5);
                    }
                    _loc_4++;
                }
            }
            _loc_4 = 0;
            while (_loc_4 < this.series.length)
            {
                
                _loc_6 = 255;
                if (this.series[_loc_4] == 0 || this.series[_loc_4] == 100)
                {
                    _loc_6 = 16711680;
                    drawStraightLine(new Point(this.startP.x + _loc_3.x * this.series[_loc_4] / 100, this.startP.y + _loc_3.y * this.series[_loc_4] / 100), this.directP, rect, _loc_6);
                }
                else if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 40)
                {
                    if (_loc_4 == 11 || _loc_4 == 6)
                    {
                        drawDashStraightLine(new Point(this.startP.x + _loc_3.x * this.series[_loc_4] / 100, this.startP.y + _loc_3.y * this.series[_loc_4] / 100), this.directP, rect, _loc_6, 4, 5);
                    }
                }
                else if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 80)
                {
                    if (_loc_4 == 3 || _loc_4 == 6 || _loc_4 == 9 || _loc_4 == 11)
                    {
                        drawDashStraightLine(new Point(this.startP.x + _loc_3.x * this.series[_loc_4] / 100, this.startP.y + _loc_3.y * this.series[_loc_4] / 100), this.directP, rect, _loc_6, 4, 5);
                    }
                }
                else if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 150)
                {
                    if (_loc_4 == 3 || _loc_4 == 5 || _loc_4 == 6 || _loc_4 == 7 || _loc_4 == 8 || _loc_4 == 9 || _loc_4 == 11 || _loc_4 == 10)
                    {
                        drawDashStraightLine(new Point(this.startP.x + _loc_3.x * this.series[_loc_4] / 100, this.startP.y + _loc_3.y * this.series[_loc_4] / 100), this.directP, rect, _loc_6, 4, 5);
                    }
                }
                else
                {
                    drawDashStraightLine(new Point(this.startP.x + _loc_3.x * this.series[_loc_4] / 100, this.startP.y + _loc_3.y * this.series[_loc_4] / 100), this.directP, rect, _loc_6, 4, 5);
                }
                if (_loc_4 != 0)
                {
                    _loc_5 = this.texts[_loc_4];
                    if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 40)
                    {
                        if (_loc_4 == 6 || _loc_4 == 11)
                        {
                            _loc_5.visible = true;
                        }
                        else
                        {
                            _loc_5.visible = false;
                        }
                    }
                    else if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 80)
                    {
                        if (_loc_4 == 3 || _loc_4 == 6 || _loc_4 == 9 || _loc_4 == 11)
                        {
                            _loc_5.visible = true;
                        }
                        else
                        {
                            _loc_5.visible = false;
                        }
                    }
                    else if (Math.abs(this.startP.y + _loc_3.y * this.series[11] / 100 - param1.y) < 150)
                    {
                        if (_loc_4 == 3 || _loc_4 == 5 || _loc_4 == 6 || _loc_4 == 7 || _loc_4 == 8 || _loc_4 == 9 || _loc_4 == 11 || _loc_4 == 10)
                        {
                            _loc_5.visible = true;
                        }
                        else
                        {
                            _loc_5.visible = false;
                        }
                    }
                    else
                    {
                        _loc_5.visible = true;
                    }
                    _loc_5.y = this.startP.y + _loc_3.y * this.series[_loc_4] / 100 + (_loc_3.y >= 0 ? (-_loc_5.height + 2) : (-2));
                }
                _loc_4++;
            }
            return;
        }// end function

    }
}
